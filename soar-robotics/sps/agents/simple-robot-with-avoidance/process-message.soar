sp {simple-robot*propose*process-message
   (state <s> ^name simple-robot
              ^io.input-link.self <self>)
   (<self> ^name <name>
           ^received-messages.message <m>)
  -(<m> ^status processed)
-->
   (<s> ^operator <op> + > =)
   (<op> ^name process-message
         ^message <m>)
}

sp {apply*process-message*ignore-self
   (state <s> ^operator <op>
              ^io.input-link.self.name <name>)
   (<op> ^name process-message
         ^message <m>)
   (<m> ^from <name>
        ^id <id>)
-->
   (<m> ^status processed)
   (write (crlf) |Ignoring own message|)
   (exec player-print |Ignoring own message|)
}

# this will fire when the next message comes in
sp {apply*process-message*status-processed
   (state <s> ^superstate nil
              ^io <io>)
   (<io> ^input-link <il>
         ^output-link <ol>)
   (<il> ^self.received-messages.message <m>)
   (<m> ^status processed
        ^id <id>)
-->
   (<ol> ^remove-message.id <id>)
   #(write (crlf) |Removing message | <id>)
   #(exec player-print |Removing message | <id>)
}

#
# update-map messages
#

# message: update-map remove-link <id1> <id2>
sp {apply*process-message*update-map-remove-link
   (state <s> ^operator <op>
              ^io.input-link.self.name <name>
              ^waypoints.waypoint <wp1>)
   (<wp1> ^id <id1>
          ^next <wp2>)
   (<wp2> ^id <id2>
          ^next <wp1>)
   (<op> ^name process-message
         ^message <m>)
   (<m>  ^id <id>
         ^from <> <name>
        ^first <w1>)
   (<w1> ^word update-map
         ^next <w2>)
   (<w2> ^word remove-link
         ^next <w3>)
   (<w3> ^word <id1>
         ^next <w4>)
   (<w4> ^word <id2>)
-->
   (<wp1> ^next <wp2> -)
   (<wp2> ^next <wp1> -)
   (<m> ^status processed)
   (write (crlf) |Updated map, removed link from | <id1> | to | <id2>)
   (exec player-print |Updated map, removed link from | <id1> | to | <id2>)
}

sp {apply*process-message*update-map-inapplicable
   (state <s> ^operator <op>
              ^io.input-link.self.name <name>
              ^waypoints.waypoint <wp1> <wp2>)
   (<wp1> ^id <id1>
         -^next <wp2>)
   (<wp2> ^id <id2>)
   (<op> ^name process-message
         ^message <m>)
   (<m>  ^id <id>
         ^from <> <name>
        ^first <w1>)
   (<w1> ^word update-map
         ^next <w2>)
   (<w2> ^word remove-link
         ^next <w3>)
   (<w3> ^word <id1>
         ^next <w4>)
   (<w4> ^word <id2>)
-->
   (<m> ^status processed)
   (write (crlf) |Ignoring message to update map, remove-link from | <id1> | to | <id2> | (map already updated)|)
   (exec player-print |Ignoring message to update map, remove-link from | <id1> | to | <id2> | (map already updated)|)
}

#
# entity-report messages
#

sp {simple-robot*elaborate*message-with-entity-structure
   (state <s> ^name simple-robot
              ^io.input-link.self <self>)
   (<self> ^name <name>
           ^received-messages.message <m>)
   (<m> -^status processed
        -^from <name>
         ^first <w1>)
   (<w1> ^word entity-report
         ^next <w2>)
   (<w2> ^word position-update
         ^next <w3>)
   (<w3> ^word <id>
         ^next <w4>)
   (<w4> ^word <x>
         ^next <w5>)
   (<w5> ^word <y>
         ^next <w6>)
   (<w6> ^word <friendly>
         ^next <nil>)
-->
   (<m> ^entity <e>)
   (<e> ^id <id>
        ^friendly <friendly>
        ^absolute-location <al>)
   (<al> ^x <x>
          ^y <y>)
}

# if we can see the entity, ignore the message
sp {apply*process-message*ignore-visible-entity
   (state <s> ^operator <op>
              ^io.input-link.entities.entity <ei>)
   (<op> ^name process-message
         ^message <m>)
   (<m> ^entity.id <id>)
   (<ei> ^id <id>
         ^visible true)
-->
   (<m> ^status processed)
}

# set up operator so maintain-entity-new apply rule fires
sp {apply*process-message*maintain-entity-new
   (state <s> ^operator <op>
              ^entities <es>)
   (<op> ^name process-message
         ^message.entity <e>)
   (<e> ^id <id>)
  -(<es> ^entity.id <id>)
-->
   (<op> ^name maintain-entity-new
         ^id <id>)
}

# set up operator so maintain-entity-make-persistent-copy apply rules fire
sp {apply*process-message*maintain-entity-make-persistent-copy
   (state <s> ^operator <op>
              ^io.input-link.time.seconds <time>
              ^entities.entity <es>)
   (<op> ^name process-message
         ^message <m>)
   (<m> -^status processed
         ^entity <em>)
   (<es> ^id <id>)
   (<em> ^id <id>)
-->
   (<op> ^name maintain-entity-make-persistent-copy
         ^input-entity <em>
         ^state-entity <es>
         ^last-contact-time <time>)
}

# this should fire in parallel with apply rules for maintain-entity-make-persistent-copy
sp {apply*maintain-entity*mark-message-processed
   (state <s> ^operator <op>)
   (<op> ^name process-message
         ^name maintain-entity-make-persistent-copy
         ^message <m>)
-->
   (<m> ^status processed)
}
