# Choose which waypoint to go to next
# Two cases: already at a waypoint so can choose a connected waypoint
#            not at a waypoint so first go to nearest waypoint
#                 this second could lead to trouble as nearest waypoint is not guaranteed to
#                  be accessible - more complex would be to turn and see if way is clear
#                                  to that waypoint before heading toward it.

sp {go-to-location*propose*choose-waypoint*at-current-waypoint
   (state <s> ^name go-to-location
              ^waypoints.current-waypoint.next <w> # at a waypoint
             -^top-state.destination-waypoint) # not already going to a location
-->
   (<s> ^operator <op> +)
   (<op> ^name choose-waypoint
         ^destination <w>)
}

sp {go-to-location*propose*choose-waypoint*not-at-current-waypoint
   (state <s> ^name go-to-location
             -^waypoints.current-waypoint # not at a waypoint
             -^top-state.abandoned-waypoint.source <source>
             -^top-state.destination-waypoint) # not already going to a location
-->
   (<s> ^operator <op> +, <)
   (<op> ^name choose-waypoint
         ^destination <w>)
}

# return to previous waypoint
sp {go-to-location*propose*choose-waypoint*abandoned-waypoint
   (state <s> ^name go-to-location
              ^top-state.abandoned-waypoint.source <source>
             -^waypoints.current-waypoint # not at a waypoint 
             -^top-state.destination-waypoint) # not already going to a location
-->
   (<s> ^operator <op> +, <)
   (<op> ^name choose-waypoint
         ^destination <source>)
}

# Switch waypoint on waypoint-computer
# remove the waypoint that we're "at" - current-waypoint
sp {apply*choose-waypoint*add-waypoint-output-link
   (state <s> ^operator <op>
              ^io.output-link <ol>
              ^waypoints.current-waypoint.id <idr>)
   (<op> ^name choose-waypoint
         ^destination <w>)
   (<w> ^id <ida>
        ^x <x>
        ^y <y>)
-->
   (<ol> ^add-waypoint <aw>
         ^remove-waypoint.id <idr>)
   (<aw> ^id <ida>
         ^x <x>
         ^y <y>)
}

sp {apply*choose-waypoint*create-destination-waypoint
   (state <s> ^operator <op>
              ^top-state <ts>
              ^waypoints.current-waypoint <current>)
   (<op> ^name choose-waypoint
         ^destination <dest>)
   (<ts> ^io.input-link.time.seconds <time>)
-->
   (<ts> ^destination-waypoint <mt>)
   (<mt> ^waypoint <dest>
         ^source <current>)
}

sp {apply*choose-waypoint*remove-abandoned-waypoint
   (state <s> ^operator <op>
              ^top-state <ts>)
   (<op> ^name choose-waypoint
         ^destination <dest>)
   (<ts> ^abandoned-waypoint <ab>)
   (<ab> ^source <dest>)
-->
   (<ts> ^abandoned-waypoint <ab> -)
}

sp {select*choose-waypoint
   (state <s> ^operator <op> +
              ^top-state.mission.current <mission>)
   (<mission> ^id <waypoint>
              ^name go-to-location)
   (<op> ^name choose-waypoint
         ^destination.id <waypoint>)
-->
   (<s> ^operator <op> >)
}
