source simple-robot-with-avoidance.soar

sp {apply*initialize-simple-robot*parameters
   (state <s> ^operator <op>)
   (<op> ^name initialize-simple-robot)
-->
   (<s> ^parameters <p>)
   (<p> ^waypoint-tolerance 0.3 # how close (in meters) the agent needs to be to a waypoint to be considered "at" it
        ^min-progress-distance 0.1 # how much progress the agent has to make when trying to get to a location for it to be considered progress (i.e., to reset cutoff time)
        ^replan-time 2000 # how many seconds (as reported on the input-link) the agent should let the collision avoidance algorithm try to make progress towards the waypoint before replanning
        ^message-update-time 3 # after how many seconds (as reported on the input-link) the agent should send another positition update of an unfriendly entity)
        ^rotation-tolerance 15 # how many degrees the agent's yaw can be off when it has a desired yaw
        ^range-tolerance 1 # distance at which a range arc is considered blocked
        ^throttle 0.5 # throttle at which to move
   )
}

sp {apply*waypoints
   (state <s> ^operator <op>)
   (<op> ^name initialize-simple-robot)
-->
   (<s> ^waypoints <w>)
   (<w> ^waypoint <w1> <w2>)
   (<w1> ^x 0. ^y 0. ^id one ^next <w2>)
   (<w2> ^x 4. ^y 0. ^id two ^next <w1>)
}

sp {apply*initialize-simple-robot*create-mission
   (state <s> ^operator <op>)
   (<op> ^name initialize-simple-robot)
-->
   (<s> ^mission <m>)
   (<m> ^first <s1>)
   (<s1> ^name localize
         ^id one
		 ^next <s2>)
   (<s2> ^name go-to-location
         ^id two
         ^next <s3>)
   (<s3> ^name go-to-location
         ^id one
         #^next nil)
		 ^next <s4>)
   (<s4> ^name reset-mission
         ^next <s2>)
}

sp {mission-complete*stop
(state <s> ^mission.current nil
^io.output-link <ol>)
-->
(<ol> ^stop <stop>)
}
