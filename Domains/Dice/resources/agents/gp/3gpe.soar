## GPE: Adds in test for push on previous bid. Otherwise same as GPD
##          ^push-face-count [ 1 2 ] ^push-dice-number [ 1 2 3 4 ]

gp-max 10000000

gp {dice*rl*challenge-exact*after-bid*not-one*no-push
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link <in>)
   (<op> ^name [ challenge exact ])
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <last-bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
   (<in> ^state.last-bid <bid>)
   (<bid> ^face { [ 2 3 4 5 6 ] <last-bid-face> }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
         -^push-face-count)
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*challenge-exact*after-bid*not-one*push
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link <in>)
   (<op> ^name [ challenge exact ])
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <last-bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
   (<in> ^state.last-bid <bid>)
   (<bid> ^face { [ 2 3 4 5 6 ] <last-bid-face> }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count [ 1 2 ]
          ^push-dice-number [ 1 2 3 4 ])
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*challenge-exact*after-bid*one
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link <in>)
   (<op> ^name [ challenge exact ])
   (<dcs> ^dice-count <dc1> <dcu>)
   (<dc1> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9  10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
   (<in> ^state.last-bid <bid>)
   (<bid> ^face 1
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          -^push-face-count)
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*challenge-exact*after-bid*one*push
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link <in>)
   (<op> ^name [ challenge exact ])
   (<dcs> ^dice-count <dc1> <dcu>)
   (<dc1> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9  10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
   (<in> ^state.last-bid <bid>)
   (<bid> ^face 1
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-dice-number [ 1 2 3 4 ])
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*challenge*after-pass
   (state <s> ^superstate nil
              ^operator <op> +
              ^io.input-link <in>)
   (<op> ^name challenge
         ^target <t1>)
   (<in> ^history <h>)
   (<h> ^action pass
        ^target <t1>)
    (<t1> ^pushed <p1> ^cup <c1>)
    (<p1> ^count [ 0 1 2 3 4 ])
    (<c1> ^count [ 1 2 3 4 5 ] )

-->
   (<s> ^operator <op> = 0)
}

### Add test for previous bid

gp {dice*rl*bid*not-one*same-last-bid
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> ^face <bid-face>
        -^push-face-count)
   (<op> ^name bid
         ^face { <bid-face> [ 2 3 4 5 6 ] }
         ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]     
        -^push-face)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9  10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*bid*not-one*same-last-bid*pushed
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> ^face <bid-face>
         ^push-face-count [ 1 2 ]
         ^push-dice-number [ 1 2 3 4 ])
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ])
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*bid*not-one*not-same-last-bid
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> -^face <bid-face>
         -^push-face-count)
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]     
         -^push-face)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*bid*not-one*not-same-last-bid*pushed
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> -^face <bid-face>
         ^push-face-count [ 1 2 ]
         ^push-dice-number [ 1 2 3 4 ])
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]     
         -^push-face-count)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*bid*not-one*first-bid
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid nil)
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]     
         -^push-face-count)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


############

gp {dice*rl*bid*one*same
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> ^face 1
         -^push-face-count)
   (<op> ^name bid
          ^face 1
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
         -^push-face)
   (<dcs> ^dice-count <dc1> <dcu>)
   (<dc1> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*bid*one*same*pushed
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> ^face 1
         ^push-face-count 1 
         ^push-dice-number [ 1 2 3 4 ])
   (<op> ^name bid
          ^face 1
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
         -^push-face)
   (<dcs> ^dice-count <dc1> <dcu>)
   (<dc1> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*bid*one*not-same
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> -^face 1
         -^push-face-count)
   (<op> ^name bid
         ^face 1
         ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
        -^push-face)
   (<dcs> ^dice-count <dc1> <dcu>)
   (<dc1> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*bid*one*not-same*pushed
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> -^face 1
          ^push-face-count [ 1 2 ]
          ^push-dice-number [ 1 2 3 4 ])
   (<op> ^name bid
         ^face 1
         ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
        -^push-face)
   (<dcs> ^dice-count <dc1> <dcu>)
   (<dc1> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*bid*one*first-bid
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid nil)
   (<op> ^name bid
         ^face 1
         ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
        -^push-face)
   (<dcs> ^dice-count <dc1> <dcu>)
   (<dc1> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

############

gp {dice*rl*bid-push*not-one*push-not-one*same-last-bid
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> ^face <bid-face>
         -^push-face-count)
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face <bid-face>)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*bid-push*not-one*push-not-one*same-last-bid*pushed
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> ^face <bid-face>
          ^push-face-count [ 1 2 ]
          ^push-dice-number [ 1 2 3 4 ])
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face <bid-face>)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*bid-push*not-one*push-not-one*not-last-bid
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> -^face <bid-face>
         -^push-face-count)
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face <bid-face>)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*bid-push*not-one*push-not-one*not-last-bid*pushed
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> -^face <bid-face>
          ^push-face-count [ 1 2 ]
          ^push-dice-number [ 1 2 3 4 ])
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face <bid-face>)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*bid-push*not-one*push-not-one*first-bid
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid nil)
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face <bid-face>)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

########

gp {dice*rl*bid-push*not-one*push-one*same-last-bid
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> ^face <bid-face>
         -^push-face-count)
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8  9 10 11 12 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8  9 10 11 12 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*bid-push*not-one*push-one*same-last-bid*pushed
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> ^face <bid-face>
          ^push-face-count [ 1 2 ]
          ^push-dice-number [ 1 2 3 4 ])
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8  9 10 11 12 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8  9 10 11 12 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*bid-push*not-one*push-one*differ-last-bid
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> -^face <bid-face>
         -^push-face-count)
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*bid-push*not-one*push-one*differ-last-bid*pushed
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> -^face <bid-face>          
          ^push-face-count [ 1 2 ]
          ^push-dice-number [ 1 2 3 4 ])
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*bid-push*not-one*push-one*first-bid
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid nil)
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

#####
gp {dice*rl*bid-push*one*push-one*same
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> ^face 1
         -^push-face-count)
   (<op> ^name bid
          ^face 1 
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dcu>)
   (<dc1> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*bid-push*one*push-one*same*pushed
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> ^face 1
          ^push-face-count 1 
          ^push-dice-number [ 1 2 3 4 ])
   (<op> ^name bid
          ^face 1 
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dcu>)
   (<dc1> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*bid-push*one*push-one*differ
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> -^face 1
         -^push-face-count)
   (<op> ^name bid
          ^face 1 
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dcu>)
   (<dc1> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*bid-push*one*push-one*differ*pushed
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> -^face 1
          ^push-face-count [ 1 2 ]
          ^push-dice-number [ 1 2 3 4 ])
   (<op> ^name bid
          ^face 1 
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dcu>)
   (<dc1> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}



gp {dice*rl*bid-push*one*push-one*first-bid
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid nil)
   (<op> ^name bid
          ^face 1 
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 1
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dcu>)
   (<dc1> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 12 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

#####
## Only have counts up to 7 because don't know one of opponent
##  one must be the other face (1 or <bid-face>) and one must be 
## something else - otherwise we wouldn't push

gp {dice*rl*bid-push*not-one*push-two*same
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> ^face <bid-face>
         -^push-face-count)
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 2
          ^push-face <bid-face>
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*bid-push*not-one*push-two*same*pushed
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> ^face <bid-face>
          ^push-face-count [ 1 2 ]
          ^push-dice-number [ 1 2 3 4 ])
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 2
          ^push-face <bid-face>
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*bid-push*not-one*push-two*not-same
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> -^face <bid-face>
         -^push-face-count)
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 2
          ^push-face <bid-face>
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*bid-push*not-one*push-two*not-same*pushed
   (state <s> ^superstate nil
              ^true-dice-counts <dcs>
              ^operator <op> +
              ^io.input-link.state.last-bid <lb>)
   (<lb> -^face <bid-face>
          ^push-face-count [ 1 2 ]
          ^push-dice-number [ 1 2 3 4 ])
   (<op> ^name bid
          ^face { <bid-face> [ 2 3 4 5 6 ] }
          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
          ^push-face-count 2
          ^push-face <bid-face>
          ^push-face 1)
   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
   (<dc1> ^face <bid-face>
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 ])
   (<dc2> ^face 1
          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 ])
   (<dcu> ^face unknown
          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
-->
   (<s> ^operator <op> = 0)
}

### Should never fire - should never push on first bid

#gp {dice*rl*bid-push*not-one*push-two*first
#   (state <s> ^superstate nil
#              ^true-dice-counts <dcs>
#             ^operator <op> +
#              ^io.input-link.state.last-bid nil)
#   (<op> ^name bid
#          ^face { <bid-face> [ 2 3 4 5 6 ] }
#          ^multiplier [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 ]
#          ^push-face-count 2
#          ^push-face <bid-face>
##          ^push-face 1)
#   (<dcs> ^dice-count <dc1> <dc2> <dcu>)
#   (<dc1> ^face <bid-face>
#          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 ])
#   (<dc2> ^face 1
#          ^count [ 0 1 2 3 4 5 6 7 8 9 10 11 ])
#   (<dcu> ^face unknown
#          ^count [ 1 2 3 4 5 6 7 8 9 10 ])
#-->
#   (<s> ^operator <op> = 0)
#}


############ Better Pass

gp {dice*rl*pass*valid
   (state <s> ^superstate nil
              ^operator <op> +
              ^io.input-link.players.me <me>)
   (<op> ^name pass)
   (<me> ^dice-counts <dcs>
         ^pushed [ 0 1 2 3 4 ])
   (<dcs> ^<face> [ 2 3 4 5 ])
  -(<dcs> ^<> <face> <> 0)  
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*pass*pushed-same*not-valid
   (state <s> ^superstate nil
              ^operator <op> +
              ^io.input-link.players.me <me>)
   (<op> ^name pass)
   (<me> ^pushed <pushed> 
         ^cup.die <> <face>
         ^cup.count [ 1 2 3 4 5 ])  
   (<pushed> ^count [ 1 2 3 4 ]
             ^die.face <face>
            -^die.face <> <face> ) 
-->
   (<s> ^operator <op> = 0)
}

gp {dice*rl*pass*no-push*not-valid
   (state <s> ^superstate nil
              ^operator <op> +
              ^io.input-link.players.me <me>)
   (<op> ^name pass)
   (<me> ^pushed.count 0 
         ^cup.die <face>
         ^cup.die <> <face>
         ^cup.count [ 2 3 4 5 ])  
-->
   (<s> ^operator <op> = 0)
}


gp {dice*rl*pass*push*not-valid-push
   (state <s> ^superstate nil
              ^operator <op> +
              ^io.input-link.players.me <me>)
   (<op> ^name pass)
   (<me> ^pushed <pushed>)
   (<pushed> ^die.face <face>
             ^die.face <> <face>)
-->
   (<s> ^operator <op> = 0)
}

