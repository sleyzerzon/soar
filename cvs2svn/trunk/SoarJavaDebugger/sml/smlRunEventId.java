/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version: 1.3.22
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package sml;

public final class smlRunEventId {
  public final static smlRunEventId smlEVENT_BEFORE_SMALLEST_STEP = new smlRunEventId("smlEVENT_BEFORE_SMALLEST_STEP", smlSystemEventId.smlEVENT_AFTER_RHS_FUNCTION_EXECUTED.swigValue() + 1);
  public final static smlRunEventId smlEVENT_AFTER_SMALLEST_STEP = new smlRunEventId("smlEVENT_AFTER_SMALLEST_STEP");
  public final static smlRunEventId smlEVENT_BEFORE_ELABORATION_CYCLE = new smlRunEventId("smlEVENT_BEFORE_ELABORATION_CYCLE");
  public final static smlRunEventId smlEVENT_AFTER_ELABORATION_CYCLE = new smlRunEventId("smlEVENT_AFTER_ELABORATION_CYCLE");
  public final static smlRunEventId smlEVENT_BEFORE_PHASE_EXECUTED = new smlRunEventId("smlEVENT_BEFORE_PHASE_EXECUTED");
  public final static smlRunEventId smlEVENT_AFTER_PHASE_EXECUTED = new smlRunEventId("smlEVENT_AFTER_PHASE_EXECUTED");
  public final static smlRunEventId smlEVENT_BEFORE_DECISION_CYCLE = new smlRunEventId("smlEVENT_BEFORE_DECISION_CYCLE");
  public final static smlRunEventId smlEVENT_AFTER_DECISION_CYCLE = new smlRunEventId("smlEVENT_AFTER_DECISION_CYCLE");
  public final static smlRunEventId smlEVENT_AFTER_INTERRUPT = new smlRunEventId("smlEVENT_AFTER_INTERRUPT");
  public final static smlRunEventId smlEVENT_BEFORE_RUN_STARTS = new smlRunEventId("smlEVENT_BEFORE_RUN_STARTS");
  public final static smlRunEventId smlEVENT_AFTER_RUN_ENDS = new smlRunEventId("smlEVENT_AFTER_RUN_ENDS");
  public final static smlRunEventId smlEVENT_BEFORE_RUNNING = new smlRunEventId("smlEVENT_BEFORE_RUNNING");
  public final static smlRunEventId smlEVENT_AFTER_RUNNING = new smlRunEventId("smlEVENT_AFTER_RUNNING");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static smlRunEventId swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + smlRunEventId.class + " with value " + swigValue);
  }

  private smlRunEventId(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private smlRunEventId(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private static smlRunEventId[] swigValues = { smlEVENT_BEFORE_SMALLEST_STEP, smlEVENT_AFTER_SMALLEST_STEP, smlEVENT_BEFORE_ELABORATION_CYCLE, smlEVENT_AFTER_ELABORATION_CYCLE, smlEVENT_BEFORE_PHASE_EXECUTED, smlEVENT_AFTER_PHASE_EXECUTED, smlEVENT_BEFORE_DECISION_CYCLE, smlEVENT_AFTER_DECISION_CYCLE, smlEVENT_AFTER_INTERRUPT, smlEVENT_BEFORE_RUN_STARTS, smlEVENT_AFTER_RUN_ENDS, smlEVENT_BEFORE_RUNNING, smlEVENT_AFTER_RUNNING };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}


