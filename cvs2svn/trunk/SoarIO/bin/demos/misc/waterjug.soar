###
### FILE               : waterjug.soar (Soar 8.1)
###

###
### AUTHOR(1)          : Brian.G.Milnes [ Soar 5.1.x ]
###

###
### CREATED(1)         : Nov  6, 89
###

### MODIFIED(9)        : Dec 11, 98     [ Soar 8.1]    John E. Laird
### MODIFIED(8)        : Aug 22, 96     [ Soar 7.0.3 ] Sayan Bhattacharyya
### MODIFIED(7)        : Nov 28, 94     [ Soar 6.2.4 ] Aladin.Akyurek
### MODIFIED(6)        : Sep 28, 94     [ Soar 6.2.4 ] Aladin.Akyurek
### MODIFIED(5)        : Aug 25, 94     [ Soar 6.2.3 ] Aladin.Akyurek
### MODIFIED(4)        : Aug  4, 94     [ Soar 6.2.3 ] Aladin.Akyurek
### MODIFIED(3)        : Aug  3, 94     [ Soar 6.2.3 ] Aladin.Akyurek
### MODIFIED(2)        : May 15, 93     [ Soar 6.0.7 ] Aladin.Akyurek
### MODIFIED(1)        : Dec  9, 89     [ ?          ] Bob.Doorenbos
###

###                           

###
### ABSTRACT. These Soar productions implement the waterjug task.
### The task is to find the sequence of steps that fill the three gallon 
### jug with one gallon of water.  There are a well that has an infinite
### amount of water, a five gallon jug, and a three gallon jug.
###

###
### A PSYCHOLOGICAL NOTE. The present set of productions could be used as a
### starting point to study models of and issues associated with (variant) 
### water jug tasks. Relevant references are listed below.
###

###
### REFERENCES. [1] Atwood, M. E., & Polson, P. G. (1976). A process 
### model for water jug problems. Cognitive Psychology, 8, 191-216.
###             [2] Ernst, G. W., & Newell, A. (1969). GPS: A case study in
### generality and problem solving. New York: Academic Press.
###             [3] Mortensen, U. (1973). Models for some elementary
### problem solving processes. In A. Elithorn & D. Jones (Eds.), Artificial
### and human thinking. San Francisco, CA: Jossey-Bass.
###

###
### DESCRIPTION. The task problem space has three operators: empty, 
### fill, and pour. Empty empties a jug into the well. Fill fills up
### a jug from the well. Pour pours some or all of the contents
### from one jug into the other jug. Pour can only pour out the contents 
### of the jug until the source is empty or the destination is full.
### State Structure: Each jug has attributes for the capacity [volume],
### the amount of water it contains [contents], and the capacity 
### available [free] which is the volume minus the contents.
###   (state s1 ^jug j1)
###   (jug j1 ^volume v1 ^contents c1 ^free f1),
### where v1, c1, and f1 are numbers.
###

multi-attributes jug 3

learn -on

##echo "learning is on"
##pushd ../default

###
### WATERJUG:
### DESIRED STATE
###

sp {waterjug*elaborate*state*initial*desired-state
    (state <s> ^problem-space.name waterjug
               ^name waterjug)
    -->
    (<s> ^desired.jug <k>
         ^jug <i> <j>)
    (<i> ^volume 3
         ^contents 0
         ^free 3) 
    (<j> ^volume 5
         ^contents 0
         ^free 5)
    (<k> ^volume 3 
         ^contents 1)}


source simple.soar
source selection.soar


##popd


###
### TASK NAME AND
### PROBLEM SPACE
###

sp {top-level*elaborate*state*task*waterjug
    (state <s> ^superstate nil)
    -->
    (<s> ^name waterjug 
         ^problem-space <p>)
    (<p> ^name waterjug 
         ^default-state-copy yes
         ^two-level-attributes jug
         ^one-level-attributes last-operator)}

###
### WATERJUG TASK OPERATORS:
### EMPTY, FILL, AND POUR
###

sp {waterjug*propose*empty 
    (state <s> ^jug <i>)
    (<i> ^contents > 0)
    -->
    (<s> ^operator <o>) 
    (<o> ^name empty
         ^jug <i>)}

sp {waterjug*propose*fill
    (state <s> ^jug <i>)
    (<i> ^contents 0)
    --> 
    (<s> ^operator <o>)
    (<o> ^name fill 
         ^jug <i>)}

sp {waterjug*propose*pour
    (state <s> ^jug <i> { <> <i> <j> }) 
    (<i> ^contents > 0 )
    (<j> ^free > 0)
    --> 
    (<s> ^operator <o>)
    (<o> ^name pour 
         ^jug <i> 
         ^into <j>)}

###
### WATERJUG:
### OPERATOR APPLICATION
###

sp {apply*empty
    (state <s> ^operator <o>
               ^jug <i>)
    (<o> ^name empty 
         ^jug <i>)
    (<i> ^volume <volume> 
         ^contents <contents> 
         ^free <free>)
    --> 
    (<i> ^contents 0 <contents> - 
         ^free <volume> <free> - )}

sp {apply*fill 
    (state <s> ^operator <o>
               ^jug <i>)
    (<o> ^name fill 
         ^jug <i>)
    (<i> ^volume <volume> 
         ^contents 0 
         ^free <volume>)
    --> 
    (<i> ^contents <volume> 0 - 
         ^free 0 <volume> - )}

 ## Apply pour when contents of source jug i is less than 
 ## or equal to the capacity available of the destination jug j.
  
sp {apply*pour*source*contents*less-or-equal
    (state <s> ^operator <o>
               ^jug <i> <j>)
    (<o> ^name pour 
         ^jug <i> 
         ^into <j>)
    (<j> ^volume <jvol> 
         ^contents <jcon> 
         ^free <jfree>)
    (<i> ^volume <ivol> 
         ^contents <icon> <= <jfree> 
         ^free <ifree>)
    --> 
    (<i> ^contents 0 <icon> - 
         ^free <ivol> <ifree> - )
    (<j> ^contents (+ <jcon> <icon>) <jcon> - 
         ^free (- <jfree> <icon>) <jfree> - )}

 ## Implement pour when contents of source jug i is more
 ## than the capacity available of the destination jug j.
  
sp {apply*pour*source*contents*more
    (state <s> ^operator <o>
               ^jug <i> <j>)
    (<o> ^name pour 
         ^jug <i> 
         ^into <j>)
    (<i> ^volume <ivol> 
         ^contents <icon> > <jfree> 
         ^free <ifree>)
    (<j> ^volume <jvol> 
         ^contents <jcon> 
         ^free <jfree>)
    --> 
    (<i> ^contents (- <icon> <jfree>) <icon> - 
         ^free (+ <ifree> <jfree>) <ifree> - )
    (<j> ^contents <jvol> <jcon> - 
         ^free 0 <jfree> - )}

  ## Remember the last operator so don't undo it

sp {waterjug*save*operator*save*last-op
    (state <s> ^operator <o>)
    (<o> ^name <name>
         ^jug <j>)
    -->
    (<s> ^last-operator <o1>)
    (<o1> ^name <name>
          ^jug <j>)}
 	    
  ## Remove last operator when new operator applied

sp {waterjug*save*operator*remove*last-op
    (state <s> ^operator <o>
               ^last-operator <lo>)
    (<o> ^name <name>
         ^jug <j>)
   -(<lo> ^name <name> 
         ^jug <j>)
    -->
    (<s> ^last-operator <lo> -)}

###
### EVALUATION:
### STATE SUCCESS/GOAL TEST
###
sp {waterjug*evaluate*state*success
    (state <s> ^desired <d>
               ^problem-space.name waterjug
               ^jug <j>)
    (<d> ^jug <dj>)
    (<dj> ^volume <v> ^contents <c>)
    (<j> ^volume <v> ^contents <c>)
    --> 
    (<s> ^success <d>)}

###
### WATERJUG: 
### SEARCH CONTROL
###

 ## There are three cases of inverse operators:
 ## fill(jug[i]) followed by empty(jug[i]) or
 ## empty(jug[i]) followed by fill(jug[i]) or
 ## pour(jug[i],jug[j]) followed by pour(jug[j],jug[i]).

sp {waterjug*inverse*empty*reject
    (state <s> ^operator <o> + 
               ^last-operator <lo>)
    (<o> ^name empty ^jug <i>)
    (<lo> ^name fill ^jug <i>)
    --> 
    (<s> ^operator <o> - 
         ^reject <o>)}

sp {waterjug*inverse*pour*reject
    "Reject inverse operator."
    (state <s> ^operator <o> + 
               ^last-operator <lo>)
    (<o> ^name pour ^into <j>)
    (<lo> ^name pour ^jug <j>)
    --> 
    (<s> ^operator <o> - 
         ^reject <o>)}

 ## The production that follows biases Soar to
 ## consider evaluating Pour before Fill or Empty.

sp {waterjug*evaluate-object*pour*better
    (state <s> ^operator <o> + )
    (<o> ^name evaluate-object
         ^object.name pour)
    -->
    (<s> ^operator <o> > )}

###
### WATERJUG: 
### MONITOR STATE AND
### OPERATORS
###

sp {waterjug*monitor*state 
    (state <s> ^jug <i> <j>)
    (<i> ^volume 3 ^contents <icon>)
    (<j> ^volume 5 ^contents <jcon>)
    --> 
    (write (crlf)
           | 3:| <icon> 
           | 5:| <jcon> )}

sp {waterjug*monitor*operator-application*empty
    (state <s> ^operator <o>)
    (<o> ^name empty
    	 ^jug <i>)
    (<i> ^volume <volume> ^contents <contents>)
    -->
    (write (crlf) 
    	   |  EMPTY(| <volume> 
    	   |:| <contents> 
    	   |)|)}

sp {waterjug*monitor*operator-application*fill
    (state <s> ^operator <o>)
    (<o> ^name fill 
    	 ^jug <i>)
    (<i> ^volume <volume> ^contents <contents>)
    -->
    (write (crlf) 
    	   |  FILL(| <volume> 
    	   |:| <contents> 
    	   |)|)}

sp {waterjug*monitor*operator-application*pour
    (state <s> ^operator <o>)
    (<o> ^name pour 
    	 ^jug <i>
    	 ^into <j>)
    (<i> ^volume <ivol> ^contents <icon>)
    (<j> ^volume <jvol> ^contents <jcon>)
    -->
    (write (crlf) 
    	   |  POUR(| <ivol> 
    	   |:| <icon> 
    	   |,| <jvol>
    	   |:| <jcon>
    	   |)|)}

sp {waterjug*monitor*tied-operator*empty
    (state <s> ^impasse tie 
               ^attribute operator 
               ^item <item>)
    (<item> ^name empty ^jug <i>)
    (<i> ^volume <volume> ^contents <contents>)
    -->
    (write (crlf) 
    	   |  | <item> 
    	   |: empty(| <volume> 
    	   |:| <contents> 
    	   |)|)}

sp {waterjug*monitor*tied-operator*fill
    (state <s> ^impasse tie 
               ^attribute operator 
               ^item <item>)
    (<item> ^name fill ^jug <i>)
    (<i> ^volume <volume> ^contents <contents>)
    -->
    (write (crlf) 
    	   |  | <item> 
    	   |: fill(| <volume> 
    	   |:| <contents> 
    	   |)|)}

sp {waterjug*monitor*tied-operator*pour
    (state <s> ^impasse tie 
               ^attribute operator 
               ^item <item>)
    (<item> ^name pour ^jug <i> ^into <j>)
    (<i> ^volume <ivol> ^contents <icon>)
    (<j> ^volume <jvol> ^contents <jcon>)
    -->
    (write (crlf) 
    	   |  | <item> 
    	   |: pour(| <ivol> 
    	   |:| <icon> 
    	   |,| <jvol>
    	   |:| <jcon>
    	   |)|)}

### eof of waterjug.soar (Version Type: Soar8)


