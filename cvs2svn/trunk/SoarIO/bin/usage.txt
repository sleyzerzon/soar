# Command line usage and specification document.
# Author: Jonathan Voigt, http://sitemaker.umich.edu/soar/
#
# Lines starting with # and blank lines are ignored.
# Lines starting with ~ start the extended usage section (REQUIRED).
# Lines starting with * separate commands (REQUIRED).
# The first line of a command section is the command name.
#
# All commands have a --help/-h option to print their usage information.
#
# Update help.soar when adding/removing commands to keep the test in sync.
#
add-wme
Usage:	add-wme id [^]attribute value [+]
Options and arguments:
  id		Must be an existing identifier.
  ^		Leading ^ on attribute is optional.
  attribute	Attribute can by any Soar symbol.  Use * to have Soar create
  		a new identifier.
  value		Value ican by any soar symbol.  Use * to have Soar create
  		a new identifier.
  +		If the optional preference is specified, its value must be 
  		+ (acceptable).

Manually add an element to working memory.  add-wme is often used by an input 
function to update Soar's information about the state of the external world.

add-wme adds a new wme with the given id, attribute, value and optional 
preference.  The given id must be an existing identifier.  The attribute and 
value fields can be any Soar symbol.  If * is given in the attribute or value 
field, Soar creates a new identifier (symbol) for that field.  If the preference 
is given, it can only have the value + to indicate that an acceptable preference 
should be created for this wme.
~~~
***
alias
Usage:	alias name cmd [args..]
	alias -d name
	alias
Options and arguments:
  -d, --disable, --off	Remove the named alias.
  name			The name of the alias, i.e. the new command.
  cmd			The command that the alias will be replacing.
  args			Arguments for the command (optional & optional number).

The alias command with no arguments lists the current alias database.
~~~
***
capture-input
Usage:	capture-input
~~~
***
cd
Usage:	cd [directory]
Options and arguments:
  directory 		The directory to change in to, can be relative or full
  			path.

Change the current working directory. If run with no arguments, returns to the 
directory that the command line interface was started in, often referred to the 
'home' directory.

See also the 'home' command.
~~~
On success:
<result>true</result>
***
chunk-name-format
Usage:	chunk-name-format [-sl] -p [<prefix>]
	chunk-name-format [-sl] -c [<count>]
Options and arguments:
  -c, --count
  count
  -l, --long
  -p, --prefix
  prefix
  -s, --short
~~~
***
default-wme-depth
Usage:	default-wme-depth [depth]
Options and arguments:
  depth
~~~
***
echo
Usage:	echo [-n] string
Options and arguments:
  -n, --nonewline	Default is to insert a newline at end of string. This
  			disables it.
  string		The string to print back.

Used to echo commands to the console.
~~~
On success:
<result>string</result>
***
excise
Usage:	excise production_name
	excise -[acdtu]
Options and arguments:
  -a, --all		Excise everything.
  -c, --chunks		Excise chunks and justifications
  -d, --default		Excise default productions.
  -t, --task		Excise chunks, justifications, and user productions.
  -u, --user		Excise user productions.
  production_name	Excise a specific production with this name.

Used to remove Soar productions from working memory. A pound sign is printed for 
every production excised. The command must be called with either a specific 
production name or with a flag that indicates a particular group of productions.
~~~
On success:
<result>
  <arg name="count">number_of_productions_excised</arg>
  <arg name="name">production_name</arg>
</result>
Notes: 
	Each excised production will have its name returned.
***
explain-backtraces
Usage:	explain-backtraces
~~~
***
firing-counts
Usage:	firing-counts [n|production_name]
Options and arguments:
  n                 Number of the top firing productions to list
  production_name   Production to list firing counts for

The firing-counts command prints the number of times each production has fired; 
production names are given from most requently fired to least frequently fired. 
With no arguments, it lists all productions. If an integer argument, n, is 
given, only the top n productions are listed.

If n is zero (0), only the productions that haven't fired at all are listed. If 
one or more production names are given as arguments, only firing counts for 
these productions are printed.

Note that firing countsa are reset by a call to init-soar.
~~~
***
format-watch
Usage:	format-watch -a[so] restriction format [restriction format]...
	format-watch -r[so] restriction format [restriction format]...
Options and arguments:
  -a, --add
  -o, --object
  -r, --remove
  -s, --stack
  format
  restriction
~~~
***
gds-print
Usage:	gds-print
~~~
***
help
Usage:	help [command_name]
Options and arguments:
  command_name		Print online help for this command.
~~~
On success:
<result>help_string</result>
***
helpex
Usage:	helpex command_name
Options and arguments:
  command_name		Print extended help for this command.
~~~
On success:
<result>help_string</result>
***
home
Usage:	home [home_directory]
Options and arguments:
  home_directory	Optional home directory to set as home.  Otherwise uses
			current directory.

Used to set the directory where the cd command returns to when invoked with no 
arguments. This is also the directory where the command line interface looks for 
the aliases.txt and usage.txt files, and can be used to reload those files from 
disk.
~~~
On success:
<result>true</result>
***
indifferent-selection
Usage:	indifferent-selection
~~~
***
init-soar
Usage:	init-soar

The init-soar command reinitializes Soar. It empties working memory, wiping out 
the subgoal stack, and resets all runtime statistics. The firing counts for all 
productions is reset to zero. The init-soar command allows a Soar program that 
has been halted to be reset and start its execution from the beginning.

init-soar does not remove any productions from production memory; to do this, 
use the excise command. Note however, that all justifications will be removed 
because they will no longer be supported.
~~~
On success:
<result>true</result>
***
internal-symbols
Usage:	internal-symbols
~~~
***
interrupt
Usage:	interrupt
~~~
***
io
Usage:	io
~~~
***
learn
Usage:	learn [-l]
	learn -[d|e|E|o][ab]
Options and arguments:
  -a, --all-levels      Build productions whenever a subgoal returns a result
  -b, --bottom-up       Build productions only for subgoals that have not yet
                        had any subgoals with chunks built
  -d, --disable, --off  Turn chunking off
  -e, --enable, --on    Turn chunking on
  -E, --except          Chunking is on, except as specified by RHS dont-learn
                        actions
  -l, --list            Prints listings of dont-learn and force-learn states
  -o, --only            Chunking is on only as specified by RHS force-learn
                        actions

The learn command controls the parameters for chunking (Soar's learning 
mechanism). With no arguments, this command prints out the current learning 
environment status. If arguments are provided, they will alter the learning 
environment as described in the options and arguments table.
~~~
On success:
When setting an option:
<result>true</result>
When querying learn status:
<result>
  <arg name="learn_setting" type="boolean">setting</arg>
</result>
Notes:
	Setting is true (learning enabled) or false (disabled).
	Many options not implemented yet.
***
log
Usage:	log [-Ae] filename
	log -a string
	log [-cdoq]
Options and arguments:
  -A, -e, --append	Append to the end of the specified file.
  -a, --add		Add the given string to the log.
  -c, -d, -o, --close, 	Stop logging and close the current log.
      --disable, --off
  -q, --query		Query the current logging status.
  filename              The name of the file to log to.

Invoke log with no arguments (or with -q) to query the current logging status.
Pass a filename to start logging to that file (relative to the command line
interface's  home directory (see the home command)). Use the close option to 
stop logging.
~~~
On success:
<result>
  <arg name="log_setting" type="boolean">setting</arg>
  <arg name="filename" type="string">log_file_name</arg>
</result>
Notes:
	Setting is true (log file open) or false (closed).
	Log filename is only included if the log is open.
***
ls
Usage:	ls
~~~
On success:
<result>true</result>
<result>
  <arg name="filename" type="">filename</arg>
  <arg name="directory" type="">directory</arg>
</result>
Note:
	Returns true with no args if no files are found.
***
matches
Usage:	matches [-[a|r]12cntw]
	matches [-012cntw] production_name
Options and arguments:
  -a, --assertions
  -r, --retractions
  -0, -n, -c, --names
      --count
  -1, -t, --timetags
  -2, -w, --wmes
  production_name
~~~
***
max-chunks
Usage:	max-chunks
~~~
***
max-elaborations
Usage:	max-elaborations
~~~
***
max-nil-output-cycles
Usage:	max-nil-output-cycles
~~~
***
memories
Usage:	memories [-cdju|production_name|n]
Options and arguments:
  -c, --chunks
  -d, --default
  -j, --justifications
  -u, --user
  production_name
  n
~~~
***
multi-attributes
Usage:	multi-attributes [symbol [n]]
Options and arguments:
  symbol	Any Soar attribute.
  n		Integer > 1, estimate of degree of simultaneous values for 
  		attribute.

This command declares the given symbol to be an attribute which can take on 
multiple values.  The optional n is an integer (>1) indicating an upper limit 
on the number of expected values that will appear for an attribute.  If n is 
not  specified, the value 10 is used for each declared multi-attribute.  More 
informed values will tend to result in greater efficiency.  This command is 
used only to provide hints to the production condition reorderer so it can 
produce better condition orderings.  Better orderings enable the rete network 
to run faster.  This command has no effect on the actual contents of working 
memory and most users needn't use this at all.
~~~
<result>
  <arg name="count" type="int">number_of_multi_attributes</arg>
  <arg name="value" type="int">value_of_multi_attribute_1</arg>
  <arg name="name" type="string">name_of_multi_attribute_1</arg>
</result>
<result>true</result>
Notes:
	When listing, there will be a value and name for each multi attribute.
	Total number of multi attributes will be included in count.
	When setting, simply returns true on success.
***
numeric-indifferent-mode
Usage:	numeric-indifferent-mode
~~~
***
o-support-mode
Usage:	o-support-mode
~~~
***
popd
Usage:	popd

Pop the current working directory off the stack and change to the next directory 
on the stack.  Can be relative pathname or fully specified path.
~~~
On success:
<result>true</result>
***
preferences
Usage:	preferences [-0123nNtw] [id] [attribute]
Options and arguments:
  -0, -n, --none
  -1, -N, --names
  -2, -t, --timetags
  -3, -w, --wmes
  id
  attribute
~~~
***
print
Usage:	print [-fFin] production_name
	print -[a|c|D|j|u][fFin]
	print [-fFin] [-d <depth>] identifier|timetag|pattern
	print -s[oS]
Options and arguments:
  -a, --all
  -c, --chunks
  -d, --depth
  -D, --defaults
  -f, --full
  -F, --filename
  -i, --internal
  -j, --justifications
  -n, --name
  -o, --operators
  -s, --stack
  -S, --states
  -u, --user
  depth
  identifier
  pattern
  production_name
  timetag
~~~
***
production-find
Usage:	production-find [-clnrs] pattern
Options and arguments:
  -c, --chunks
  -l, --lhs
  -n, --nochunks
  -r, --rhs
  -s, --show-bindings
  pattern
~~~
***
pushd
Usage:	pushd directory
  directory	Directory to change to, saving the current directory on to
  		the stack.

Maintain a stack of working directories and push the directory on to the stack. 
Can be relative path name or fully specified.
~~~
On success:
<result>true</result>
***
pwatch
Usage:	pwatch [-d|e] [production name]
Options and arguments:
  -d, --disable, --off
  -e, --enable, --on
  production_name

~~~
***
pwd
Usage:	pwd

Prints the current working directory of Soar.
~~~
On success:
<result>directory_string</result>
***
quit
Usage:	quit

This command stops the run, quits the log and closes Soar.
~~~
On success:
<result>Goodbye.</result>
***
remove-wme
Usage:	remove-wme
~~~
***
replay-input
Usage:	replay-input
~~~
***
rete-net
Usage:	rete-net
~~~
***
run
Usage:	run [count]
	run -[d|e|p][fS] [count]
	run -[s|o|O][fS] [count]
Options and arguments:
  -d, --decision	Run Soar for count decision cycles.
  -e, --elaboration	Run Soar for count elaboration cycles.
  -f, --forever		Run until halted by problem-solving completion or 
  			until stopped by an interrupt.
  -O, --operator	Run Soar until the nth time an operator is selected.
  -o, --output		Run Soar until the nth time output is generated by the
  			agent.  Limited by the value of max-nil-output-cycles.
  -p, --phase		Run Soar by phases.  A phase is either an input phase,
  			proposal phase, decision phase, apply phase, or output
  			phase.
  -S, --self		If other agents exist within the kernel, do not run
  			them at this time.
  -s, --state		Run Soar until the nth time a state is selected.
  count			A single integer which specifies the number of cycles
  			to run Soar.

This command runs the Soar agents.  If the -S flag is issued, only the agent 
receiving the run command will run.  The count argument is a single integer 
which specified the number of cycles to run Soar.  If count is unspecified and 
no units are given, then Soar is run until halted by problem-solving completion 
or an external interrupt.  If count is specified, but no units are specified, 
then soar is run by decision cycles.  If units are specified, but count is 
unpecified, then count defaultts to '1'.  The unit argument indicates the unit 
of measure to be used in counting Soar run cycles.
~~~
***
set-default-depth
Usage:	set-default-depth
~~~
***
soar8
Usage:	soar8
~~~
***
source
Usage:	source filename
  filename	The file of Soar productions and commands to load.

Load and evaluate the contents of a file.
~~~
On success:
<result>true</result>
<result>directory_string</result>
Notes:
	Returns the working directory if the pushd's in the file(s) sourced don't match
	with popd's.
***
sp
Usage:	sp { production_body }
  production_body	A Soar production.

Create a new production and enter in to production memory.
~~~
On success:
<result>true</result>
***
stats
Usage:	stats
#Todo:
#Usage:	stats [-s <stat>] [-m <resource>] [-r <rtype_qualifier>]
#Options and arguments:
#  -m, --memory
#  -r, --rete
#  -s, --system
#  resource
#  rtype_qualifier
#  stat
~~~
On success:
<result>stats_string</result>
***
stop-soar
Usage:	stop-soar [-s] [reason_string]
Options and arguments:
  -s, --self
  reason_string
~~~
***
time
Usage:	time command [arguments]
Options and arguments:
  command
  arguments
~~~
<result>
  <arg name="seconds" type="float">real_time_elapsed</arg>
</result>
***
timers
Usage:	timers [-ed]
Options and arguments:
  -d, --disable, --off   Disable all timers.
  -e, --enable, --on     Enable timers as compiled.

This command is used to control the timers that collect internal profiling 
information while Soar is running.  With no arguments, this command prints out 
the current timer status.  Timers are ENABLED by default.  The default 
compilation flags for soar enable the basic timers and disable the detaled 
timers.  The timers command can only enable or disable timers that have already 
been compiled in.  See the stats command for more info on the Soar timing 
system.
~~~
On success:
<result>true</result>
<result><arg name="timers">true</arg></result>
<result><arg name="timers">false</arg></result>
***
waitsnc
Usage:	waitsnc
~~~
***
warnings
Usage:	warnings [-ed]
Options and arguments:
  -e, --enable, --on		Enable printing of warning messages from the
  				kernel (the default).
  -d, --disable, --off		Turn printing of warning messages off.

Enables and disables the printing of warning messages from the Soar kernel.
~~~
<result>
  <arg name="warnings_setting" type="boolean">true_or_false</arg>
</result>
***
watch
Usage:	watch [level] [-n] [-b <switch>] [-c <switch>] [-d <switch>] 
	[-D <switch>] [-i <switch>] [-j <switch>] [-l <detail>] 
	[-L <switch>] [-p <switch>] [-P <switch>] [-r <switch>] 
	[-u <switch>] [-w <switch>] [-W <detail>]
Options and arguments:
  -b, --backtracing		Print backtracing infromation when a chunk
  				is created.
  -c, --chunks			Trace firings of chunks.
  -d, --decisions		Print the state and operator selected each
  				decision cycle.
  -D, --default-productions	Trace firings of default productions.
  -i, --indifferent-selection	When using random mode, print the score for
  				tied operators during the decision phase
  -j, --justifications		Trace firings of justifications.
  -l, --learning		Print names (detail 1) or entire chunks and
  				justifications (detail 2) when created.
  -L, --loading			Print a '*' for each production loaded and a
  				'#' for each production excised.
  -n, --none			Turn all watches off.  Overrides all other
  				flags on the line.
  -p, --phases			Print out the phases of the decision cycle as
  				Soar executes.
  -P, --productions		Equivalent to '-D <switch> -u <switch>
  				-c <switch> -j <switch>'.
  -r, --preferences		Print out preferences asserted and retracted
  				when productions fire and retract.
  -u, --user-productions	Trace firings of user productions.
  -w, --wmes			Print working memory elements that are added
  				and deleted as productions fire and retract.
  -W, --wme-detail		Print no (detail 0) WME information when
  				productions fire and retract, print WME
  				timetags (detail 1), or print full
  				WMEs (detail 2).
  detail			Integer from 0-2:
				  * 0: Off/lowest detail
				  * 1: On/medium detail
				  * 2: On/highest detail
				See option text for specific effect.
  level				Integer from 0-5, higher numbers include the
  				lower numbers' effects:
  				  * 0: Watch nothing (--none)
  				  * 1: Watch decisions
  				  * 2: Watch phases (incl. 1)
  				  * 3: Watch productions (incl. 2, 1)
  				  * 4: Watch wmes (incl. 3, 2, 1)
  				  * 5: Watch preferences (incl. 4, 3, 2, 1)
  switch			Switch argument:
  				  * 0: Turn watches for this option off
  				  * 1: Turn watches for this option on
~~~
<result>true</result>
<result>
  <arg name=sysparam_int type="boolean">true_or_false</arg>
  <arg name=sysparam_int type="int">detail_level</arg>
</result>
Notes:
	sysparam_int is an integer constant referring to a relevant sysparam such as
"14" (TRACE_BACKTRACING_SYSPARAM) or "5" (TRACE_FIRINGS_OF_CHUNKS_SYSPARAM).
	true_or_false is a true or false string.
	detail_level is 0, 1 or 2.
***
watch-wmes
Usage:	watch-wmes -[a|r] -t <type> pattern
	watch-wmes -[l|R] [-t <type>]
Options and arguments:
  -a, --add-filter
  -l, --list-filter
  -r, --remove-filter
  -R, --reset-filter
~~~
***
verbose
Usage:	verbose
~~~
***
version
Usage:	version
~~~
***