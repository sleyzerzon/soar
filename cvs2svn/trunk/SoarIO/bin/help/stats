                                     Stats

                                      Name

   stats - Print information on SoaraEUR(TM)s runtime statistics.

   Priority: 1; Status: Incomplete
   Memory pool and rete stats not implemented with structured
   output.--Jonathan 16:04, 8 Mar 2005 (EST)
   stats -r (raw output) looks like trash output.--Jonathan 16:01, 8 Mar 2005
   (EST)

                                    Synopsis

Structured Output

 stats

Raw Output

 stats [-s|-m|-r]

                                    Options

   +------------------------------------------------------------------------+
   |-m, --memory|report usage for Soar's memory pools                       |
   |------------+-----------------------------------------------------------|
   |-r, --rete  |report statistics about the rete structure                 |
   |------------+-----------------------------------------------------------|
   |-s, --system|report the system (agent) statistics. This is the default  |
   |            |if no args are specified.                                  |
   +------------------------------------------------------------------------+

                                  Description

   This command prints Soar internal statistics. The module indicates the
   component of interest. If specified, module must be one of --system,
   --memory, or --rete. All statistics are listed for that module.

                                    Examples

   This prints all statistics in the --system module:

 stats --system

                                    See Also

   timers

                                A Note on Timers

   The current implementation of Soar uses a number of timers to provide
   time-based statistics for use in the stats command calculations. These
   timers are:
   total CPU time total kernel time phase kernel time (per phase) phase
   callbacks time (per phase) input function time output function time
   Total CPU time is calculated from the time a decision cycle (or number of
   decision cycles) is initiated until stopped. Kernel time is the time spent
   in core Soar functions. In this case, kernel time is defined as the all
   functions other than the execution of callbacks and the input and output
   functions. The total kernel timer is only stopped for these functions. The
   phase timers (for the kernel and callbacks) track the execution time for
   individual phases of the decision cycle (i.e., input phase, preference
   phase, working memory phase, output phase, and decision phase). Because
   there is overhead associated with turning these timers on and off, the
   actual kernel time will always be greater than the derived kernel time
   (i.e., the sum of all the phase kernel timers). Similarly, the total CPU
   time will always be greater than the derived total (the sum of the other
   timers) because the overhead of turning these timers on and off is
   included in the total CPU time. In general, the times reported by the
   single timers should always be greater than than the corresponding derived
   time. Additionally, as execution time increases, the difference between
   these two values will also increase. For those concerned about the
   performance cost of the timers, all the run time timing calculations can
   be compiled out of the code by defining NO_TIMING_STUFF (in soarkernel.h)
   before compilation.

                               Structured Output

   The following arg parameters are returned:

 kParamStatsProductionCountDefault, kTypeInt
 kParamStatsProductionCountUser, kTypeInt
 kParamStatsProductionCountChunk, kTypeInt
 kParamStatsProductionCountJustification, kTypeInt
 kParamStatsCycleCountDecision, kTypeInt
 kParamStatsCycleCountElaboration, kTypeInt
 kParamStatsProductionFiringCount, kTypeInt
 kParamStatsWmeCountAddition, kTypeInt
 kParamStatsWmeCountRemoval, kTypeInt
 kParamStatsWmeCount, kTypeInt
 kParamStatsWmeCountAverage, kTypeDouble
 kParamStatsWmeCountMax, kTypeInt
 kParamStatsKernelTimeTotal, kTypeDouble
 kParamStatsMatchTimeInputPhase, kTypeDouble
 kParamStatsMatchTimeDetermineLevelPhase, kTypeDouble
 kParamStatsMatchTimePreferencePhase, kTypeDouble
 kParamStatsMatchTimeWorkingMemoryPhase, kTypeDouble
 kParamStatsMatchTimeOutputPhase, kTypeDouble
 kParamStatsMatchTimeDecisionPhase, kTypeDouble
 kParamStatsOwnershipTimeInputPhase, kTypeDouble
 kParamStatsOwnershipTimeDetermineLevelPhase, kTypeDouble
 kParamStatsOwnershipTimePreferencePhase, kTypeDouble
 kParamStatsOwnershipTimeWorkingMemoryPhase, kTypeDouble
 kParamStatsOwnershipTimeOutputPhase, kTypeDouble
 kParamStatsOwnershipTimeDecisionPhase, kTypeDouble
 kParamStatsChunkingTimeInputPhase, kTypeDouble
 kParamStatsChunkingTimeDetermineLevelPhase, kTypeDouble
 kParamStatsChunkingTimePreferencePhase, kTypeDouble
 kParamStatsChunkingTimeWorkingMemoryPhase, kTypeDouble
 kParamStatsChunkingTimeOutputPhase, kTypeDouble
 kParamStatsChunkingTimeDecisionPhase, kTypeDouble
 kParamStatsMemoryUsageMiscellaneous, kTypeInt
 kParamStatsMemoryUsageHash, kTypeInt
 kParamStatsMemoryUsageString, kTypeInt
 kParamStatsMemoryUsagePool, kTypeInt
 kParamStatsMemoryUsageStatsOverhead, kTypeInt

                                  Error Values

During Parsing

   kTooManyArgs, kUnrecognizedOption, kGetOptError

During Execution

   kAgentRequired, kgSKIError
