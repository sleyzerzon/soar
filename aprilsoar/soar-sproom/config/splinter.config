controller
{
	productions = "agents/jon-agent.soar";
}

##########################################################
viewer
{
    viewobjects = [ lidars, robot, remotelog ];

    robot {
        class = "april.viewer.ViewRobot";

        avatar {
            path = "config/sim/meshmodels/cy.rwx";
            scale = 7;

            position = [ 0, 0, 0 ];
            rollpitchyaw_degrees = [ 90, 0, 90 ];
        }
    }

    remotelog {
        class = "april.viewer.RemoteLogEventHandler";
    }

    lidars {
        class = "april.viewer.ViewLaser";
    }

    lcmgl {
        class = "april.viewer.ViewLCMGL";
    }

}

##########################################################
# Simulator has two required sections: obstacles and simobjects. All
# other parameters are "discovered" through the simobjects reflection
# mechanism.
simulator
{
    obstacles
    {
        image_path = "sim/lab.png";
        image_origin = [ 0, 0 ];
        meters_per_pixel = 0.01;

        #geometry_path = "simple_indoor.obst";
    }

    # Generic simulation instantiation: add a configuration block to
    # the list of "sims", then define the parameters in the
    # corresponding block. The block must have an entry named "class",
    # which specifies the java class that will be created and passed
    # the remainder of the arguments.
    simobjects = [ simrona, LIDAR_FRONT ];

    simrona
    {
        class = "april.sim.SimRona";
    }

    # Use an anonymous enclosure so we can inherit laser properties
    # amongst all lidars.  Individual lidars should be named according
    # to the LCM channel they publish on, and so that the extrinsics
    # can be found in the global scope.
    {
        class = "april.sim.SimLaser";

        degree0 = -90;
        degree_step = 1;
        nranges = 180;
        range_noise_m = 0.01;
        theta_noise_degrees = 0.25;
        max_range_m = 30;
        hz = 7;

        LIDAR_FRONT
        {
            # no additional parameters to specify!
        }
    }
}

##########################################################

# the robot's coordinate frame has the vehicle at the origin, looking
# down the X axis, with +Y = left and +Z = up.
LIDAR_FRONT {
    position = [ 0, 0, 0.5 ];
    rollpitchyaw_degrees = [ 0, 0, 0 ];
    color = [1, 0, 0];
}
