#!/usr/bin/python
# Project: Soar <http://soar.googlecode.com>
# Author: Jonathan Voigt <voigtjr@gmail.com>

SOAR_VERSION = "9.3.1"

# required and default optional flags when using VC++ compiler
VS_REQ_CFLAGS = '/EHsc /D _CRT_SECURE_NO_DEPRECATE /D _WIN32'
VS_DEF_CFLAGS = '/O2 /W2'

# default compiler flags when using g++
GCC_DEF_CFLAGS = '-O2 -Werror'

import os
import sys
import platform
import socket
import subprocess
import re
import fnmatch

join = os.path.join

def execute(cmd):
	try:
		p = subprocess.Popen(cmd, stdout=subprocess.PIPE)
	except OSError:
		print cmd[0], ' not in path'
		Exit(1)

	out = p.communicate()[0]
	if p.returncode != 0:
		print 'error executing ', cmd
		Exit(1)
	else:
		return out
	
def gcc_version(cc):
	for f in execute([cc, '--version']).split():
		m = re.match(r'([0-9]+)\.([0-9]+)\.([0-9]+)', f)
		if m:
			return tuple(int(n) for n in m.groups())
	
	print 'cannot identify compiler version'
	Exit(1)

def Mac_m64_Capable():
	return execute('sysctl -n hw.optional.x86_64'.split()).strip() == '1'

#################
# Fun Java Stuff
# TODO: Clean doesn't work quite right with jars
# theComponent: the top level folder name, just as JavaTOH
# theTargets: target jar name (or list of names) with -version.extension removed, makes .jar and .src.jar
# theSources: source folder (or list of folders) relative to component folder (such as 'src')
def javaRunAnt(theComponent, theTargets, theSources):
	if env['STATIC_LINKED']:
		print "Skipping Java component", theComponent
		return

	theDir = env.Dir('#../%s/' % theComponent)

	sharejava = env['PREFIX'] + '/share/java'
	javaSources = [sharejava + '/sml.jar']
	if type(theSources) == str:
		theSources = [theSources]
	for s in theSources:
		for root, dirs, files in os.walk(join(str(theDir), s)):
			if ".svn" in dirs:
				dirs.remove(".svn")
			for f in files:
				javaSources.append(env.File(join(root, f)))

	javaSources.append(env.File(join(str(theDir), "build.xml")))

	ver = env['SOAR_VERSION']
	jarTargets = []
	if type(theTargets) == str:
		theTargets = [theTargets]
	for i in theTargets:
		targetRoot = sharejava + '/' + i + '-' + ver
		jarTargets.append(targetRoot + '.jar')
		jarTargets.append(targetRoot + '.src.jar')

	ret = env.Command(jarTargets, javaSources, 'ant -q -Dsoarprefix=$PREFIX -Dversion=%s' % ver, chdir = theDir)

	if GetOption('clean'):
		env.Execute('ant -q -Dsoarprefix=$PREFIX clean -Dversion=' + env['SOAR_VERSION'], chdir = theDir)
	return ret
	
def CheckSWIG():
	for f in execute(['swig', '-version']).split():
		m = re.match(r'([0-9]+)\.([0-9]+)\.([0-9]+)', f)
		if m:
			ver = tuple(int(n) for n in m.groups())
			minver = (1, 3, 31)
			if ver < minver:
				print 'swig version 1.3.31 or higher is required'
				return False
			else:
				return True
				
	print 'cannot determine swig version'
	return False

# Install all files under source directory to target directory, keeping
# subdirectory structure and ignoring hidden files
def InstallDir(env, tgt, src, globstring="*"):
	targets = []
	tgtdir = env.GetBuildPath(tgt)
	srcdir = env.GetBuildPath(src)
	for dir, _, files in os.walk(srcdir):
		if fnmatch.fnmatch(dir, '*/.*'):
			continue
		
		# tgtsub is the target directory plus the relative sub directory
		relative = dir[len(srcdir)+1:]
		tgtsub = join(tgtdir, relative)
		
		for f in fnmatch.filter(files, globstring):
			if not f.startswith('.'):
				p = join(dir, f)
				Install(tgtsub, p)
				targets.append(join(tgtsub, p))
	
	return targets
	

# host:                  winter,           seagull,          macsoar,       fugu,
# os.name:               posix,            posix,            posix,         posix,
# sys.platform:          linux2,           linux2,           darwin,        darwin,
# platform.machine:      x86_64,           i686,             i386,          Power Macintosh,
# platform.architecture: ('64bit', 'ELF'), ('32bit', 'ELF'), ('32bit', ''), ('32bit', '')
print socket.gethostname(), os.name, sys.platform, platform.machine(), platform.architecture()

if os.name not in ['posix', 'nt']:
	print "Unsupported os.name:", os.name
	Exit(1)
if sys.platform not in ['linux2', 'darwin', 'win32']:
	print "Unsupported sys.platform:", sys.platform
	Exit(1)
if platform.machine() not in ['x86_64', 'AMD64', 'i686', 'i386', ]:
	print "Unsupported platform.machine:", platform.machine()


#################
# Option defaults 

m64_default = '32'
if platform.machine() in ['x86_64', 'AMD64'] or (sys.platform == 'darwin' and Mac_m64_Capable()):
	m64_default = '64'

default_prefix = join('..','out')
if os.environ.has_key('SOAR_HOME'):
	default_prefix = os.environ['SOAR_HOME']

default_build = os.path.realpath(join('..','build'))
if os.environ.has_key('SOAR_BUILD'):
	default_build = os.environ['SOAR_BUILD']

################
# Command line options
AddOption('--cxx', action='store', type='string', dest='cxx', default='g++', nargs=1, metavar='COMPILER',
	help='Replace \'g++\' as the C++ compiler.')

AddOption('--cflags', action='store', type='string', dest='cflags', nargs=1,
	help='Compiler flags')

AddOption('--lnflags', action='store', type='string', dest='lnflags', nargs=1,
	help='Linker flags')

AddOption('--platform', action='store', type='choice', choices=['32','64'], dest='platform', default=m64_default, nargs=1, metavar='PLATFORM',
	help='Target platform. Must be one of 32, 64. Default is detected system architecture.')

AddOption('--no-scu', action='store_false', dest='scu', default=True,
	help='Don\'t build using single compilation units.')
	
# TODO: does this do the same thing as install-sandbox?
AddOption('--prefix', action='store', type='string', dest='prefix', default=default_prefix, nargs=1, metavar='DIR',
	help='Directory to install binaries. Defaults to "../out" (relative to SConstruct file).')

AddOption('--build-dir', action='store', type='string', dest='build-dir', default=default_build, nargs=1, metavar='DIR',
	help='Directory to store intermediate (object) files.')

AddOption('--ios', action='store', type='choice', choices=['none','simulator','armv6','armv7'], dest='ios', default='none', nargs=1, metavar='IOS',
	help='Sets up for iOS compilation')

bdir = GetOption('build-dir')
VariantDir(bdir, '.', duplicate=0)

def build_dir(p):
	return join(bdir, p)

env = Environment(
	ENV = {
		'PATH' : os.environ.get('PATH', ''), 
		'TMP' : os.environ.get('TMP','')},
	SCU = GetOption('scu'), 
	BUILD_DIR = bdir,
	PREFIX = os.path.realpath(GetOption('prefix')),
	SOAR_VERSION = SOAR_VERSION,
	CPPPATH = [
		'#shared',
		'#pcre',
		'#SoarKernel/src',
		'#ElementXML/src',
		'#KernelSML/src',
		'#ConnectionSML/src',
		'#ClientSML/src',
		'#CLI/src',
	],
	VISHIDDEN = False,   # needed by swig
)

config = Configure(env)

# check for required libraries
if os.name == 'posix':
	for lib in ['dl', 'm', 'pthread']:
		if not config.CheckLib(lib):
			print 'cannot locate lib%s' % lib
			Exit(1)

if env['CXX'].endswith('g++'):
	compiler = 'g++'
elif env['CXX'].endswith('cl') or (env['CXX'] == '$CC' and env['CC'].endswith('cl')):
	compiler = 'cl'
else:
	compiler = os.path.split(env['CXX'])[1]

if compiler == 'g++':
	if GetOption('cflags') == None:
		cflags = GCC_DEF_CFLAGS
	else:
		cflags = GetOption('cflags')
	
	gcc_ver = gcc_version(env['CXX'])
	# check if the compiler supports -fvisibility=hidden (GCC >= 4)
	if gcc_ver[0] > 3:
		env.Append(CPPFLAGS='-fvisibility=hidden')
		if config.TryCompile('', '.cpp'):
			cflags += ' -fvisibility=hidden -DGCC_HASCLASSVISIBILITY'
			env['VISHIDDEN'] = True
	
	# We need to know if we're on darwin because malloc.h doesn't exist, functions are in stdlib.h
	if sys.platform == 'darwin':
		cflags += ' -DSCONS_DARWIN'

	static_macro = ['-DSTATIC_LINKED']
	shared_macro = []
elif compiler == 'cl':
	if GetOption('cflags') == None:
		cflags = VS_REQ_CFLAGS + ' ' + VS_DEF_CFLAGS
	else:
		cflags = VS_REQ_CFLAGS + ' ' + GetOption('cflags')
	
	static_macro = ['/D', 'STATIC_LINKED']
	shared_macro = ['/D', '_USRDLL']
	env.Append(LIBS='advapi32')  # for GetUserName
	
env.Replace(CPPFLAGS=cflags.split(), LINKFLAGS=(GetOption('lnflags') or "").split())

if GetOption('ios') == 'none':
	if compiler == 'g++':
		if GetOption('platform') == '64':
			env.Append(CPPFLAGS = Split('-m64 -fPIC'))
			env.Append(LINKFLAGS = ['-m64'])
		elif gcc_ver[0] > 4 or gcc_ver[0] > 3 and gcc_ver[1] > 1 and sys.platform not in [ 'darwin', ]:
			env.Append(CPPFLAGS = Split('-m32 -march=native'))
			env.Append(LINKFLAGS = Split('-m32 -march=native'))
		else:
			env.Append(CPPFLAGS = ['-m32'])
			env.Append(LINKFLAGS = ['-m32'])
elif GetOption('ios') == 'simulator':
	env.Append(CPPFLAGS = Split('-m32 -arch i386 -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.0.sdk'))
	env.Append(LINKFLAGS = Split('-m32 -arch i386 -isysroot /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.0.sdk'))
else:
	env.Append(CPPFLAGS = ['-DIPHONE_SDK', '-D__LLP64__']); # (the last is for STLSOFT)
	env['CC'] = '/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/llvm-gcc-4.2'
	env['CXX'] = '/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin/llvm-g++-4.2'
	env.Append(CPPFLAGS = Split('-arch ' + GetOption('ios') + ' -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk'))
	env.Append(LINKFLAGS = Split('-arch ' + GetOption('ios') + ' -isysroot /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS5.0.sdk'))

Export('env')
Export('javaRunAnt')

if env['SCU']:
	scu = 0
else:
	scu = 1

srcs = {
#   Component          SCU source                         Non-SCU source
	'SoarKernel'    : ('SoarKernel/SoarKernel.cxx',       Glob('SoarKernel/src/*.cpp')),
	'sqlite'        : ('SoarKernel/sqlite/sqlite3.c',     ['SoarKernel/sqlite/sqlite3.c']),
	'KernelSML'     : ('KernelSML/KernelSML.cxx',         Glob('KernelSML/src/*.cpp')),
	'ClientSML'     : ('ClientSML/ClientSML.cxx',         Glob('ClientSML/src/*.cpp')),
	'ConnectionSML' : ('ConnectionSML/ConnectionSML.cxx', Glob('ConnectionSML/src/*.cpp')),
	'ElementXML'    : ('ElementXML/ElementXML.cxx',       Glob('ElementXML/src/*.cpp')),
	'CLI'           : ('CLI/CommandLineInterface.cxx',    Glob('CLI/src/*.cpp')),
}

if compiler == 'cl':
	srcs['pcre'] = ('pcre/pcre.cxx', Glob('pcre/*.c'))

shared_env = env.Clone()
shared_env.Append(CPPFLAGS = shared_macro)
shared_objs = [ shared_env.SharedObject(build_dir(c), srcs[c][scu]) for c in srcs ]
shared_lib = shared_env.SharedLibrary(build_dir('Soar'), shared_objs)

#static_env = env.Clone()
#static_env.Append(CPPFLAGS=static_macro)
#static_objs = [ static_env.Object(build_dir('static-%s' % c), srcs[c][scu]) for c in srcs ]
#static_lib = static_env.Library(build_dir('Soar'), static_objs)

install_shared_lib = env.Install('$PREFIX/lib', shared_lib)
#install_static_lib = env.Install('$PREFIX/lib', static_lib)

env.Alias('shared_kernel', install_shared_lib)
#env.Alias('static_kernel', install_static_lib)

components = ['../Java']
#print 'Detected components:',
#for root, dirs, files in os.walk('..'):
#	if root != '..':
#		del dirs[:]
#	if root.startswith('../Core/') or root.startswith(env['PREFIX']) or root.startswith(env['BUILD_DIR']):
#		continue;
#	if 'SConscript' in files:
#		component = root[3:]
#		components.append(component)
#		print component,
#print

subdirs= [ join('ClientSMLSWIG', d) for d in 'Python Java Tcl PHP CSharp'.split() ]

# Build/Output Directory
print "Building intermediates to directory ", env['BUILD_DIR']
print "Installing targets to prefix directory ", env['PREFIX']

for d in subdirs:
	script = join('#' + d, 'SConscript')
	SConscript(script, variant_dir=build_dir(d), duplicate=0)

#################
# Components
# Special environment
compEnv = env.Clone()
compEnv.Prepend(LIBS = 'Soar', LIBPATH = ['$PREFIX/lib'])
Export('compEnv')

# Add TestCLI to components (it uses compEnv which wasn't exported earlier):
components.insert(0, 'Core/TestCLI')
components.insert(0, 'Core/mincli')

for d in components:
	script = '../%s/SConscript' % d
	if os.path.exists(script):
		print "Processing", script + "..."
		SConscript(script, variant_dir=build_dir(d), duplicate=0)

# Resources
for d in ['#ElementXML/src', '#ConnectionSML/src', '#ClientSML/src', '#shared']:
	InstallDir(env, '$PREFIX/include', d, '*.h*')

InstallDir(env, '$PREFIX/share/soar/Demos', '#Demos')
InstallDir(env, '$PREFIX/share/soar/Documentation', '#Documentation')
InstallDir(env, '$PREFIX/share/soar/Tests', '#Tests/Agents')
resources = env.Alias('resources', [join('$PREFIX', d) for d in ['share', 'include']])
env.Clean('resources', resources)

# Set default targets
Default('shared_kernel')
if GetOption('ios') == 'none':
	Default('cli', 'Tests')
	if CheckSWIG():
		Default('sml_python', 'sml_java')
