//------------------------------------------------------------------------------
// MazeSimulatorTypes.cs
//
//     This code was generated by the DssNewService tool.
//
//
// TT Oct-2006 -
// Change from 9 colors to 16 using the standard colors in a
// 16-color BMP file.
//
// TT Dec-2006 -
// Added RobotType
// 
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using Microsoft.Dss.Core.Attributes;
using W3C.Soap;
using soarmazesimulator = Robotics.SoarMazeSimulator;

// Add this for saving state -- see the attribute on SoarMazeSimulatorState
// There should already be a reference to System.Xml
using System.Xml.Serialization;

// This is needed for the colors (Vector3)
using Microsoft.Robotics.PhysicalModel;

// TT Nov-2006 - Removed this.
// Not sure how it got in here anyway, but it won't compile.
//[assembly: ContractNamespace(soarmazesimulator.Contract.Identifier, ClrNamespace="Robotics.SoarMazeSimulator")]

namespace Robotics.SoarMazeSimulator
{
    
    public sealed class Contract
    {
        public const string Identifier = "http://schemas.tempuri.org/2008/03/soarmazesimulator.html";
        /// Prevent this class from being instantiated
        private Contract()
        {
        }
    }

    // This is the State for the service
    [DataContract()]
    [XmlType(Namespace = Contract.Identifier)]
    [XmlRoot("State", Namespace = Contract.Identifier)]
    public class SoarMazeSimulatorState
    {
        // TT Feb-2007 - Updated because it was forcing the Maze to be
        // the one specified below. Same for the GroundTexture.
        [DataMember]
        public string Maze;

        [DataMember]
        public string GroundTexture;

        // Wall Textures
        //
        // This table of filenames maps the Basic Colors to textures
        // that can be used. A set of files with solid colors are
        // provided, but you can actually use any image file you like.
        // However, you will only see the basic color from the file
        // on the boxes. Not sure why. Probably need stretching.
        //
        // Note that Lime is full green, whereas Green is dark green.
        // Otherwise the color names are what you would expect.
        //
        // IMPORTANT NOTE: All of these files MUST be in the
        // store/media/QUT_Textures directory under your MSRS
        // installation! Otherwise your walls will disappear!
        // Also, there must be SIXTEEN (16) files in the list.
        // The code does not do any bounds checking!
        // However, you can put an empty string in as an entry,
        // in which case the color will be used instead.
        //
        [DataMember]
        public string[] WallTextures =
        {
            "SolidBlack.bmp",
            "SolidRed.bmp",
            "SolidLime.bmp",
            "SolidYellow.bmp",
            "SolidBlue.bmp",
            "SolidMagenta.bmp",
            "SolidCyan.bmp",
            "SolidWhite.bmp",
            "SolidDarkGrey.bmp",
            "SolidMaroon.bmp",
            "SolidGreen.bmp",
            "SolidOlive.bmp",
            "SolidNavy.bmp",
            "SolidPurple.bmp",
            "SolidCobalt.bmp",
            "SolidGrey.bmp"
        };

        // Wall Colors
        // These are specified using the Vector3 format for colors
        // The values below correspond to the bmp files above

        static public readonly Vector3[] DefaultColors =
        {
            new Vector3(  0,   0,   0),
            new Vector3(255,   0,   0),
            new Vector3(  0, 255,   0),
            new Vector3(255, 255,   0),
            new Vector3(  0,   0, 255),
            new Vector3(255,   0, 255),
            new Vector3(  0, 255, 255),
            new Vector3(255, 255, 255),
            new Vector3(128, 128, 128),
            new Vector3(128,   0,   0),
            new Vector3(  0, 128,   0),
            new Vector3(128, 128,   0),
            new Vector3(  0,   0, 128),
            new Vector3(128,   0, 128),
            new Vector3(  0, 128, 128),
            new Vector3(192, 192, 192)
        };

        [DataMember]
        public Vector3[] WallColors;

        // Mapping of Colors to Heights
        //
        // NOTE: There should be an element in the array here for
        // every value in the BasicColor enum!
        // Also, the background color will ALWAYS be ignored
        // regardless of its height.
        // And finally, there is no reason why a height has to be big.
        // For example, 0.000001f is not zero, so it will still be
        // used to generate boxes. With an appropriate texture, it
        // could be a pool of water (rectangular though), or some
        // other material on the floor.
        //
        [DataMember]
        public float[] HeightMap =
            {
                3.0f,
                5.0f,
                10.0f,
                8.0f,
                10.0f,
                15.0f,
                15.0f,
                20.0f,
                0.0f,
                5.0f,
                5.0f,
                5.0f,
                5.0f,
                5.0f,
                5.0f,
                5.0f,
            };

        // Mapping of Colors to Weights (Mass)
        //
        // NOTE:
        // For walls, you should specify a mass of zero. This really
        // means infinite, so the walls cannot be moved.
        //
        [DataMember]
        public float[] MassMap =
            {
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
                0.0f,
            };

        [DataMember]
        public bool[] UseSphere =
            {
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            };

        //Maze Parameters
        [DataMember]
        public float WallBoxSize = 0.98f;   // size of the wall cubes (meters)
        // Grid size for bitmaps, i.e. one pixel = GridSpacing
        [DataMember]
        public float GridSpacing = 0.1f;    // Maze grid size (meters)

        // Scale factor applied to heights
        [DataMember]
        public float HeightScale = 0.1f;
        [DataMember]
        public float DefaultHeight = 10.0f;
        // Scale factor applied to spheres
        [DataMember]
        public float SphereScale = 0.1f;

        // These are the coordinates of the center of the robot
        // Robot could end up inside a wall!
        // So assume that the center (or top left if not centered) is free
        // We could be smarter about this and look in the grid first,
        // but you have to recompile for the slightest little change
        // so who cares?
        [DataMember]
        public int RobotStartCellRow = 0;
        [DataMember]
        public int RobotStartCellCol = 0;

        // TT Dec-2006 - Allow selection of the robot type via a setting
        // in the config file. There are only two at the moment:
        // Pioneer3DX
        // LegoNXT
        // However, the infrastructure is now in place to select others
        // if they are added to the simulator.
        [DataMember]
        public string RobotType;

        // Constructor for the State
        public SoarMazeSimulatorState()
        {
            int i;
            // Initialize the wall colors
            WallColors = new Vector3[16];
            for (i=0; i<16; i++)
                WallColors[i] = new Vector3(DefaultColors[i].X,
                                        DefaultColors[i].Y,
                                        DefaultColors[i].Z);

            // TT Dec-2006 - Added default value
            RobotType = "Pioneer3DX";
        }
    }

    public class SoarMazeSimulatorOperations : PortSet<DsspDefaultLookup, DsspDefaultDrop, Get, Replace>
//        ImageUpdate>
    {
    }
    public class Get : Get<GetRequestType, PortSet<SoarMazeSimulatorState, Fault>>
    {
    }
    public class Replace : Replace<SoarMazeSimulatorState, PortSet<DefaultReplaceResponseType, Fault>>
    {
    }

/*
    public class ImageUpdate : Update<ImageUpdateRequest, PortSet<DefaultUpdateResponseType, Fault>>
    {
        public ImageUpdate(ImageUpdateRequest body)
            : base(body)
        { }

        public ImageUpdate()
        { }
    }


    [DataContract]
    public class ImageUpdateRequest
    {
        private DateTime _timeStamp;

        [DataMember]
        public DateTime TimeStamp
        {
            get { return _timeStamp; }
            set { _timeStamp = value; }
        }

        public ImageUpdateRequest(DateTime timeStamp)
        {
            TimeStamp = timeStamp;
        }

        public ImageUpdateRequest()
        { }
    }
*/
}
