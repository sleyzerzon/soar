//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using constructor = Microsoft.Dss.Services.Constructor;
using contractmanager = Microsoft.Dss.Services.ContractManager;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using io = System.IO;
using pxsimpledashboard = Microsoft.Robotics.Services.SimpleDashboard.Proxy;
using reflection = System.Reflection;


namespace Microsoft.Robotics.Services.SimpleDashboard.Proxy
{
    
    
    /// <summary>
    /// SimpleDashboard Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public sealed class Contract
    {
        
        /// The Unique Contract Identifier for the SimpleDashboard service
        public const String Identifier = "http://schemas.microsoft.com/robotics/2006/01/simpledashboard.html";
        
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            contractmanager.ServiceSummaryLoader loader = new contractmanager.ServiceSummaryLoader();
            return loader.GetServiceSummaries(typeof(Contract).Assembly);

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <param name="partners">Optional list of service partners for new service instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort, params PartnerType[] partners)
        {
            DsspResponsePort<CreateResponse> result = new DsspResponsePort<CreateResponse>();
            ServiceInfoType si = new ServiceInfoType(Contract.Identifier, null);
            if (partners != null)
            {
                si.PartnerList = new List<PartnerType>(partners);
            }
            Microsoft.Dss.Services.Constructor.Create create =
                new Microsoft.Dss.Services.Constructor.Create(si, result);
            contructorServicePort.Post(create);
            return result;

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort)
        {
            return Contract.CreateService(contructorServicePort, null);
        }
    }
    
    /// <summary>
    /// Simple Dashboard State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("SimpleDashboardState", Namespace="http://schemas.microsoft.com/robotics/2006/01/simpledashboard.html")]
    public class SimpleDashboardState : ICloneable, IDssSerializable
    {
        
        private Boolean _log;
        
        private String _logFile;
        
        /// <summary>
        /// Log
        /// </summary>
        [DataMember()]
        [Description("Specifies whether to log messages.")]
        public Boolean Log
        {
            get
            {
                return this._log;
            }
            set
            {
                this._log = value;
            }
        }
        
        /// <summary>
        /// Log File
        /// </summary>
        [DataMember()]
        [Description("Specifies the filename to log the data to.")]
        public String LogFile
        {
            get
            {
                return this._logFile;
            }
            set
            {
                this._logFile = value;
            }
        }
        
        /// <summary>
        /// Copy To Simple Dashboard State
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            SimpleDashboardState typedTarget = target as SimpleDashboardState;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.Log = this.Log;
            typedTarget.LogFile = this.LogFile;
        }
        
        /// <summary>
        /// Clone Simple Dashboard State
        /// </summary>
        public virtual object Clone()
        {
            SimpleDashboardState target = new SimpleDashboardState();

            target.Log = this.Log;
            target.LogFile = this.LogFile;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            writer.Write(Log);

            if (LogFile == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                writer.Write(LogFile);
            }

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            Log = reader.ReadBoolean();

            if (reader.ReadByte() == 0) {}
            else
            {
                LogFile = reader.ReadString();
            } //nullable

            return this;

        }
    }
    
    /// <summary>
    /// Simple Dashboard Operations
    /// </summary>
    [ServicePort()]
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class SimpleDashboardOperations : PortSet<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, Get, Replace>
    {
        
        /// <summary>
        /// Required Lookup request body type
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup()
        {
            Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Lookup and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// A request to drop the service.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Drop and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop(Microsoft.Dss.ServiceModel.Dssp.DropRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Required Get body type
        /// </summary>
        public virtual PortSet<SimpleDashboardState,Fault> Get()
        {
            Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            Get op = new Get(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Get and return the response port.
        /// </summary>
        public virtual PortSet<SimpleDashboardState,Fault> Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Simple Dashboard State
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,Fault> Replace()
        {
            SimpleDashboardState body = new SimpleDashboardState();
            Replace op = new Replace(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Replace and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,Fault> Replace(SimpleDashboardState body)
        {
            Replace op = new Replace();
            op.Body = body ?? new SimpleDashboardState();
            this.Post(op);
            return op.ResponsePort;

        }
    }
    
    /// <summary>
    /// Gets the current state of the service.
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [Description("Gets the current state of the service.")]
    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<Microsoft.Dss.ServiceModel.Dssp.GetRequestType, PortSet<SimpleDashboardState, Fault>>
    {
        
        /// <summary>
        /// Gets the current state of the service.
        /// </summary>
        public Get()
        {
        }
        
        /// <summary>
        /// Gets the current state of the service.
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Gets the current state of the service.
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<SimpleDashboardState,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Changes (or indicates a change to) the entire state of the service.
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    [Description("Changes (or indicates a change to) the entire state of the service.")]
    public class Replace : Microsoft.Dss.ServiceModel.Dssp.Replace<SimpleDashboardState, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, Fault>>
    {
        
        /// <summary>
        /// Changes (or indicates a change to) the entire state of the service.
        /// </summary>
        public Replace()
        {
        }
        
        /// <summary>
        /// Changes (or indicates a change to) the entire state of the service.
        /// </summary>
        public Replace(SimpleDashboardState body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Changes (or indicates a change to) the entire state of the service.
        /// </summary>
        public Replace(SimpleDashboardState body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
