#!/usr/bin/python
# Project: Soar <http://soar.googlecode.com>
# Author: Jonathan Voigt <voigtjr@gmail.com>
#
import os
import sys
import string
import re
import shutil
import urllib
import hashlib
import subprocess

# swt.jar 3.5 digests
OSX_DIGEST = 'a3251234739ab7aa887dd8a3f5b9340b'
OSX64_DIGEST = '5e49b61aae40258ed2883cee659bcba4'
GTK_DIGEST = '12306068dbc3477f883bd7835a687cb5'
GTK64_DIGEST = '1eb148aedd135754ed179782cfefd700'

def CheckJarmd5(jarpath):
        # open the swt.jar file
        try:
                f = file(jarpath)
        except:
                return False

        # compute digest
        m = hashlib.md5()
        while True:
            d = f.read(8096)
            if not d:
                break
            m.update(d)

        if sys.platform == 'darwin':
                if GetOption('platform') == '64':
                        return OSX64_DIGEST == m.hexdigest()
                else:
                        return OSX_DIGEST == m.hexdigest()
        else:
                if GetOption('platform') == '64':
                        return GTK64_DIGEST == m.hexdigest()
                else:
                        return GTK_DIGEST == m.hexdigest()

jarpath = os.path.join('SMLJava', 'lib', 'swt.jar')
def CheckForSWTJar():
        if os.path.exists(jarpath):
                if CheckJarmd5(jarpath):
                        return True
                else:
                        print "md5 of swt.jar failed, removing old jar."
                        os.remove(jarpath)

        try:
                if sys.platform == 'darwin':
                        if GetOption('platform') == '64':
                                urllib.urlretrieve('http://ai.eecs.umich.edu/~soar/sitemaker/misc/jars/osx64/swt.jar', jarpath)
                        else:
                                urllib.urlretrieve('http://ai.eecs.umich.edu/~soar/sitemaker/misc/jars/osx/swt.jar', jarpath)
                else:
                        if GetOption('platform') == '64':
                                urllib.urlretrieve('http://ai.eecs.umich.edu/~soar/sitemaker/misc/jars/gtk64/swt.jar', jarpath)
                        else:
                                urllib.urlretrieve('http://ai.eecs.umich.edu/~soar/sitemaker/misc/jars/gtk32/swt.jar', jarpath)
        except IOError:
                print "Error downloading %s: IOError" % jarpath
                return False
        except ContentTooShortError:
                print "Error downloading %s: IOError" % jarpath
                return False

        if not CheckJarmd5(jarpath):
                print "Error downloading %s, md5 failed again." % jarpath
                return False

        print "Successfully downloaded", jarpath
        return True

# This checks for the swt.jar and attempts to download it if it doesn't exist
if not CheckForSWTJar():
	print "Could not find swt.jar. You can obtain the jar here:"
	print "\thttp://ai.eecs.umich.edu/~soar/sitemaker/misc/jars"
	print "Place swt.jar in SoarLibrary/bin"
	print "swt.jar required for Soar Java debugger... Exiting"
	Exit(1)

# Use helper function, see SConstruct: def javaRunAnt
Import('javaRunAnt')
javaRunAnt('Java', 
	['soar-smljava','soar-debugger','soar-visualsoar'], 
	['SMLJava/src','Debugger/src','VisualSoar/src'])


Import('env')
env.Install('$PREFIX/share/java', jarpath)

