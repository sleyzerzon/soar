#!/usr/bin/python
# Project: Soar <http://soar.googlecode.com>
# Author: Jonathan Voigt <voigtjr@gmail.com>
#
import os
import SCons.Script
import sys

Import('swigenv')

conf = Configure(swigenv)
	
# ConfigureJNI and tolen from http://www.scons.org/wiki/JavaNativeInterface
# Modified from its original format
def walkDirs(path):
    """helper function to get a list of all subdirectories"""
    def addDirs(pathlist, dirname, names):
        """internal function to pass to os.path.walk"""
        for n in names:
            f = os.path.join(dirname, n)
            if os.path.isdir(f):
                pathlist.append(f)
    pathlist = [path]
    os.path.walk(path, addDirs, pathlist)
    return pathlist

def ConfigureJNI(env):
    """Configure the given environment for compiling Java Native Interface
       c or c++ language files."""

    #if not env.get('JAVAC'):
    #    print "The Java compiler must be installed and in the current path."
    #    return 0

    # first look for a shell variable called JAVA_HOME
    java_base = os.environ.get('JAVA_HOME')
    if not java_base:
        if sys.platform == 'darwin':
            # Apple's OS X has its own special java base directory
            java_base = '/System/Library/Frameworks/JavaVM.framework'
        else:
            # Search for the java compiler
            print "JAVA_HOME environment variable is not set. Searching for java... ",
            jcdir = os.path.dirname(env.WhereIs('javac'))
            if not jcdir:
                print "not found."
                return 0
            # assuming the compiler found is in some directory like
            # /usr/jdkX.X/bin/javac, java's home directory is /usr/jdkX.X
            java_base = os.path.join(jcdir, "..")
            print "found:", java_base

    if sys.platform == 'darwin':
        # Apple does not use Sun's naming convention
        java_headers = [os.path.join(java_base, 'include')]
        java_libs = [os.path.join(java_base, 'lib')]
    else:
        # windows and linux
        java_headers = [os.path.join(java_base, 'include')]
        java_libs = [os.path.join(java_base, 'lib')]
        # Sun's windows and linux JDKs keep system-specific header
        # files in a sub-directory of include
        if java_base == '/usr' or java_base == '/usr/local':
            # too many possible subdirectories. Just use defaults
            java_headers.append(os.path.join(java_headers[0], 'win32'))
            java_headers.append(os.path.join(java_headers[0], 'linux'))
            java_headers.append(os.path.join(java_headers[0], 'solaris'))
        else:
            # add all subdirs of 'include'. The system specific headers
            # should be in there somewhere
            java_headers = walkDirs(java_headers[0])

    # add Java's include and lib directory to the environment
    env.Append(CPPPATH = java_headers)
    env.Append(LIBPATH = java_libs)
    return 1

def JavaSources(dir):
        sources = list()
        for root, dirs, files in os.walk(dir):
                for f in files:
                        sources.append(os.path.join(root, f))
                if '.svn' in dirs:
                        dirs.remove('.svn')
        return sources

# This sets up the jni include files
if not ConfigureJNI(conf.env):
	print "Could not configure Java. If you know where java is on your system,"
	print "set environment variable JAVA_HOME to point to the directory containing"
	print "the Java include, bin, and lib directories."
	print "You may disable java, see help (scons -h)"
	print "Java Native Interface is required... Exiting"
	Exit(1)

def determine_flags(env):
	# Remove some optimizations
	if env['CPPFLAGS'].find('fvisibility') >= 0:
		return ' -Wno-unused -fno-strict-aliasing -fvisibility=default'
	return ' -Wno-unused -fno-strict-aliasing'

def determine_shlib_target(env):
	# Things a bit different on Mac
	if sys.platform == 'darwin':
		env.Append(SHLINKFLAGS = ' -framework JavaVM')
		#env['SHLIBSUFFIX'] = '.jnilib'
		return 'libJava_sml_ClientInterface.jnilib'
	return 'Java_sml_ClientInterface'

# Modify environment for compilation
conf.env.Prepend(CPPPATH = ['#ClientSML/src', '#ElementXML/src', '#ConnectionSML/src', ])
conf.env.Append(CPPFLAGS = determine_flags(conf.env))
conf.env.Append(LIBS = ['ClientSML', 'ConnectionSML', 'ElementXML', ])
conf.env.Append(LIBPATH = '$PREFIX/lib')

swigenv = conf.Finish()
#################

# Some of the dependencies:
# sml.jar
#   src/sml/*.java
#     Java_sml_ClientInterface_wrap.cpp
#       mkdir src/sml
#       Java_sml_ClientInterface.i
#   libJava_sml_ClientInterface.so
#     Java_sml_ClientInterface_wrap.cpp
#       mkdir src/sml
#       Java_sml_ClientInterface.i

# Define targets and sources
javasml_i = '#ClientSMLSWIG/Java/Java_sml_ClientInterface.i'
javasml_wrap = '#ClientSMLSWIG/Java/Java_sml_ClientInterface_wrap.cpp'
javasource = '#ClientSMLSWIG/Java/src/sml/*.java'
javasml_shlib = determine_shlib_target(swigenv)
javajar = swigenv['PREFIX'] + '/share/java/sml.jar'
javabuild = '#ClientSMLSWIG/Java/build.xml'

# Custom scanner for internal dependencies:
SWIGScanner = SCons.Scanner.ClassicCPP("SWIGScan",".i","CPPPATH",'^[ \t]*[%,#][ \t]*(?:include|import)[ \t]*(<|")([^>"]+)(>|")')
swigenv.Append(SCANNERS=[SWIGScanner])

# Make src/sml dir and wrap
swigenv.Command(javasml_wrap, javasml_i, [ 
	Mkdir('ClientSMLSWIG/Java/src'),
	Mkdir('ClientSMLSWIG/Java/src/sml'),
	'swig -o ClientSMLSWIG/Java/Java_sml_ClientInterface_wrap.cpp -c++ -java -Wall -package sml -IClientSML/src -IElementXML/src -IConnectionSML/src -outdir ClientSMLSWIG/Java/src/sml ClientSMLSWIG/Java/Java_sml_ClientInterface.i'])

# Side effect: previous command produces src/*.java files (the SML Java interface)
swigenv.SideEffect(javasource, javasml_wrap)

# Create shared library
shlib = swigenv.SharedLibrary(javasml_shlib, javasml_wrap)
swigenv.Install('$PREFIX/lib', shlib)

# Note build.xml dependency
Depends(javajar, javabuild)

# Create jar
swigenv.Command(javajar, javasource,
	'ant -Dsoarbuild=$BUILD_DIR/ClientSMLSWIG/Java/build -Dsoarprefix=$PREFIX -q', 
	chdir='ClientSMLSWIG/Java')

# Clean java stuff
if swigenv.GetOption('clean'):
	for x in BUILD_TARGETS:
		targetpath = os.path.realpath(str(x))
		if javajar.startswith(targetpath):
			homedir = swigenv.Dir('#ClientSMLSWIG/Java')
			swigenv.Execute('ant -Dsoarbuild=$BUILD_DIR/ClientSMLSWIG/Java/build -Dsoarprefix=$PREFIX -q clean', chdir=homedir)

