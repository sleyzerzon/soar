##########################################################
controller
{
	productions = "../../book-robot/clean-house-new.soar";
}

##########################################################
metadata 
{
	areas = [ a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 ];
	a1 
	{	# pos 2,2 size 18,59
		name = "main room left"; 
		pos = [ -1.35, -1.5 ];
		size = [ 2.7, 8.85 ];
	}
	a2 
	{	# pos 24,2 size 56,34
		name = "center top";
		pos = [ 1.95, 2.25 ];
		size = [ 8.4, 5.1 ];
	}
	a3 
	{	# pos 82,2 size 16,76
		name = "right";
		pos = [ 10.65, -4.05 ];
		size = [ 2.4, 11.4 ];
	}
	a4
	{	# pos 80,11 size 2,11
		name = "2 to 3";
		door = true;
		pos = [ 10.35, 4.35 ];
		size = [ 0.3, 1.65 ];
	}
	a5
	{	# pos 20,12 size 4,13
		name = "1 to 2";
		door = true;
		pos = [ 1.35, 3.9 ];
		size = [ 0.6, 1.95 ];
	}
	a6
	{	# pos 24,42 size 54,36
		name = "center bottom";
		pos = [ 1.95, -4.05 ];
		size = [ 8.1, 5.4 ];
	}
	a7
	{	# pos 20,45 size 4,10
		name = "1 to 6";
		door = true;
		pos = [ 1.35, -0.6 ];
		size = [ 0.6, 1.5 ];
	}
	a8
	{	# pos 78,49 size 4,12
		name = "6 to 3";
		door = true;
		pos = [ 10.05, -1.5 ];
		size = [ 0.6, 1.8 ];
	}
	a9
	{	# pos 7,61 size 7,4
		name = "1 to 10";
		door = true;
		pos = [ -0.6, -2.1 ];
		size = [ 1.05, 0.6 ];
	}
	a10
	{	# pos 2,65 size 18,13
		name = "small left";
		pos = [ -1.35, -4.05 ];
		size = [ 2.7, 1.95 ];
	}
	
	gateways = [ g1, g2, g3, g4, g5, g6, g7, g8, g9, g10 ];
	g1 
	{	# pos 20,18 to 1,5
		to = [ a1, a5 ];
		dir = [ east, west];
		pos = [ 1.35, 4.95 ];
	}
	g2 
	{	# pos 23,18 to 5,2
		to = [ a5, a2 ];
		dir = [ east, west];
		pos = [ 1.8, 4.95 ];
	}
	g3 
	{	# pos 80,16 to 2,4
		to = [ a2, a4 ];
		dir = [ east, west];
		pos = [ 10.35, 5.25 ];
	}
	g4 
	{	# pos 81,16 to 4,3
		to = [ a4, a3 ];
		dir = [ east, west];
		pos = [ 10.5, 5.25 ];
	}
	g5
	{	# pos 20,49 to 1,7
		to = [ a1, a7 ];
		dir = [ east, west];
		pos = [ 1.35, 0.3 ];
	}
	g6
	{	# pos 23,49 to 7,6
		to = [ a7, a6 ];
		dir = [ east, west];
		pos = [ 1.8, 0.3 ];
	}
	g7
	{	# pos 78,54 to 6,8
		to = [ a6, a8 ];
		dir = [ east, west];
		pos = [ 10.05, -0.45 ];
	}
	g8
	{	# pos 81,54 to 8,3
		to = [ a8, a3 ];
		dir = [ east, west];
		pos = [ 10.5, -0.45 ];
	}
	g9
	{	# pos 10,61 to 1,9
		to = [ a1, a9 ];
		dir = [ south, north];
		pos = [ -0.15, -1.5 ];
	}
	g10
	{	# pos 10,64 to 9,10
		to = [ a9, a10 ];
		dir = [ south, north];
		pos = [ -0.15, -1.95 ];
	}
	
	objects = [ block1 ];
	block1
	{
		type = block;
		pos = [ -2.7, 6.0 ];
		size = [ 0.12, 0.12 ];
	}
}

##########################################################
viewer
{
    viewobjects = [ lidars, robot, remotelog, mapimage, waypoints, areas, obstacles ];

    robot {
        class = "april.viewer.ViewRobot";

        avatar {
            path = "config/meshmodels/cy.rwx";
            scale = 7;

            position = [ 0, 0, 0 ];
            rollpitchyaw_degrees = [ 90, 0, 90 ];
        }
    }

    remotelog {
        class = "april.viewer.RemoteLogEventHandler";
    }

    lidars {
        class = "april.viewer.ViewLaser";
    }

    lcmgl {
        class = "april.viewer.ViewLCMGL";
    }
    
    mapimage {
    	class = "april.viewer.ViewMapImage";
    	obstacles
	    {
    	    image_path = "five-rooms.jpg";
        	image_origin = [ 11,51 ];
	        meters_per_pixel = 0.15;
    	}
	}

    waypoints {
        class = "april.viewer.ViewWaypoints";
    }
    
    areas {
        class = "april.viewer.ViewAreaDescriptions";
    }
    
    obstacles {
    	class = "april.viewer.ViewObstacles";
	}    
}

##########################################################
# Simulator has two required sections: obstacles and simobjects. All
# other parameters are "discovered" through the simobjects reflection
# mechanism.
simulator
{
    obstacles
    {
        image_path = "five-rooms.jpg";
        image_origin = [ 11,51 ];
        meters_per_pixel = 0.15;
    }

    # Generic simulation instantiation: add a configuration block to
    # the list of "sims", then define the parameters in the
    # corresponding block. The block must have an entry named "class",
    # which specifies the java class that will be created and passed
    # the remainder of the arguments.
    simobjects = [ simsplinter, LIDAR_FRONT ];

    simsplinter
    {
        class = "april.sim.SimSplinter";
    }

    # Use an anonymous enclosure so we can inherit laser properties
    # amongst all lidars.  Individual lidars should be named according
    # to the LCM channel they publish on, and so that the extrinsics
    # can be found in the global scope.
    {
        class = "april.sim.SimLaser";

        degree0 = -90;
        degree_step = 1;
        nranges = 180;
        range_noise_m = 0.01;
        theta_noise_degrees = 0.25;
        max_range_m = 30;
        hz = 7;

        LIDAR_FRONT
        {
            # no additional parameters to specify!
        }
    }
}

##########################################################

# the robot's coordinate frame has the vehicle at the origin, looking
# down the X axis, with +Y = left and +Z = up.
LIDAR_FRONT {
    position = [ 0, 0, 0.5 ];
    rollpitchyaw_degrees = [ 0, 0, 0 ];
    color = [1, 0, 0];
}

# the robot's coordinate frame has the vehicle at the origin, looking
# down the X axis, with +Y = left and +Z = up.
LIDAR_LOWRES {
    position = [ 0, 0, 0.5 ];
    rollpitchyaw_degrees = [ 0, 0, 0 ];
    color = [0, 1, 0];
}
