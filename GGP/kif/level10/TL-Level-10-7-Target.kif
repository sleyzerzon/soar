;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Wargame Template (August 2007)
;;;  - Matthew Molineaux (adapted from files provided by SLG & U.Michigan)
;;;  - Uses built-in math functions
;;;  - TL Level 10, Scenario 7, Target task
;;;  - 8/16: Released 
;;;  - 8/17: Revised to add wall between 7,3 and 8,3; this prevents an
;;;          accidental pacifist solution. 
;;;  - Requires the soldier to heal, and shoot, in that order, before exiting.
;;; Debugger: "http://games.stanford.edu:5999/director/debugrawgame?"
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Verified solution (length 13): EEEENNNN<heal>E<shoot n>NN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Map (and Legend)
;                        
;    1 2 3 4 5 6 7 8     
;   +---------------+    + = Corner
;  1|. . . . . .|T .|    . = A room location
;   |           +-+ |    - = Horizontal wall
;  2|. . . . . . .|F|    | = Vertical wall
;   |           +-+ |
;  3|. . . . . .|M|.|    @ = Soldier
;   |           |   |    T = Terrorist
;  4|. . . . . .|. G|    F = Flag (exit)
;   |   +-------+   |    G = Gun
;  5|. .|. . . . . .|    R = gRenade
;   |   |           |    M = Medical kit
;  6|. .|@ . . . . .|    
;   +---------------+    
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ROLE Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(role soldier)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; INIT (and some type) Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;; Specifies where objects start on board, where lower left is (1,1).
;;; Object locations
(init (location soldier 3 6))
(init (location terrorist1 7 1))
(init (location medKit1 7 3))
(init (location gun1 8 4))
(init (location exit 8 2))
(init (location flag 8 2))

;; Dynamic type hierarchies
(type medKit1 item)  
(type medKit1 healingItem)
(type gun1 item)  
(type gun1 losItem)
(type terrorist1 animate)
(type terrorist1 terrorist)
(type terrorist1 horizontalTerrorist)

;;; Character health
(init (health terrorist1 1))

;;; Unless otherwise specified adjacent spatial coordinates are assumed 
;;;  accessible from one another.  
;;Outer walls

(init (blocked west 1 1))
(init (blocked west 1 2))
(init (blocked west 1 3))
(init (blocked west 1 4))
(init (blocked west 1 5))
(init (blocked west 1 6))

(init (blocked east 8 1))
(init (blocked east 8 2))
(init (blocked east 8 3))
(init (blocked east 8 4))
(init (blocked east 8 5))
(init (blocked east 8 6))

(init (blocked north 1 1))
(init (blocked north 2 1))
(init (blocked north 3 1))
(init (blocked north 4 1))
(init (blocked north 5 1))
(init (blocked north 6 1))
(init (blocked north 7 1))
(init (blocked north 8 1))

(init (blocked south 1 6))
(init (blocked south 2 6))
(init (blocked south 3 6))
(init (blocked south 4 6))
(init (blocked south 5 6))
(init (blocked south 6 6))
(init (blocked south 7 6))
(init (blocked south 8 6))

;Inner walls
(init (blocked east 2 5))
(init (blocked east 2 6))
(init (blocked east 6 1))
(init (blocked east 6 3))
(init (blocked east 6 4))
(init (blocked east 7 2))
(init (blocked east 7 3))

(init (blocked west 3 5))
(init (blocked west 3 6))
(init (blocked west 7 1))
(init (blocked west 7 3))
(init (blocked west 7 4))
(init (blocked west 8 2))
(init (blocked west 8 3))

(init (blocked south 7 1))
(init (blocked south 7 2))
(init (blocked south 3 4))
(init (blocked south 4 4))
(init (blocked south 5 4))
(init (blocked south 6 4))

(init (blocked north 7 2))
(init (blocked north 7 3))
(init (blocked north 3 5))
(init (blocked north 4 5))
(init (blocked north 5 5))
(init (blocked north 6 5))
;; Soldier health
(init (health soldier 1)) ; >>>>>New! Lower!<<<<<
;;;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
; MCM 8/14/07: Blocked is now directly represented in state.
; SW 8/3/07: need these to have consistent spatial rep. with the other domains
; Note that south and north are reversed compared to rogue/escape.

;; Soldier health
;;; (init (health soldier 1))  ; >>>>>Deleted<<<<<

;; Static type hierarchy
(type flag item)
(type exit item)

;;; The global time clock.	
(init (time 1))
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; LEGAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; It is always legal for the soldier to stand still.

(<= (legal soldier noop))

;;; The soldier may step in any of the cardinal directions so long as a wall 
;;;  does not block the way.

(<= (legal soldier (move ?dir))
    (true (location soldier ?x ?y))
	(direction ?dir)
    (not (stepBlocked ?dir ?x ?y))
    (nStepsSoldier 1 ?dir ?x ?y ?xAny ?yAny))

;;; The soldier may heal himself if he is holding a healing type item.

(<= (legal soldier heal)
    (true (holding soldier ?item))
    (type ?item healingItem))

;;; The soldier may shoot in any of the cardinal directions if he is holding
;;;  a line-of-sight type weapon.

(<= (legal soldier (shoot ?dir))
    (true (holding soldier ?item))
    (type ?item losItem)
    (direction ?dir))

;;; The soldier may throw in any of the cardinal directions if he is holding
;;;  a area-of-effect type item.

(<= (legal soldier (throw ?dir ?dist))
    (true (holding soldier ?item))
    (type ?item aoeItem)
    (legalThrowDist ?dist)
    (true (location soldier ?x ?y))
    (nStepsSoldier ?dist ?dir ?x ?y ?xAny ?yAny))
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; NEXT Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; MCM: blockedSouth and blockedEast are now removed, replaced by only blocked
;;; in the state.
(<= (next (blocked ?dir ?x ?y))
    (true (blocked ?dir ?x ?y)))


;;; Also here for stylesheet convenience.  True of any cell that the soldier
;;;  attacks.

; (<= (next (blastZone ?x ?y)) ; >>>>>Deleted<<<<<
;     (attacks ?x ?y soldier)) ; >>>>>Deleted<<<<<
	
;;; Location for animate-type objects is updated by the intendedLocation axiom.
	
(<= (next (location ?character ?x ?y))
    (type ?character animate)
    (intendedLocation ?character ?x ?y))

; SW 8/3/07
(<= (next (location soldier ?x ?y))
    (intendedSoldierLocation ?x ?y))

;;; Item-type objects remain where they are until the soldier walks on top of
;;;  them.

; Soar change: splitting to two cases, so we don't need distinctCell.
(<= (next (location ?object ?xO ?yO))
    (type ?object item)
    (true (location ?object ?xO ?yO))
    (intendedSoldierLocation ?xE ?yE)
    (distinct ?xE ?xO))
    ;(distinctCell ?xE ?yE ?xO ?yO))

(<= (next (location ?object ?xO ?yO))
    (type ?object item)
    (true (location ?object ?xO ?yO))
    (intendedSoldierLocation ?xE ?yE)
    (distinct ?yE ?yO))

;;; Should the soldier walk on top of an item-type object, it will move into his
;;;  inventory where it will remain until it is used.

(<= (next (holding soldier ?object))
    (type ?object item)
    (true (location ?object ?xO ?yO))
    (intendedSoldierLocation ?xO ?yO)) ; Soar change: this is much more efficient
   ; (intendedSoldierLocation ?xE ?yE)
   ; (not (distinctCell ?xE ?yE ?xO ?yO)))
(<= (next (holding soldier ?item))
    (true (holding soldier ?item))
    (not (uses soldier ?item)))

;;; Character health is modified based on how much it is 
;;;  [incremented,decremented] per step.

(<= (next (health ?character ?h2))
    (true (health ?character ?h1))
    (healthIncrement ?character ?hInc)
    (healthDecrement ?character ?hDec)
    (- ?hInc ?hDec ?deltaH)
    (+ ?h1 ?deltaH ?h2))
	
;;; Time ticks one second per step.	
	
(<= (next (time ?tNext))
    (true (time ?tCurrent))
    (+ ?tCurrent 1 ?tNext))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; TERMINAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; The game is over if time runs out, the soldier has his health reduced to
;;;  zero, or places the flag in his inventory.

(<= terminal
    timeOut)
(<= terminal
    (dead soldier))
(<= terminal
    (true (holding soldier flag)))
 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; GOAL Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Goals are computed according to the following table:
;;;
;;; Dead? TimeOut? HasFlag? Goal
;;; ----------------------------
;;;    0        0        0     0   
;;;    0        0        1   100
;;;    0        1        0    50 
;;;    0        1        1   100
;;;    1        0        0     0
;;;    1        0        1     0
;;;    1        1        0     0
;;;    1        1        1     0

(<= (goal soldier 0)
    (dead soldier))
(<= (goal soldier 0)
    (not timeOut)
    (not (dead soldier))
    (not (true (holding soldier flag))))

(<= (goal soldier 50)
    timeOut
    (not (dead soldier))
    (not (true (holding soldier flag))))

(<= (goal soldier 100)
    (not (dead soldier))
    (true (holding soldier flag)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; View Definitions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; A single step ?dir from cell (?x,?y) is blocked if a wall interupts that 
;;;  step.

(<= (stepBlocked ?dir ?x ?y)
    (true (blocked ?dir ?x ?y)))

;;; A path of an arbitrary number ?n steps ?dir from cell (?x, ?y) is blocked 
;;;  if a wall interupts any of the steps along that path.

; changed for Soar: split to four cases to ease matching
; also, these can be restricted to blocked from the soldiers location, to get rid of useless groundings
; in addition, there is no need to infer unless the soldier is shooting
(<= (pathBlocked west ?x ?y1 ?x ?y3)
    (does soldier (shoot ?dir))
    (true (location soldier ?x ?y1))
    (index ?n)
    (nStepsSoldier ?n west ?x ?y1 ?x ?y3)
    (index ?m)
    (> ?n ?m)
    (nStepsSoldier ?m west ?x ?y1 ?x ?y2)
    (stepBlocked west ?x ?y2))    

(<= (pathBlocked south ?x1 ?y ?x3 ?y)
    (does soldier (shoot ?dir))
    (true (location soldier ?x1 ?y))
    (index ?n)
    (nStepsSoldier ?n south ?x1 ?y ?x3 ?y)
    (index ?m)
    (> ?n ?m)
    (nStepsSoldier ?m south ?x1 ?y ?x2 ?y)
    (stepBlocked south ?x2 ?y))    
(<= (pathBlocked east ?x ?y1 ?x ?y3)
    (does soldier (shoot ?dir))
    (true (location soldier ?x ?y1))
    (index ?n)
    (nStepsSoldier ?n east ?x ?y1 ?x ?y3)
    (index ?m)
    (> ?n ?m)
    (nStepsSoldier ?m east ?x ?y1 ?x ?y2)
    (stepBlocked east ?x ?y2))    

(<= (pathBlocked north ?x1 ?y ?x3 ?y)
    (does soldier (shoot ?dir))
    (true (location soldier ?x1 ?y))
    (index ?n)
    (nStepsSoldier ?n north ?x1 ?y ?x3 ?y)
    (index ?m)
    (> ?n ?m)
    (nStepsSoldier ?m north ?x1 ?y ?x2 ?y)
    (stepBlocked north ?x2 ?y))    

;;; nSteps computes the cell found ?n steps ?dir of cell (?x,?y) within the
;;;  confines of an 8 x 8 grid.
; Soar: this is only used when ?n == 1 (since many cases are now nStepsSoldier), so we can get rid of all other groundings
(<= (nSteps 1 south ?x ?y1 ?x ?y2)
    (cell ?x ?y1)
    (+ ?y1 1 ?y2)
    (index ?y2))
(<= (nSteps 1 north ?x ?y1 ?x ?y2)	
    (cell ?x ?y1)
    (- ?y1 1 ?y2)
    (index ?y2))
(<= (nSteps 1 east ?x1 ?y ?x2 ?y)
    (cell ?x1 ?y)
    (+ ?x1 1 ?x2)
    (index ?x2))
(<= (nSteps 1 west ?x1 ?y ?x2 ?y)
    (cell ?x1 ?y)
    (- ?x1 1 ?x2)
    (index ?x2))

; for Soar: the soldier is commonly the first coords in an nStep match, this restricted version is easier to handle 
(<= (nStepsSoldier ?n south ?x ?y1 ?x ?y2)
    (index ?n) ; SW 8/3/07
    (true (location soldier ?x ?y1))
    (+ ?y1 ?n ?y2)
    (index ?y2))
(<= (nStepsSoldier ?n north ?x ?y1 ?x ?y2)
    (index ?n) ; SW 8/3/07
    (index ?x)
    (true (location soldier ?x ?y1))
    (- ?y1 ?n ?y2)
    (index ?y2))
(<= (nStepsSoldier ?n east ?x1 ?y ?x2 ?y)
    (index ?n) ; SW 8/3/07
    (index ?y)
    (true (location soldier ?x1 ?y))
    (+ ?x1 ?n ?x2)
    (index ?x2))
(<= (nStepsSoldier ?n west ?x1 ?y ?x2 ?y)
    (index ?n) ; SW 8/3/07
    (index ?y)
    (true (location soldier ?x1 ?y))
    (- ?x1 ?n ?x2)
    (index ?x2))

;;; Two cells are vertically related [south,north] of each other if the first is
;;;  [higher,lower] than the second.

(<= (verticalRelation ?terrorist south ?x1 ?y1 ?x2 ?y2)
    (cellNearTerrorist ?terrorist ?x2 ?y2) ; Soar
    (intendedSoldierLocation ?x1 ?y1) ; Soar
    (cell ?x1 ?y1)
    (cell ?x2 ?y2)
    (> ?y1 ?y2))
(<= (verticalRelation ?terrorist north ?x1 ?y1 ?x2 ?y2)
    (cellNearTerrorist ?terrorist ?x2 ?y2) ; Soar
    (intendedSoldierLocation ?x1 ?y1) ; Soar
    (cell ?x1 ?y1)
    (cell ?x2 ?y2)
    (> ?y2 ?y1))

;;; Two cells are horizontall related [east,west] of each other if the first is
;;;  [right,left] of the second.

(<= (horizontalRelation ?terrorist east ?x1 ?y1 ?x2 ?y2)
    (cellNearTerrorist ?terrorist ?x2 ?y2) ; Soar
    (intendedSoldierLocation ?x1 ?y1) ; Soar
    (cell ?x1 ?y1)
    (cell ?x2 ?y2)
    (> ?x1 ?x2))
(<= (horizontalRelation ?terrorist west ?x1 ?y1 ?x2 ?y2)
    (cellNearTerrorist ?terrorist ?x2 ?y2) ; Soar
    (intendedSoldierLocation ?x1 ?y1) ; Soar
    (cell ?x1 ?y1)
    (cell ?x2 ?y2)
    (> ?x2 ?x1))	
	
;;; Defines the legal distances that an object may be thrown (0, 1, or 2 cells)
	
; (<= (legalThrowDist 0)) ; >>>>>Deleted<<<<<
; (<= (legalThrowDist 1)) ; >>>>>Deleted<<<<<
(<= (legalThrowDist 2))

;;; Every item (with the exception of the flag) is used if the soldier performs
;;;  the action that it enables.

(<= (uses soldier ?item)
    (type ?item healingItem)
    (does soldier heal))
(<= (uses soldier ?item)
    (type ?item losItem)
    (does soldier (shoot ?dir)))
(<= (uses soldier ?item)
    (type ?item aoeItem)
    (does soldier (throw ?dir ?dist)))

;;; Cell (?x,?y) is attacked by the soldier if the soldier performs the shoot
;;;  action and that cell is within a line of sight ?dir of the soldier.

(<= (attacks ?x ?y soldier)
    (does soldier (shoot ?dir))
    (true (location soldier ?x ?y)))
(<= (attacks ?x2 ?y2 soldier)
    (does soldier (shoot ?dir))
    (true (location soldier ?x1 ?y1))
    (index ?n)
    (nStepsSoldier ?n ?dir ?x1 ?y1 ?x2 ?y2)
    (not (pathBlocked ?dir ?x1 ?y1 ?x2 ?y2)))
    
;;; Cell (?x,?y) is attacked by the soldier if the soldier performs the throw
;;;  action and that cell is within a one cell radius of where the item thrown
;;;  by the soldier lands.

(<= (attacks ?x2 ?y2 soldier)
    (does soldier (throw ?dir ?dist))
    (true (location soldier ?x1 ?y1))
    (nStepsSoldier ?dist ?dir ?x1 ?y1 ?x2 ?y2))
(<= (attacks ?x3 ?y3 soldier)
    (does soldier (throw ?dir ?dist))
    (true (location soldier ?x1 ?y1))
    (nStepsSoldier ?dist ?dir ?x1 ?y1 ?x2 ?y2)
    (nSteps 1 ?dirAny ?x2 ?y2 ?x3 ?y3))

;;; Any character of type terrorist attacks a cell (?x,?y) if that character
;;;  will be standing there at the beginning of the next time-step.

(<= (attacks ?x ?y ?terrorist)
    (type ?terrorist terrorist)
    (intendedLocation ?terrorist ?x ?y))

;;; A terrorist attacks a cell (?x,?y) if any character of type terrorist 
;;;  attacks that cell.

(<= (terroristAttacks ?x ?y)
    (type ?terrorist terrorist)
    (attacks ?x ?y ?terrorist))

;;; At the beginning of the next time-step the soldier will either be one step
;;;  away if he performed the step action, or in the same place if he performed
;;;  some other action.

(<= (intendedSoldierLocation ?x2 ?y2)
    (true (location soldier ?x1 ?y1))
    (does soldier (move ?dir)) ; Soar change: 'step' action needs to be 'move' for spatial assumptions  
    (nStepsSoldier 1 ?dir ?x1 ?y1 ?x2 ?y2))
(<= (intendedSoldierLocation ?x ?y)
    (true (location soldier ?x ?y))
    (not (does soldier (move south)))
    (not (does soldier (move north)))
    (not (does soldier (move east)))
    (not (does soldier (move west))))    

;;; A dead terrorist is incapacitated and will not move.

(<= (intendedLocation ?terrorist ?x ?y)
    (true (location ?terrorist ?x ?y))
    (type ?terrorist terrorist)
    (dead ?terrorist))
    
;;; A character of type [horizontal,vertical]-terrorist will perform two
;;; [horizontal,vertical] steps per turn.

(<= (intendedLocation ?terrorist ?x3 ?y3)      ; xMumNew, yMumNew
    (type ?terrorist horizontalTerrorist)
    (not (dead ?terrorist))
    (intendedSoldierLocation ?xS ?yS)         ; ?xExp, ?yExp
    (true (location ?terrorist ?x1 ?y1))       ; ?xMum, ?yMum
    (horizontalStep ?terrorist ?x1 ?y1 ?x2 ?y2 ?xS ?yS)   
    (horizontalStep ?terrorist ?x2 ?y2 ?x3 ?y3 ?xS ?yS))
(<= (intendedLocation ?terrorist ?x3 ?y3)
    (type ?terrorist verticalTerrorist)
    (not (dead ?terrorist))
    (intendedSoldierLocation ?xS ?yS)
    (true (location ?terrorist ?x1 ?y1))
    (verticalStep ?terrorist ?x1 ?y1 ?x2 ?y2 ?xS ?yS)
    (verticalStep ?terrorist ?x2 ?y2 ?x3 ?y3 ?xS ?yS))

;;; A [horizontal,vertical] step is one that will move [horizontally,vertically]
;;;  toward the intended location of the soldier before it will move 
;;;  [vertically,horizontally].

(<= (horizontalStep ?terrorist ?x1 ?y1 ?x2 ?y2 ?xT ?yT)
    (wouldStepHorizontal ?terrorist ?dir ?x1 ?y1 ?xT ?yT)
    (nSteps 1 ?dir ?x1 ?y1 ?x2 ?y2))
(<= (horizontalStep ?terrorist ?x1 ?y1 ?x2 ?y2 ?xT ?yT)
    (wouldStepVertical ?terrorist ?dir ?x1 ?y1 ?xT ?yT)
    (nSteps 1 ?dir ?x1 ?y1 ?x2 ?y2)
    (not (wouldStepHorizontal ?terrorist east ?x1 ?y1 ?xT ?yT))
    (not (wouldStepHorizontal ?terrorist west ?x1 ?y1 ?xT ?yT)))
(<= (horizontalStep ?terrorist ?x ?y ?x ?y ?xT ?yT)
    (cell ?x ?y)
    (cell ?xT ?yT)
    (cellNearTerrorist ?terrorist ?x ?y) ; Soar
    (intendedSoldierLocation ?xT ?yT) ; Soar
    (not (wouldStepHorizontal ?terrorist east ?x ?y ?xT ?yT))
    (not (wouldStepHorizontal ?terrorist west ?x ?y ?xT ?yT))
    (not (wouldStepVertical ?terrorist south ?x ?y ?xT ?yT))
    (not (wouldStepVertical ?terrorist north ?x ?y ?xT ?yT)))
    
(<= (verticalStep ?terrorist ?x1 ?y1 ?x2 ?y2 ?xT ?yT)
    (wouldStepVertical ?terrorist ?dir ?x1 ?y1 ?xT ?yT)
    (nSteps 1 ?dir ?x1 ?y1 ?x2 ?y2))
(<= (verticalStep ?terrorist ?x1 ?y1 ?x2 ?y2 ?xT ?yT)
    (wouldStepHorizontal ?terrorist ?dir ?x1 ?y1 ?xT ?yT)
    (nSteps 1 ?dir ?x1 ?y1 ?x2 ?y2)
    (not (wouldStepVertical ?terrorist south ?x1 ?y1 ?xT ?yT))
    (not (wouldStepVertical ?terrorist north ?x1 ?y1 ?xT ?yT)))
(<= (verticalStep ?terrorist ?x ?y ?x ?y ?xT ?yT)
    (cell ?x ?y)
    (cell ?xT ?yT)
    (cellNearTerrorist ?terrorist ?x ?y) ; Soar
    (intendedSoldierLocation ?xT ?yT) ; Soar
    (not (wouldStepVertical ?terrorist south ?x ?y ?xT ?yT))
    (not (wouldStepVertical ?terrorist north ?x ?y ?xT ?yT))
    (not (wouldStepHorizontal ?terrorist east ?x ?y ?xT ?yT))
    (not (wouldStepHorizontal ?terrorist west ?x ?y ?xT ?yT)))
    
;;; True if the step from (?x1,?y1) toward (?x2,?y2) along the direction ?dir
;;;  is not blocked by a wall.
   
(<= (wouldStepHorizontal ?terrorist ?dir ?x1 ?y1 ?x2 ?y2)
    (cellNearTerrorist ?terrorist ?x1 ?y1) ; Soar
    (intendedSoldierLocation ?x2 ?y2) ; Soar
    (horizontalRelation ?terrorist ?dir ?x2 ?y2 ?x1 ?y1)
    (not (stepBlocked ?dir ?x1 ?y1)))
(<= (wouldStepVertical ?terrorist ?dir ?x1 ?y1 ?x2 ?y2)
    (cellNearTerrorist ?terrorist ?x1 ?y1) ; Soar
    (intendedSoldierLocation ?x2 ?y2) ; Soar
    (verticalRelation ?terrorist ?dir ?x2 ?y2 ?x1 ?y1)
    (not (stepBlocked ?dir ?x1 ?y1)))	

;;; The soldier's health is incremented by 1 if he performs the heal action,
;;;  0 otherwise.

(<= (healthIncrement soldier 1)   ; >>>>>Increased by 1<<<<<
    (does soldier heal))
(<= (healthIncrement soldier 0)
    (not (does soldier heal)))
    
;;; The soldier's health is decremented by 1 if he is attacked by a terrorist,
;;;  0 otherwise.

(<= (healthDecrement soldier 1)
    (intendedSoldierLocation ?x ?y)
    (terroristAttacks ?x ?y))
(<= (healthDecrement soldier 0)
    (intendedSoldierLocation ?x ?y)
    (not (terroristAttacks ?x ?y)))

;;; A terrorist's health may never be incremented

(<= (healthIncrement ?terrorist 0)
    (type ?terrorist terrorist))
    
;;; A terrorist's health is decremented by 1 if he is attacked by the soldier,
;;;  0 otherwise.

(<= (healthDecrement ?terrorist 1)
    (type ?terrorist terrorist)
    (intendedLocation ?terrorist ?x ?y)
    (attacks ?x ?y soldier))
(<= (healthDecrement ?terrorist 0)
    (type ?terrorist terrorist)
    (intendedLocation ?terrorist ?x ?y)
    (not (attacks ?x ?y soldier)))

;;; A character with 0 health is dead.

(<= (dead ?object)
    (true (health ?object 0)))

;;; Two cells are distinct if they differ on either an x- or y- coordinate
; Soar change: this has 7,708 groundings for an 8x8 world, so it's pretty costly

;(<= (distinctCell ?x1 ?y1 ?x2 ?y2)
;    (cell ?x1 ?y1)
;    (cell ?x2 ?y2)
;    (distinct ?x1 ?x2))
;(<= (distinctCell ?x1 ?y1 ?x2 ?y2)
;    (cell ?x1 ?y1)
;    (cell ?x2 ?y2)
;    (distinct ?y1 ?y2))

;;; A cell is composed of two indices in the range [1,8]

(<= (cell ?x ?y)
    (index ?x)
    (index ?y))

;;; Timeout occurs at time t=timeFinal

(<= timeout
    (true (time ?t))
    (timeFinal ?t))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Static Relations
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;; Indices in the range [1,8].

(index 1) (index 2) (index 3) (index 4) (index 5) (index 6) (index 7) (index 8)

;;; The cardinal directions {south,north,east,west}.

(direction south) (direction north) (direction east) (direction west)

;;; The time at which the game will end.

(timeFinal 50)

; Soar: constrain the terrorist movement predicates to only match near terrorists
; This means all cells within manhattan distance 2 of a terrorist

(<= (terroristCell ?terrorist ?x ?y)
    (type ?terrorist terrorist) 
    (true (location ?terrorist ?x ?y)))

(<= (cellNearTerrorist ?terrorist ?x ?y)
    (terroristCell ?terrorist ?x ?y))

(<= (cellNearTerrorist ?terrorist ?x1 ?y)
    (terroristCell ?terrorist ?x ?y)
    (index ?d) ; SW 8/3/07
    (- ?x ?d ?x1)
    (> ?d 0)
    (> 3 ?d))

(<= (cellNearTerrorist ?terrorist ?x1 ?y)
    (terroristCell ?terrorist ?x ?y)
    (index ?d) ; SW 8/3/07
    (+ ?x ?d ?x1)
    (> ?d 0)
    (> 3 ?d))

(<= (cellNearTerrorist ?terrorist ?x ?y1)
    (terroristCell ?terrorist ?x ?y)
    (index ?d) ; SW 8/3/07
    (- ?y ?d ?y1)
    (> ?d 0)
    (> 3 ?d))

(<= (cellNearTerrorist ?terrorist ?x ?y1)
    (terroristCell ?terrorist ?x ?y)
    (index ?d) ; SW 8/3/07
    (+ ?y ?d ?y1)
    (> ?d 0)
    (> 3 ?d))

; four diagonal cases
(<= (cellNearTerrorist ?terrorist ?x1 ?y1) 
    (terroristCell ?terrorist ?x ?y)
    (+ ?x 1 ?x1)
    (+ ?y 1 ?y1))

(<= (cellNearTerrorist ?terrorist ?x1 ?y1) 
    (terroristCell ?terrorist ?x ?y)
    (+ ?x 1 ?x1)
    (- ?y 1 ?y1))

(<= (cellNearTerrorist ?terrorist ?x1 ?y1) 
    (terroristCell ?terrorist ?x ?y)
    (- ?x 1 ?x1)
    (- ?y 1 ?y1))

(<= (cellNearTerrorist ?terrorist ?x1 ?y1) 
    (terroristCell ?terrorist ?x ?y)
    (- ?x 1 ?x1)
    (+ ?y 1 ?y1))
