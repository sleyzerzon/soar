;;
;; 1 player mummy maze
;;   horizontal and vertical mummies on an 8x4 grid
;;
;;  tim hinrichs, tyler hicks-wright, eric schkufza
;;  december 2006
;;

;;;;;;;;;;;;;;;;;;;;;;;;;; objects (components) ;;;;;;;;;;;;;;;;;;;;;;;;;;

(index 0)
(index 1)
(index 2)
(index 3)
(index 4)
(index 5)
(index 6)
(index 7)
(index 8)

(direction north)
(direction south)
(direction east)
(direction west)
(direction nowhere)	

(role explorer)
(mummy-type mummyv vertical)
(mummy-type mummyh horizontal)

;;;;;;;;;;;;;;;;;;;;;;;;;; initial state (configuration) ;;;;;;;;;;;;;;;;;;;;;;;;;;

(init (location mummyh 3 3))
;(init (location mummyv 6 8))
(init (location explorer 3 1))
(init (location exit 4 1))

(init (step 0))

; bounding walls

(init (wall 1 0 north))
(init (wall 2 0 north))
(init (wall 3 0 north))
(init (wall 4 0 north))
(init (wall 5 0 north))
(init (wall 6 0 north))
(init (wall 7 0 north))
(init (wall 8 0 north))
(init (wall 1 8 north))
(init (wall 2 8 north))
(init (wall 3 8 north))
(init (wall 4 8 north))
(init (wall 5 8 north))
(init (wall 6 8 north))
(init (wall 7 8 north))
(init (wall 8 8 north))
(init (wall 0 1 east))
(init (wall 0 2 east))
(init (wall 0 3 east))
(init (wall 0 4 east))
(init (wall 0 5 east))
(init (wall 0 6 east))
(init (wall 0 7 east))
(init (wall 0 8 east))
(init (wall 8 1 east))
(init (wall 8 2 east))
(init (wall 8 3 east))
(init (wall 8 4 east))
(init (wall 8 5 east))
(init (wall 8 6 east))
(init (wall 8 7 east))
(init (wall 8 8 east))

;; partition walls

(init (wall 2 1 east))
(init (wall 2 2 east))
(init (wall 2 3 east))
(init (wall 2 4 east))
(init (wall 2 5 east))
(init (wall 2 6 east))
(init (wall 2 7 east))
(init (wall 2 8 east))
(init (wall 6 1 east))
(init (wall 6 2 east))
(init (wall 6 3 east))
(init (wall 6 4 east))
(init (wall 6 5 east))
(init (wall 6 6 east))
(init (wall 6 7 east))
(init (wall 6 8 east))

;;;;;;;;;;;;;;;;;;;;;;;;;; actions ;;;;;;;;;;;;;;;;;;;;;;;;;;

; legality

(<= (legal explorer (move ?dir))
    (direction ?dir))

; built in object actions: doesprime

; mummy movement constrained by a rope
(<= (doesprime ?mummy (move2 ?mv1 ?mv2))
    (simplemove ?mummy (move2 ?mv1 ?mv2)))

;;; where the mummy would move by itself

(<= (simplemove ?mummy (move2 ?m1 ?m2))
    (mummy-type ?mummy ?type)
    (two-steps-toward ?type ?x ?y ?ex ?ey ?m1 ?m2))

(<= (two-steps-toward ?type ?x ?y ?ex ?ey ?m1 ?m2)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?x ?y))
    (movetoward ?type ?x ?y ?ex ?ey ?m1)
    (newlocation1 ?x ?y ?m1 ?x1 ?y1 ?mummy)
    (movetoward ?type ?x1 ?y1 ?ex ?ey ?m2))
  	  
(<= (movetoward ?type ?x ?y ?ex ?ey ?card)
    (direction-from ?x ?y ?ex ?ey ?dir ?type)
    (pick-one ?type ?x ?y ?dir ?card))

;;; horizontal mummy movement

; no horizontal or vertical component
(<= (pick-one horizontal ?x ?y none nowhere)
    (mummy-type ?mummy horizontal)
    (next-explorer-loc ?x ?y)
    (or (true (location ?mummy ?x ?y)) (close-to-mummy ?x ?y ?mummy)))

; no horizontal component
(<= (pick-one horizontal ?x ?y ?dir ?v)
    (mummy-type ?mummy horizontal)
    (or (true (location ?mummy ?x ?y)) (close-to-mummy ?x ?y ?mummy))
    (direction-from ?x ?y ?ex ?ey ?dir horizontal)
    (not (some-horiz-component ?dir))
    (vert-component ?dir ?v))

; no vertical component
(<= (pick-one horizontal ?x ?y ?dir ?h)
    (mummy-type ?mummy horizontal)
    (or (true (location ?mummy ?x ?y)) (close-to-mummy ?x ?y ?mummy))
    (direction-from ?x ?y ?ex ?ey ?dir horizontal)
    (not (some-vert-component ?dir))
    (horiz-component ?dir ?h))

; both vertical and horizontal components, where horiz moves piece
(<= (pick-one horizontal ?x ?y ?dir ?h)
    (mummy-type ?mummy horizontal)
    (or (true (location ?mummy ?x ?y)) (close-to-mummy ?x ?y ?mummy))
    (direction-from ?x ?y ?ex ?ey ?dir horizontal)
    (horiz-component ?dir ?h)
    (vert-component ?dir ?v)
    (newlocation1 ?x ?y ?h ?xnew ?y ?mummy)
    (distinct ?x ?xnew))

; both vertical and horizontal components, where horiz does not move piece.
;   if horiz doesn't move, either vertical does move or it does not.
;     either way, pick the vertical.
(<= (pick-one horizontal ?x ?y ?dir ?v)
    (mummy-type ?mummy horizontal)
    (or (true (location ?mummy ?x ?y)) (close-to-mummy ?x ?y ?mummy))
    (direction-from ?x ?y ?ex ?ey ?dir horizontal)
    (horiz-component ?dir ?h)
    (vert-component ?dir ?v)
    (newlocation1 ?x ?y ?h ?x ?y ?mummy))


;;; vertical mummy movement

; no horizontal or vertical component
(<= (pick-one vertical ?x ?y none nowhere)
    (mummy-type ?mummy vertical)
    (next-explorer-loc ?x ?y)
    (or (true (location ?mummy ?x ?y)) (close-to-mummy ?x ?y ?mummy)))

; no horiz component
(<= (pick-one vertical ?x ?y ?dir ?v)
    (mummy-type ?mummy vertical)
    (or (true (location ?mummy ?x ?y)) (close-to-mummy ?x ?y ?mummy))
    (direction-from ?x ?y ?ex ?ey ?dir vertical)
    (not (some-horiz-component ?dir))
    (vert-component ?dir ?v))

; no vertical component
(<= (pick-one vertical ?x ?y ?dir ?h)
    (mummy-type ?mummy vertical)
    (or (true (location ?mummy ?x ?y)) (close-to-mummy ?x ?y ?mummy))
    (direction-from ?x ?y ?ex ?ey ?dir vertical)
    (not (some-vert-component ?dir))
    (horiz-component ?dir ?h))

; both vertical and horizontal components, where vert moves piece
(<= (pick-one vertical ?x ?y ?dir ?v)
    (mummy-type ?mummy vertical)
    (or (true (location ?mummy ?x ?y)) (close-to-mummy ?x ?y ?mummy))
    (direction-from ?x ?y ?ex ?ey ?dir vertical)
    (horiz-component ?dir ?h)
    (vert-component ?dir ?v)
    (newlocation1 ?x ?y ?v ?x ?ynew ?mummy)
    (distinct ?y ?ynew))

; both vertical and horizontal components, where vert does not move piece.
;   if vert doesn't move, either horiz does move or it does not.
;     either way, pick the horizontal.
(<= (pick-one vertical ?x ?y ?dir ?h)
    (mummy-type ?mummy vertical)
    (or (true (location ?mummy ?x ?y)) (close-to-mummy ?x ?y ?mummy))
    (direction-from ?x ?y ?ex ?ey ?dir vertical)
    (horiz-component ?dir ?h)
    (vert-component ?dir ?v)
    (newlocation1 ?x ?y ?v ?x ?y ?mummy))


;;; direction-from computes the direction, (n, nw, ne, s, ...) one would travel if starting
;;;    at ?x1 ?y1 to arrive at ?x2 ?y2

(<= (direction-from ?x1 ?y1 ?x2 ?y2 ?dir ?type)
    (horiz-direction-from ?x1 ?x2 ?dir1 ?type)
    (vert-direction-from ?y1 ?y2 ?dir2 ?type)
    (combine-directions ?dir2 ?dir1 ?dir))

;;;;(<= (horiz-direction-from ?x1 ?x2 east)
;;;;    (lessthan ?x1 ?x2))
(<= (horiz-direction-from ?mx ?ex east ?type)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?mx ?my))
    (next-explorer-loc ?ex ?ey)
    (lessthan ?mx ?ex))
(<= (horiz-direction-from ?cmx ?ex east ?type)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?mx ?my))
    (close-to-mummy ?cmx ?my ?mummy)
    (next-explorer-loc ?ex ?ey)
    (lessthan ?cmx ?ex))

;;;;(<= (horiz-direction-from ?x1 ?x2 west)
;;;;    (lessthan ?x2 ?x1))
(<= (horiz-direction-from ?mx ?ex west ?type)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?mx ?my))
    (next-explorer-loc ?ex ?ey)
    (lessthan ?ex ?mx))
(<= (horiz-direction-from ?cmx ?ex west ?type)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?mx ?my))
    (close-to-mummy ?cmx ?my ?mummy)
    (next-explorer-loc ?ex ?ey)
    (lessthan ?ex ?cmx))

;;;;(<= (horiz-direction-from ?x1 ?x2 none)
;;;;    (index ?x1)
;;;;    (index ?x2)
;;;;    (not (lessthan ?x1 ?x2))
;;;;    (not (lessthan ?x2 ?x1)))
(<= (horiz-direction-from ?mx ?ex none ?type)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?mx ?my))
    (next-explorer-loc ?ex ?ey)
    (not (lessthan ?mx ?ex))
    (not (lessthan ?ex ?mx)))
(<= (horiz-direction-from ?cmx ?ex none ?type)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?mx ?my)) 
    (close-to-mummy ?cmx ?my ?mummy)
    (next-explorer-loc ?ex ?ey)
    (not (lessthan ?cmx ?ex))
    (not (lessthan ?ex ?cmx)))

;;;; same as for the horizontal versions

;;;;(<= (vert-direction-from ?y1 ?y2 north)
;;;;    (lessthan ?y1 ?y2))
(<= (vert-direction-from ?my ?ey north ?type)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?mx ?my))
    (next-explorer-loc ?ex ?ey)
    (lessthan ?my ?ey))
(<= (vert-direction-from ?cmy ?ey north ?type)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?mx ?my))
    (close-to-mummy ?mx ?cmy ?mummy)
    (next-explorer-loc ?ex ?ey)
    (lessthan ?cmy ?ey))

;;;;(<= (vert-direction-from ?y1 ?y2 south)
;;;;    (lessthan ?y2 ?y1))
(<= (vert-direction-from ?my ?ey south ?type)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?mx ?my))
    (next-explorer-loc ?ex ?ey)
    (lessthan ?ey ?my))
(<= (vert-direction-from ?cmy ?ey south ?type)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?mx ?my))
    (close-to-mummy ?mx ?cmy ?mummy)
    (next-explorer-loc ?ex ?ey)
    (lessthan ?ey ?cmy))

;;;;(<= (vert-direction-from ?y1 ?y2 none)
;;;;    (index ?y1)
;;;;    (index ?y2)
;;;;    (not (lessthan ?y1 ?y2))
;;;;    (not (lessthan ?y2 ?y1)))
(<= (vert-direction-from ?my ?ey none ?type)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?mx ?my))
    (next-explorer-loc ?ex ?ey)
    (not (lessthan ?my ?ey))
    (not (lessthan ?ey ?my)))
(<= (vert-direction-from ?cmy ?ey none ?type)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?mx ?my))
    (close-to-mummy ?mx ?cmy ?mummy)
    (next-explorer-loc ?ex ?ey)
    (not (lessthan ?cmy ?ey))
    (not (lessthan ?ey ?cmy)))

;;; unioning cardinal directions

(combine-directions none none none)
(<= (combine-directions none ?x ?x)
    (direction ?x))
(<= (combine-directions ?x none ?x)
    (direction ?x))
(combine-directions north east ne)
(combine-directions north west nw)
(combine-directions south east se)
(combine-directions south west sw)



;;;;;;;;;;;;;;;;;;;;;;;;;; dynamics ;;;;;;;;;;;;;;;;;;;;;;;;;;


(<= (next (location explorer ?x2 ?y2))
    (true (location explorer ?x1 ?y1))
    (does explorer (move ?dir))
    (newlocation1 ?x1 ?y1 ?dir ?x2 ?y2 explorer))

(<= (next (location ?mummy ?x2 ?y2))
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?x1 ?y1))
    (doesprime ?mummy (move2 ?dir1 ?dir2))
    (newlocation2 ?x1 ?y1 ?dir1 ?dir2 ?x2 ?y2 ?mummy))

;; frame axioms

(<= (next (location exit ?x ?y))
    (true (location exit ?x ?y)))
(<= (next (wall ?x ?y ?z))
    (true (wall ?x ?y ?z))) 

;; step axioms

(<= (next (step ?x))
    (true (step ?y))
    (succ ?y ?x))
	
;;;;;;;;;;;;;;;;;;;;;;;;;; view relations ;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= eaten
    (true (location explorer ?x ?y))
    (true (location ?mummy ?x ?y))
    (mummy-type ?mummy ?type))
(<= atexit
    (true (location explorer ?x ?y))
    (true (location exit ?x ?y)))
(<= laststep
    (true (step 50)))

;; computational relations

(<= (newlocation1 ?x ?y nowhere ?x ?y ?obj)
    (true (location ?obj ?x ?y))
    (distinct ?obj exit))
(<= (newlocation1 ?x ?y nowhere ?x ?y ?mummy)
    (close-to-mummy ?x ?y ?mummy))

(<= (newlocation1 ?x ?y north ?x ?y ?obj)
    (true (location ?obj ?x ?y))
    (true (wall ?x ?y north))
    (distinct ?obj exit))
(<= (newlocation1 ?x ?y north ?x ?y ?mummy)
    (close-to-mummy ?x ?y ?mummy)
    (true (wall ?x ?y north)))

(<= (newlocation1 ?x ?y south ?x ?y ?obj)
    (true (location ?obj ?x ?y))
    (succ ?down ?y)
    (true (wall ?x ?down north))
    (distinct ?obj exit))
(<= (newlocation1 ?x ?y south ?x ?y ?mummy)
    (close-to-mummy ?x ?y ?mummy)
    (succ ?down ?y)
    (true (wall ?x ?down north)))

(<= (newlocation1 ?x ?y east ?x ?y ?obj)
    (true (location ?obj ?x ?y))
    (true (wall ?x ?y east))
    (distinct ?obj exit))
(<= (newlocation1 ?x ?y east ?x ?y ?mummy)
    (close-to-mummy ?x ?y ?mummy)
    (true (wall ?x ?y east)))

(<= (newlocation1 ?x ?y west ?x ?y ?obj)
    (true (location ?obj ?x ?y))
    (succ ?left ?x)
    (true (wall ?left ?y east))
    (distinct ?obj exit))
(<= (newlocation1 ?x ?y west ?x ?y ?mummy)
    (close-to-mummy ?x ?y ?mummy)
    (succ ?left ?x)
    (true (wall ?left ?y east)))

(<= (newlocation1 ?x ?y1 north ?x ?y2 ?obj)
    (true (location ?obj ?x ?y1))
    (succ ?y1 ?y2)
    (not (true (wall ?x ?y1 north)))
    (distinct ?obj exit))
(<= (newlocation1 ?x ?y1 north ?x ?y2 ?mummy)
    (close-to-mummy ?x ?y1 ?mummy)
    (succ ?y1 ?y2)
    (not (true (wall ?x ?y1 north))))

(<= (newlocation1 ?x ?y1 south ?x ?y2 ?obj)
    (true (location ?obj ?x ?y1))
    (succ ?y2 ?y1)
    (not (true (wall ?x ?y2 north)))
    (distinct ?obj exit))
(<= (newlocation1 ?x ?y1 south ?x ?y2 ?mummy)
    (close-to-mummy ?x ?y1 ?mummy)
    (succ ?y2 ?y1)
    (not (true (wall ?x ?y2 north))))

(<= (newlocation1 ?x1 ?y east ?x2 ?y ?obj)
    (true (location ?obj ?x1 ?y))
    (succ ?x1 ?x2)
    (not (true (wall ?x1 ?y east)))
    (distinct ?obj exit))
(<= (newlocation1 ?x1 ?y east ?x2 ?y ?mummy)
    (close-to-mummy ?x1 ?y ?mummy)
    (succ ?x1 ?x2)
    (not (true (wall ?x1 ?y east))))

(<= (newlocation1 ?x1 ?y west ?x2 ?y ?obj)
    (true (location ?obj ?x1 ?y)) 
    (succ ?x2 ?x1)
    (not (true (wall ?x2 ?y east)))
    (distinct ?obj exit))
(<= (newlocation1 ?x1 ?y west ?x2 ?y ?mummy)
    (close-to-mummy ?x1 ?y ?mummy)
    (succ ?x2 ?x1)
    (not (true (wall ?x2 ?y east))))

(<= (newlocation2 ?x1 ?y1 ?dir1 ?dir2 ?x3 ?y3 ?mummy)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?x1 ?y1))
    (newlocation1 ?x1 ?y1 ?dir1 ?x2 ?y2 ?mummy)
    (newlocation1 ?x2 ?y2 ?dir2 ?x3 ?y3 ?mummy))	

;;;;;;;;;;;;;;;;;;;;;;;;;; static relations ;;;;;;;;;;;;;;;;;;;;;;;;;;

(succ 0 1)
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(succ 25 26)
(succ 26 27)
(succ 27 28)
(succ 28 29)
(succ 29 30)
(succ 30 31)
(succ 31 32)
(succ 32 33)
(succ 33 34)
(succ 34 35)
(succ 35 36)
(succ 36 37)
(succ 37 38)
(succ 38 39)
(succ 39 40)
(succ 40 41)
(succ 41 42)
(succ 42 43)
(succ 43 44)
(succ 44 45)
(succ 45 46)
(succ 46 47)
(succ 47 48)
(succ 48 49)
(succ 49 50)

(horiz-component nw west)
(horiz-component ne east)
(horiz-component sw west)
(horiz-component se east)
(vert-component nw north)
(vert-component ne north)
(vert-component sw south)
(vert-component se south)
(horiz-component west west)
(horiz-component east east)
(vert-component north north)
(vert-component south south)

(<= (some-vert-component ?dir)
    (vert-component ?dir ?x))

(<= (some-horiz-component ?dir)
    (horiz-component ?dir ?x))

(lessthan 1 2)
(lessthan 1 3)
(lessthan 1 4)
(lessthan 1 5)
(lessthan 1 6)
(lessthan 1 7)
(lessthan 1 8)
(lessthan 2 3)
(lessthan 2 4)
(lessthan 2 5)
(lessthan 2 6)
(lessthan 2 7)
(lessthan 2 8)
(lessthan 3 4)
(lessthan 3 5)
(lessthan 3 6)
(lessthan 3 7)
(lessthan 3 8)
(lessthan 4 5)
(lessthan 4 6)
(lessthan 4 7)
(lessthan 4 8)
(lessthan 5 6)
(lessthan 5 7)
(lessthan 5 8)
(lessthan 6 7)
(lessthan 6 8)
(lessthan 7 8)

(diff 1 1 0)
(diff 1 2 1)
(diff 1 3 2)
(diff 1 4 3)
(diff 1 5 4)
(diff 1 6 5)
(diff 1 7 6)
(diff 1 8 7)
(diff 2 1 1)
(diff 2 2 0)
(diff 2 3 1)
(diff 2 4 2)
(diff 2 5 3)
(diff 2 6 4)
(diff 2 7 5)
(diff 2 8 6)
(diff 3 1 2)
(diff 3 2 1)
(diff 3 3 0)
(diff 3 4 1)
(diff 3 5 2)
(diff 3 6 3)
(diff 3 7 4)
(diff 3 8 5)
(diff 4 1 3)
(diff 4 2 2)
(diff 4 3 1)
(diff 4 4 0)
(diff 4 5 1)
(diff 4 6 2)
(diff 4 7 3)
(diff 4 8 4)
(diff 5 1 4)
(diff 5 2 3)
(diff 5 3 2)
(diff 5 4 1)
(diff 5 5 0)
(diff 5 6 1)
(diff 5 7 2)
(diff 5 8 3)
(diff 6 1 5)
(diff 6 2 4)
(diff 6 3 3)
(diff 6 4 2)
(diff 6 5 1)
(diff 6 6 0)
(diff 6 7 1)
(diff 6 8 2)
(diff 7 1 6)
(diff 7 2 5)
(diff 7 3 4)
(diff 7 4 3)
(diff 7 5 2)
(diff 7 6 1)
(diff 7 7 0)
(diff 7 8 1)
(diff 8 1 7)
(diff 8 2 6)
(diff 8 3 5)
(diff 8 4 4)
(diff 8 5 3)
(diff 8 6 2)
(diff 8 7 1)
(diff 8 8 0)

(sum 0 1 1)
(sum 0 2 2)
(sum 0 3 3)
(sum 0 4 4)
(sum 0 5 5)
(sum 0 6 6)
(sum 0 7 7)
(sum 0 8 8)
(sum 1 1 2)
(sum 1 2 3)
(sum 1 3 4)
(sum 1 4 5)
(sum 1 5 6)
(sum 1 6 7)
(sum 1 7 8)
(sum 1 8 9)
(sum 2 1 3)
(sum 2 2 4)
(sum 2 3 5)
(sum 2 4 6)
(sum 2 5 7)
(sum 2 6 8)
(sum 2 7 9)
(sum 2 8 10)
(sum 3 1 4)
(sum 3 2 5)
(sum 3 3 6)
(sum 3 4 7)
(sum 3 5 8)
(sum 3 6 9)
(sum 3 7 10)
(sum 3 8 11)
(sum 4 1 5)
(sum 4 2 6)
(sum 4 3 7)
(sum 4 4 8)
(sum 4 5 9)
(sum 4 6 10)
(sum 4 7 11)
(sum 4 8 12)
(sum 5 1 6)
(sum 5 2 7)
(sum 5 3 8)
(sum 5 4 9)
(sum 5 5 10)
(sum 5 6 11)
(sum 5 7 12)
(sum 5 8 13)
(sum 6 1 7)
(sum 6 2 8)
(sum 6 3 9)
(sum 6 4 10)
(sum 6 5 11)
(sum 6 6 12)
(sum 6 7 13)
(sum 6 8 14)
(sum 7 1 8)
(sum 7 2 9)
(sum 7 3 10)
(sum 7 4 11)
(sum 7 5 12)
(sum 7 6 13)
(sum 7 7 14)
(sum 7 8 15)
(sum 8 1 9)
(sum 8 2 10)
(sum 8 3 11)
(sum 8 4 12)
(sum 8 5 13)
(sum 8 6 14)
(sum 8 7 15)
(sum 8 8 16)

;;;;;;;;;;;;;;;;;;;;;;;;;; terminal ;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= terminal laststep)
(<= terminal eaten)
(<= terminal atexit)

;;;;;;;;;;;;;;;;;;;;;;;;;; goal ;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (goal explorer 100)
    atexit
    (not eaten))
(<= (goal explorer 50)
    (not atexit)
    (not eaten))
(<= (goal explorer 0)
    eaten)

; need this?
;;;; probably not, and it's causing errors in the translation
;;;;(<= (goal mummy 0)
;;;;    atexit
;;;;    (not eaten))
;;;;(<= (goal mummy 50)
;;;;    (not atexit)
;;;;    (not eaten))
;;;;(<= (goal mummy 100)
;;;;    eaten) 

;;;;;;;;;;;;;;;;;;;;;;; additions ;;;;;;;;;;;;;;;;;;;;;;;;;;

(<= (next-explorer-loc ?ex ?ey)
    (true (location explorer ?ex1 ?ey1))
    (does explorer (move ?em))
    (newlocation1 ?ex1 ?ey1 ?em ?ex ?ey explorer))

(<= (close-to-mummy ?x ?y1 ?mummy)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?x ?y))
    (newlocation1 ?x ?y ?dir ?x ?y1 ?mummy)
    (distinct ?y ?y1))

(<= (close-to-mummy ?x1 ?y ?mummy)
    (mummy-type ?mummy ?type)
    (true (location ?mummy ?x ?y))
    (newlocation1 ?x ?y ?dir ?x1 ?y ?mummy)
    (distinct ?x ?x1))


