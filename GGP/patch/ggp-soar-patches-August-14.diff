Index: CLI/cli_structToString.cpp
===================================================================
--- CLI/cli_structToString.cpp	(revision 0)
+++ CLI/cli_structToString.cpp	(revision 0)
@@ -0,0 +1,80 @@
+/////////////////////////////////////////////////////////////////
+// struct-to-string command file
+//
+// Author: Yongjia Wang
+// Date  : 2007-08-06
+//
+/////////////////////////////////////////////////////////////////
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif // HAVE_CONFIG_H
+
+#include "cli_CommandLineInterface.h"
+#include "sml_Names.h"
+#include "gSKI_Agent.h"
+#include "gSKI_DoNotTouch.h"
+#include "gSKI_Kernel.h"
+
+using namespace cli;
+using namespace sml;
+using namespace std;
+using namespace gSKI;
+
+
+bool StringToInt(std::string str, int& n){
+	std::istringstream str2int(str);
+	if (str2int >> n) {
+		return true;
+	}
+	else{
+		return false;
+	}
+}
+bool CommandLineInterface::ParseStructToString(gSKI::Agent* pAgent, std::vector<std::string>& argv) {
+	
+	if(argv.size() < 2){
+		m_Result << "No input identifier";
+	}
+	string struct_id = argv.at(1);
+	string additional_feature = "";
+	string excluded_feature = "";
+	
+	int current_index = 2;
+	while(argv.size() > current_index + 1){
+		string option = argv[current_index];
+		string value = argv[current_index+1];
+
+		if(option == "-e"){
+			excluded_feature = value;
+		}
+		else if(option == "-a"){
+			additional_feature = value;
+		}
+		current_index += 2;
+	}
+	
+
+	// Attain the evil back door of doom, even though we aren't the TgD
+	gSKI::EvilBackDoor::TgDWorkArounds* pKernelHack = m_pKernel->getWorkaroundObject();
+	for(std::vector<string>::iterator itr = argv.begin(); itr != argv.end(); ++itr){
+		//cout << *itr << endl;
+	}
+	if(struct_id.length() >= 3 && struct_id[0] =='|' && struct_id[struct_id.length() - 1] == '|'){
+		struct_id = struct_id.substr(1, struct_id.length() - 2);
+	}
+	int input_int;
+	
+	if(StringToInt(struct_id, input_int)){
+		string gs_str = pKernelHack->IdToStruct(pAgent, input_int);
+		m_Result << struct_id << endl;
+		m_Result << gs_str;
+	}
+	else{
+		string hash_str = pKernelHack->StructToString(pAgent, struct_id, additional_feature, excluded_feature);
+		m_Result << hash_str;
+	}
+	
+	return true;
+}
+//#endif
Index: CLI/CommandLineInterface.vcproj
===================================================================
--- CLI/CommandLineInterface.vcproj	(revision 6965)
+++ CLI/CommandLineInterface.vcproj	(working copy)
@@ -399,6 +399,10 @@
 					>
 				</File>
 				<File
+					RelativePath=".\cli_structToString.cpp"
+					>
+				</File>
+				<File
 					RelativePath=".\src\cli_time.cpp"
 					>
 				</File>
Index: CLI/include/cli_CommandLineInterface.h
===================================================================
--- CLI/include/cli_CommandLineInterface.h	(revision 6965)
+++ CLI/include/cli_CommandLineInterface.h	(working copy)
@@ -715,6 +715,11 @@
 	*************************************************************/
 	bool DoWatchWMEs(gSKI::Agent* pAgent, const eWatchWMEsMode mode, WatchWMEsTypeBitset type, const std::string* pIdString = 0, const std::string* pAttributeString = 0, const std::string* pValueString = 0);
 
+	// YJ 2007-08-06
+	// For parsing strcutre into unique string, used for TL project
+	bool ParseStructToString(gSKI::Agent* pAgent, std::vector<std::string>& argv);
+
+
 	// Print callback events go here
 	virtual void HandleEvent(egSKIPrintEventId, gSKI::Agent*, const char* msg);
 
Index: CLI/include/cli_Commands.h
===================================================================
--- CLI/include/cli_Commands.h	(revision 6965)
+++ CLI/include/cli_Commands.h	(working copy)
@@ -76,6 +76,10 @@
 		static char const* kCLIWarnings;
 		static char const* kCLIWatch;
 		static char const* kCLIWatchWMEs;
+		// YJ 2007-08-06
+		// For parsing strcutre into unique string, used for TL project
+		static char const* kCLIStructToString; //YJ
+
 	}; // struct
 } // namespace cli
 
Index: CLI/src/cli_CommandLineInterface.cpp
===================================================================
--- CLI/src/cli_CommandLineInterface.cpp	(revision 6965)
+++ CLI/src/cli_CommandLineInterface.cpp	(working copy)
@@ -113,6 +113,9 @@
 	m_CommandMap[Commands::kCLIWarnings]					= &cli::CommandLineInterface::ParseWarnings;
 	m_CommandMap[Commands::kCLIWatch]						= &cli::CommandLineInterface::ParseWatch;
 	m_CommandMap[Commands::kCLIWatchWMEs]					= &cli::CommandLineInterface::ParseWatchWMEs;
+	// YJ 2007-08-06
+	// For parsing strcutre into unique string, used for TL project
+	m_CommandMap[Commands::kCLIStructToString]			= &cli::CommandLineInterface::ParseStructToString; // YJ
 
 	// Indicate which commands should be echoed so that all users can see them when doing a shared debugging session
 	m_EchoMap[Commands::kCLIAddWME]						= true ;
Index: CLI/src/cli_Commands.cpp
===================================================================
--- CLI/src/cli_Commands.cpp	(revision 6965)
+++ CLI/src/cli_Commands.cpp	(working copy)
@@ -80,3 +80,6 @@
 char const* Commands::kCLIWarnings					= "warnings";
 char const* Commands::kCLIWatch						= "watch";
 char const* Commands::kCLIWatchWMEs					= "watch-wmes";
+// YJ 2007-08-06
+// For parsing strcutre into unique string, used for TL project
+char const* Commands::kCLIStructToString			= "struct-to-string"; // YJ
Index: ClientSML/include/sml_ClientIdentifier.h
===================================================================
--- ClientSML/include/sml_ClientIdentifier.h	(revision 6965)
+++ ClientSML/include/sml_ClientIdentifier.h	(working copy)
@@ -40,7 +40,8 @@
 {
 	friend class Identifier ;	// Provide direct access to children.
 
-protected:
+//protected:
+public:
 	// The value for this id, which is a string identifier (e.g. I3)
 	// We'll use upper case for Soar IDs and lower case for client IDs
 	// (sometimes the client has to generate these before they are assigned by the kernel)
@@ -114,7 +115,8 @@
 	typedef std::list<WMElement*>::iterator ChildrenIter ;
 	typedef std::list<WMElement*>::const_iterator ChildrenConstIter ;
 
-protected:
+//protected:
+public:
 	// Two identifiers (i.e. two wmes) can share the same identifier value
 	// So each identifier has a pointer to a symbol object, but two could share the same object.
 	IdentifierSymbol* m_pSymbol ;
Index: ClientSML/include/sml_ClientTraceXML.h
===================================================================
--- ClientSML/include/sml_ClientTraceXML.h	(revision 6965)
+++ ClientSML/include/sml_ClientTraceXML.h	(working copy)
@@ -124,6 +124,8 @@
 	bool IsTagAddToPotentials() const ;
 	bool IsTagProhibitPreference() const ;
 	bool IsTagBacktraceResult() const ;
+	
+  bool IsTagLocalNegation() const	; // SBW 5/07
 
 	char const* GetBacktraceAlreadyBacktraced() const ;
 	char const* GetBacktraceSymbol1() const	;
Index: ClientSML/src/sml_ClientTraceXML.cpp
===================================================================
--- ClientSML/src/sml_ClientTraceXML.cpp	(revision 6965)
+++ ClientSML/src/sml_ClientTraceXML.cpp	(working copy)
@@ -219,6 +219,8 @@
 bool ClientTraceXML::IsTagProhibitPreference() const	{ return IsTag(sml_Names::kTagProhibitPreference) ; }
 bool ClientTraceXML::IsTagBacktraceResult() const		{ return IsTag(sml_Names::kTagBacktraceResult) ; }
 
+bool ClientTraceXML::IsTagLocalNegation() const				{ return IsTag(sml_Names::kTagLocalNegation) ; }
+
 char const* ClientTraceXML::GetBacktraceAlreadyBacktraced() const { return GetAttribute(sml_Names::kBacktracedAlready) ; }
 char const* ClientTraceXML::GetBacktraceSymbol1() const			  { return GetAttribute(sml_Names::kBacktraceSymbol1) ; }
 char const* ClientTraceXML::GetBacktraceSymbol2() const			  { return GetAttribute(sml_Names::kBacktraceSymbol2) ; }
Index: ConnectionSML/include/sml_Names.h
===================================================================
--- ConnectionSML/include/sml_Names.h	(revision 6965)
+++ ConnectionSML/include/sml_Names.h	(working copy)
@@ -201,6 +201,8 @@
     static char const* const kBacktracedAlready;
     static char const* const kBacktraceSymbol1;
     static char const* const kBacktraceSymbol2;
+    
+    static char const* const kTagLocalNegation; // SBW 5/07
 
     // numeric indifference stuff
     static char const* const kTagCandidate;
Index: ConnectionSML/src/sml_Names.cpp
===================================================================
--- ConnectionSML/src/sml_Names.cpp	(revision 6965)
+++ ConnectionSML/src/sml_Names.cpp	(working copy)
@@ -204,6 +204,8 @@
 char const* const sml_Names::kBacktraceSymbol1          = "symbol1";
 char const* const sml_Names::kBacktraceSymbol2          = "symbol2";
 
+char const* const sml_Names::kTagLocalNegation          = "local-negation"; // SBW 5/07
+
 // numeric indifference stuff
 char const* const sml_Names::kTagCandidate      = "candidate";
 char const* const sml_Names::kCandidateName     = "name";
Index: gSKI/src/gSKI_DoNotTouch.cpp
===================================================================
--- gSKI/src/gSKI_DoNotTouch.cpp	(revision 6965)
+++ gSKI/src/gSKI_DoNotTouch.cpp	(working copy)
@@ -34,6 +34,10 @@
 #include "xmlTraceNames.h" // for constants for XML function types, tags and attributes
 #include "gski_event_system_functions.h" // support for triggering XML events
 
+// YJ 2007-08-06
+// For parsing strcutre into unique string, used for TL project
+#include <set>
+
 //#include "../../SoarIO/ConnectionSML/include/sock_Debug.h"
 
 extern Bool print_sym (agent* thisAgent, void *item, FILE* f);
@@ -2648,7 +2652,9 @@
 
 			pSoarAgent->chunk_count = count;
 		}
+		
 
+
 		void TgDWorkArounds::SeedRandomNumberGenerator(unsigned long int* pSeed)
 		{
 			if (pSeed) {
@@ -2657,5 +2663,116 @@
 			}
 			SoarSeedRNG();
 		}
+		
+		// YJ 2007-08-06
+		// For parsing strcutre into unique string, used for TL project
+		// copy symbol into string
+		std::string symbol_constant_to_string(agent* thisAgent, Symbol* s){
+
+			char sym_char[1000];
+			symbol_to_string (thisAgent, s, TRUE, sym_char, 1000);
+			return std::string(sym_char);
+		}
+		
+		#include <sstream>
+		int StringToInt(std::string str){
+			int n = 0;
+			std::istringstream str2int(str);
+			if (str2int.good()) {
+				str2int >> n;
+			}
+			return n;
+		}
+
+		std::string IntToString(int n){
+			std::stringstream ss;
+			std::string str;
+			ss << n;
+			ss >> str;
+
+			return str;
+		}
+		// YJ 2007-08-06
+		// For parsing strcutre into unique string, used for TL project
+		std::string TgDWorkArounds::StructToString(Agent* pIAgent, std::string id, std::string additional_feature, std::string excluded_feature){
+			std::string returned_str = "";
+			Agent* pAgent2 = (Agent*)(pIAgent);
+			agent* thisAgent = pAgent2->GetSoarAgent();
+			Symbol* identifier = find_identifier(thisAgent, id.at(0), StringToInt(id.substr(1)) );
+			if (identifier == NIL){
+				return returned_str;
+			}
+			std::vector<std::string> gs_features_array = std::vector<std::string>();
+			std::set<std::string> unique_gs_features = std::set<std::string>();
+
+			for (slot* s = identifier->id.slots; s != NIL; s = s->next){
+				std::string attr = symbol_constant_to_string(thisAgent, s->attr);
+				if(attr == excluded_feature || attr == "action-counter" || attr == "action-sequence"){
+						continue;
+				}
+				for (wme* w= s->wmes; w != NIL; w = w->next){
+					std::string attr = symbol_constant_to_string(thisAgent, w->attr);
+					std::string val = symbol_constant_to_string(thisAgent, w->value);
+					
+					// GS features must has two levels, the first level value is of identifier type
+					if(w->value->common.symbol_type == IDENTIFIER_SYMBOL_TYPE){
+						std::string gs_feature = attr + " ";
+						
+						for(slot* feature_slot = w->value->id.slots; feature_slot != NIL; feature_slot = feature_slot->next){
+							for (wme* feature_w= feature_slot->wmes; feature_w != NIL; feature_w = feature_w->next){
+								std::string feature_attr = symbol_constant_to_string(thisAgent, feature_w->attr);
+								std::string feature_val = symbol_constant_to_string(thisAgent, feature_w->value);
+								// GS features must has two levels, the second level value is of constant types
+								if(feature_w->value->common.symbol_type == SYM_CONSTANT_SYMBOL_TYPE ||
+									feature_w->value->common.symbol_type == INT_CONSTANT_SYMBOL_TYPE ||
+									feature_w->value->common.symbol_type == FLOAT_CONSTANT_SYMBOL_TYPE){
+										gs_feature = gs_feature + "^" + feature_attr + " " + feature_val+" ";
+								}
+							}
+						}
+						
+						if(unique_gs_features.find(gs_feature) == unique_gs_features.end()){ // avoid duplicated features
+							unique_gs_features.insert(gs_feature);
+							gs_features_array.push_back(gs_feature);
+						}
+					}
+					
+				}
+			}
+
+			sort(gs_features_array.begin(), gs_features_array.end()); // get canonical ordering for all unique features
+			
+			std::string gs_str = additional_feature;
+			for(int i=0; i<gs_features_array.size(); ++i){
+				gs_str += "(" + gs_features_array[i] + ")";
+			}
+
+			unsigned gs_hash_value;
+			std::map<std::string, int>::iterator itr = thisAgent->gs_to_int->find(gs_str);
+			if(itr != thisAgent->gs_to_int->end()){
+				gs_hash_value = itr->second;
+			}
+			else{
+				thisAgent->int_to_gs->push_back(gs_str);
+				gs_hash_value = thisAgent->int_to_gs->size() - 1;
+				thisAgent->gs_to_int->insert(std::pair<std::string, int>(gs_str, gs_hash_value));
+				
+			}
+
+			returned_str = IntToString(gs_hash_value);
+
+			return returned_str;
+		}
+
+		std::string TgDWorkArounds::IdToStruct(Agent* pIAgent, int hash_id){
+			std::string returned_str = "";
+			Agent* pAgent2 = (Agent*)(pIAgent);
+			agent* thisAgent = pAgent2->GetSoarAgent();
+
+			if(hash_id >= thisAgent->int_to_gs->size()){
+				return "";
+			}
+			return thisAgent->int_to_gs->at(hash_id);
+		}
 	}// class
 }// namespace
Index: gSKI/src/gSKI_DoNotTouch.h
===================================================================
--- gSKI/src/gSKI_DoNotTouch.h	(revision 6965)
+++ gSKI/src/gSKI_DoNotTouch.h	(working copy)
@@ -118,6 +118,10 @@
 		 void SetChunkCount(Agent* pIAgent, unsigned long count);
 
 		 void SeedRandomNumberGenerator(unsigned long int* pSeed);
+		 // YJ 2007-08-06
+		 // For parsing strcutre into unique string, used for TL project
+		 std::string StructToString(Agent* pIAgent, std::string id, std::string additional_feature = "",  std::string excluded_feature = "");
+		 std::string IdToStruct(Agent* pIAgent, int hash_id);
 	  };
    }
 }
Index: SoarKernel/include/agent.h
===================================================================
--- SoarKernel/include/agent.h	(revision 6965)
+++ SoarKernel/include/agent.h	(working copy)
@@ -30,7 +30,10 @@
 #include "lexer.h"
 #include "chunk.h"
 #include "callback.h"
-
+ // YJ 2007-08-06
+// For parsing strcutre into unique string, used for TL project
+#include <map>
+#include <vector>
 /* JC ADDED: Included to allow gski callbacks */
 #include "gski_event_system_data.h"
 
@@ -122,6 +125,12 @@
 typedef char * test;
 
 typedef struct agent_struct {
+	// YJ 2007-08-06
+		// For parsing strcutre into unique string, used for TL project
+	
+	std::map<std::string, int>* gs_to_int;
+	std::vector<std::string>* int_to_gs;
+
   /* After v8.6.1, all conditional compilations were removed
    * from struct definitions, including the agent struct below
    */
@@ -260,6 +269,9 @@
   Symbol            * type_symbol;
   Symbol            * wait_symbol;   /* REW:  10.24.97 */
 
+  Symbol            * item_count_symbol; // SBW 5/07
+
+
   /* RPM 9/06 begin */
   Symbol			* input_link_symbol;
   Symbol			* output_link_symbol;
Index: SoarKernel/include/decide.h
===================================================================
--- SoarKernel/include/decide.h	(revision 6965)
+++ SoarKernel/include/decide.h	(working copy)
@@ -103,6 +103,9 @@
 /* These prototypes moved here from chunk.cpp -ajc (5/3/02) */
 extern byte type_of_existing_impasse (agent* thisAgent, Symbol *goal);
 
+// SBW 5/07 added prototype
+unsigned int count_candidates(preference * candidates);
+
 #ifdef __cplusplus
 }
 #endif
Index: SoarKernel/include/xmlTraceNames.h
===================================================================
--- SoarKernel/include/xmlTraceNames.h	(revision 6965)
+++ SoarKernel/include/xmlTraceNames.h	(working copy)
@@ -158,6 +158,8 @@
 	static char const* const kBacktracedAlready         = "already-backtraced";
 	static char const* const kBacktraceSymbol1          = "symbol1";
 	static char const* const kBacktraceSymbol2          = "symbol2";
+	
+  static char const* const kTagLocalNegation          = "local-negation" ; // SBW 5/07
 
 	// numeric indifference stuff
 	static char const* const kTagCandidate      = "candidate";
Index: SoarKernel/src/agent.cpp
===================================================================
--- SoarKernel/src/agent.cpp	(revision 6965)
+++ SoarKernel/src/agent.cpp	(working copy)
@@ -260,6 +260,11 @@
   newAgent->lexeme.id_letter = 'A';
   newAgent->lexeme.id_number = 0;
 
+  // YJ 2007-08-06
+// For parsing strcutre into unique string, used for TL project
+  newAgent->gs_to_int = new std::map<std::string,int>;
+  newAgent->int_to_gs = new std::vector<std::string>;
+
   /* Initializing all the timer structures */
   reset_timer(&(newAgent->start_total_tv));
   reset_timer(&(newAgent->total_cpu_time));
@@ -376,6 +381,10 @@
   }
 
   /* Free structures stored in agent structure */
+   // YJ 2007-08-06
+// For parsing strcutre into unique string, used for TL project
+  free(delete_agent->gs_to_int);
+  free(delete_agent->int_to_gs);
   free(delete_agent->name);
   free(delete_agent->top_dir_stack->directory);
   free(delete_agent->top_dir_stack);
Index: SoarKernel/src/backtrace.cpp
===================================================================
--- SoarKernel/src/backtrace.cpp	(revision 6965)
+++ SoarKernel/src/backtrace.cpp	(working copy)
@@ -21,7 +21,6 @@
                         Backtracing routines
    ==================================================================== */
 
-
 #include "backtrace.h"
 #include "mem.h"
 #include "kernel.h"
@@ -691,3 +690,21 @@
 
   return TRUE;
 }
+
+// sbw 5/4/07
+// fuction to report negated conditions that are overgeneral
+// this is here (as opposed to chunk.cpp) since this file has all the right
+// includes for correct output
+
+void report_local_negation (agent* thisAgent, condition* c) {
+    // use the same code as the backtracing above
+    list* negated_to_print = NIL;
+	  push (thisAgent, c, negated_to_print);
+    
+    print_string (thisAgent, "\nLocal negation found:\n");
+    gSKI_MakeAgentCallbackXML(thisAgent, kFunctionBeginTag, kTagLocalNegation);
+    print_consed_list_of_conditions (thisAgent, negated_to_print, 2);
+    gSKI_MakeAgentCallbackXML(thisAgent, kFunctionEndTag, kTagLocalNegation);
+  
+    free_list (thisAgent, negated_to_print);
+}
Index: SoarKernel/src/backtrace.h
===================================================================
--- SoarKernel/src/backtrace.h	(revision 6965)
+++ SoarKernel/src/backtrace.h	(working copy)
@@ -53,6 +53,8 @@
                                              condition *trace_cond,
                                              int indent);
 
+void report_local_negation (agent* thisAgent, condition* c);
+
 #ifdef __cplusplus
 }
 #endif
Index: SoarKernel/src/chunk.cpp
===================================================================
--- SoarKernel/src/chunk.cpp	(revision 6965)
+++ SoarKernel/src/chunk.cpp	(working copy)
@@ -471,6 +471,16 @@
       prev_cc = cc;
     } else {
       /* --- not in TC, so discard the condition --- */
+
+      // this chunk will be overgeneral! don't create it
+      
+      // SBW 5/07
+      // report what local negations are preventing the chunk,
+      // and set flags like we saw a ^quiescence t so it won't be created
+      //report_local_negation (thisAgent, cc->cond); // in backtrace.cpp FIXME
+      thisAgent->quiescence_t_flag = TRUE;
+      thisAgent->variablize_this_chunk = FALSE;
+
       free_with_pool (&thisAgent->chunk_cond_pool, cc);
     }
   }
Index: SoarKernel/src/decide.cpp
===================================================================
--- SoarKernel/src/decide.cpp	(revision 6965)
+++ SoarKernel/src/decide.cpp	(working copy)
@@ -1861,6 +1861,7 @@
   wme *w, *next_w;
   preference *cand;
   preference *bt_pref;
+  unsigned int item_count = count_candidates(items); // SBW 5/07
 
   /* --- reset flags on existing items to "NOTHING" --- */
   for (w=id->id.impasse_wmes; w!=NIL; w=w->next)
@@ -1887,6 +1888,15 @@
         remove_wme_from_wm (thisAgent, w);
       }
     }
+
+    // SBW 5/07
+    // remove item-count WME if it exists
+    else if (w->attr==thisAgent->item_count_symbol) {
+      remove_from_dll (id->id.impasse_wmes, w, next, prev);
+      symbol_remove_ref (thisAgent, w->value); // remove the reference to the integer constant
+      remove_wme_from_wm (thisAgent, w);
+    }
+
     w = next_w;
   }
 
@@ -1904,6 +1914,17 @@
       add_impasse_wme (thisAgent, id, thisAgent->item_symbol, cand->value, bt_pref);
     }
   }
+
+  // SBW 5/07
+  // update the item-count WME
+  // detect relevant impasses by having more than one item
+  if (item_count > 0) {
+    add_impasse_wme (thisAgent, id, thisAgent->item_count_symbol, 
+                     make_int_constant(thisAgent, item_count), NIL);
+  }
+  // TODO does the int constant get its reference removed when the impasse goes
+  // away?
+
 }
 
 /* ------------------------------------------------------------------
Index: SoarKernel/src/mem.cpp
===================================================================
--- SoarKernel/src/mem.cpp	(revision 6965)
+++ SoarKernel/src/mem.cpp	(working copy)
@@ -237,7 +237,7 @@
   we shouldn't check for every block added to any pool, since that is unduly expensive 
   can we keep a block counter on the agent and check it modulo some function of the limit?
    */
- /*
+ 
   total = 0;
   for (i=0; i<NUM_MEM_USAGE_CODES; i++) total += thisAgent->memory_for_usage[i];
   
@@ -250,7 +250,7 @@
 	         thisAgent->sysparams[MAX_MEMORY_USAGE_SYSPARAM]);
 	}
  
- */
+ 
 
   /* --- link up the new entries onto the free list --- */
   interleave_factor = DEFAULT_INTERLEAVE_FACTOR;
Index: SoarKernel/src/symtab.cpp
===================================================================
--- SoarKernel/src/symtab.cpp	(revision 6965)
+++ SoarKernel/src/symtab.cpp	(working copy)
@@ -572,6 +572,10 @@
   thisAgent->constraint_failure_symbol = make_sym_constant (thisAgent, "constraint-failure");
   thisAgent->no_change_symbol = make_sym_constant (thisAgent, "no-change");
   thisAgent->multiple_symbol = make_sym_constant (thisAgent, "multiple");
+  
+  // SBW 5/07
+  thisAgent->item_count_symbol = make_sym_constant (thisAgent, "item-count");
+
   thisAgent->conflict_symbol = make_sym_constant (thisAgent, "conflict");
   thisAgent->tie_symbol = make_sym_constant (thisAgent, "tie");
   thisAgent->item_symbol = make_sym_constant (thisAgent, "item");
@@ -639,6 +643,9 @@
   release_helper(thisAgent,&(thisAgent->s_context_variable));
   release_helper(thisAgent,&(thisAgent->o_context_variable));
 
+  // SBW 5/07
+  release_helper(thisAgent,&(thisAgent->item_count_symbol));
+
   /* REW: begin 10.24.97 */
   release_helper(thisAgent,&(thisAgent->wait_symbol));
   /* REW: end   10.24.97 */
