source blocks_selection.soar

sp {propose*init-blocksworld
   (state <s> ^superstate nil
             -^name)
-->
   (<s> ^operator <o> + >)
   (<o> ^name init-blocksworld)}

# (role ROBOT)
# (init (clear b))
# (init (clear c))
# (init (on c a))
# (init (table a))
# (init (table b))
# (init (step 1))
#(succ 1 2)
#(succ 2 3)
#(succ 3 4)
sp {apply*init-blocksworld
   (state <s> ^operator <o>
              ^io.input-link <in>)
   (<o> ^name init-blocksworld)
-->
   (<s> ^name blocksworld
        ^gs <gs>
        ^facts <facts>)
   (<gs> ^role ROBOT
         ^clear <clear1>
         ^clear <clear2>
         ^on    <on1>
         ^table <table1>
         ^table <table2>
         ^step  <step1>)
#   (<in> ^last-moves <last-moves>)
#   (<last-moves> ^player1 <p1-move>)
   (<clear1> ^p1 B)
   (<clear2> ^p1 C)
   (<on1> ^p1 C
          ^p2 A)
   (<table1> ^p1 A)
   (<table2> ^p1 B)
   (<step1> ^p1 1)
   (<facts> ^succ <succ-fact-1>
            ^succ <succ-fact-2>
            ^succ <succ-fact-3>)
   (<succ-fact-1> ^p1 1
                  ^p2 2)
   (<succ-fact-2> ^p1 2
                  ^p2 3)
   (<succ-fact-3> ^p1 3
                  ^p2 4)}

  
#(<= (next (on ?x ?y))
#    (does ROBOT (s ?x ?y)))
sp {propose*change-state-stack
   (state <s> ^name blocksworld
              ^gs <gs>
              ^io.input-link.last-moves.ROBOT <move>)
   (<move> ^S <stack-move>)
   (<stack-move> ^p1 <p1>
                 ^p2 <p2>)
  -{(<gs> ^on <on-relation>)
    (<on-relation> ^p1 <p1>
                   ^p2 <p2>)}
-->
   (<s> ^operator <o> + > =)
   (<o> ^name change-state-stack
        ^p1 <p1>
        ^p2 <p2>)}

sp {apply*change-state-stack
   (state <s> ^name blocksworld
              ^gs <gs>
              ^operator <o>)
   (<o> ^name change-state-stack
        ^p1 <p1>
        ^p2 <p2>)
-->
   (<gs> ^on <on1>)
   (<on1> ^p1 <p1>
          ^p2 <p2>)}

# Frame axioms for on:
#
#(<= (next (on ?x ?y))
#    (does ROBOT (u ?u ?v))
#    (true (on ?x ?y))
#    (distinct ?u ?x))
#
#(<= (next (on ?x ?y))
#    (does ROBOT (s ?u ?v))
#    (true (on ?x ?y)))

sp {propose*remove-on
   (state <s> ^name blocksworld
              ^gs <gs>
              ^io.input-link.last-moves.ROBOT <move>)
   (<gs> ^on <on-relation>)
   (<on-relation> ^p1 <x>
                  ^p2 <y>)
  -{(<move> ^U <unstack-move>)
    (<unstack-move> ^p1 { <u> <> <x> }
                    ^p2 <v>)}
   (<move> -^S)
-->
   (<s> ^operator <o> + > =)
   (<o> ^name remove-on
        ^relation <on-relation>)}

sp {apply*remove-on
   (state <s> ^name blocksworld
              ^gs <gs>
              ^operator <o>)
   (<o> ^name remove-on
        ^relation <on-relation>)
-->
   (<gs> ^on <on-relation> -)}

#(<= (next (table ?x))
#    (does ROBOT (u ?x ?y)))

sp {propose*change-state-unstack-to-table
   (state <s> ^name blocksworld
              ^gs <gs>
              ^io.input-link.last-moves.ROBOT <move>)
   (<move> ^U <unstack-move>)
   (<unstack-move> ^p1 <x>
                   ^p2 <y>)
  -{(<gs> ^table <table-relation>)
    (<table-relation> ^p1 <x>)}
-->
   (<s> ^operator <o> + > =)
   (<o> ^name change-state-unstack-to-table
        ^p1 <x>)}

sp {apply*change-state-unstack-to-table
   (state <s> ^name blocksworld
              ^gs <gs>
              ^operator <o>)
   (<o> ^name change-state-unstack-to-table
        ^p1 <x>)
-->
   (<gs> ^table <table-relation>)
   (<table-relation> ^p1 <x>)}

# Frame axioms for table:
#
#(<= (next (table ?x))
#    (does ROBOT (u ?u ?v))
#    (true (table ?x)))
#
#(<= (next (table ?x))
#    (does ROBOT (s ?u ?v))
#    (true (table ?x))
#    (distinct ?u ?x))

sp {propose*remove-table
   (state <s> ^name blocksworld
              ^gs <gs>
              ^io.input-link.last-moves.ROBOT <move>)
   (<gs> ^table <table-relation>)
   (<table-relation> ^p1 <x>)
  -{(<move> ^S <stack-move>)
    (<stack-move> ^p1 { <u> <> <x> }
                  ^p2 <v>)}
   (<move> -^U)
-->
   (<s> ^operator <o> + > =)
   (<o> ^name remove-table
        ^relation <table-relation>)}

sp {apply*remove-table
   (state <s> ^name blocksworld
              ^gs <gs>
              ^operator <o>)
   (<o> ^name remove-table
        ^relation <table-relation>)
-->
   (<gs> ^table <table-relation> -)}


#(<= (next (clear ?y))
#    (does ROBOT (u ?x ?y)))

sp {propose*change-state-clear
   (state <s> ^name blocksworld
              ^gs <gs>
              ^io.input-link.last-moves.ROBOT <move>)
   (<move> ^U <unstack-move>)
   (<unstack-move> ^p1 <x>
                   ^p2 <y>)
  -{(<gs> ^clear <clear-relation>)
    (<clear-relation> ^p1 <y>)}
-->
   (<s> ^operator <o> + > =)
   (<o> ^name change-state-clear
        ^p1 <y>)}

sp {apply*change-state-clear
   (state <s> ^name blocksworld
              ^gs <gs>
              ^operator <o>)
   (<o> ^name change-state-clear
        ^p1 <y>)
-->
   (<gs> ^clear <clear-relation>)
   (<clear-relation> ^p1 <y>)}

# Frame axioms for clear:
#
#(<= (next (clear ?x))
#    (does ROBOT (u ?u ?v))
#    (true (clear ?x)))
#
#(<= (next (clear ?y))
#    (does ROBOT (s ?u ?v))
#    (true (clear ?y))
#    (distinct ?v ?y))

sp {propose*remove-clear
   (state <s> ^name blocksworld
              ^gs <gs>
              ^io.input-link.last-moves.ROBOT <move>)
   (<gs> ^clear <clear-relation>)
   (<clear-relation> ^p1 <x>)
  -{(<move> ^S <stack-move>)
    (<stack-move> ^p1 <u> 
                  ^p2 { <v> <> <x> })}
   (<move> -^U)
-->
   (<s> ^operator <o> + > =)
   (<o> ^name remove-clear
        ^relation <clear-relation>)}

sp {apply*remove-clear
   (state <s> ^name blocksworld
              ^gs <gs>
              ^operator <o>)
   (<o> ^name remove-clear
        ^relation <clear-relation>)
-->
   (<gs> ^clear <clear-relation> -)}


#(<= (next (step ?y))
#    (true (step ?x))
#    (succ ?x ?y))

sp {propose*change-state-increment-step
   (state <s> ^name blocksworld
              ^increment-step-token <ist>
              ^gs <gs>
              ^facts <facts>)
   (<gs> ^step <step-relation>)
   (<step-relation> ^p1 <x>)
   (<facts> ^succ <succ-fact>)
   (<succ-fact> ^p1 <x>
                ^p2 <y>)
  -{(<gs> ^step <step-relation-1>)
    (<step-relation-1> ^p1 <y>)}
-->
   (<s> ^operator <o> + > =)
   (<o> ^name change-state-increment-step
        ^p1 <y>)}

sp {apply*change-state-increment-step
   (state <s> ^name blocksworld
              ^increment-step-token <ist>
              ^gs <gs>
              ^operator <o>)
   (<o> ^name change-state-increment-step
        ^p1 <y>)
-->
   (<gs> ^step <step-relation>)
   (<step-relation> ^p1 <y>)
   (<s> ^increment-step-token <ist> -)}


#(<= (legal ROBOT (s ?x ?y))
#    (true (clear ?x))
#    (true (table ?x))
#    (true (clear ?y))
#    (distinct ?x ?y))

sp {propose*act-stack
   (state <s> ^name blocksworld
              ^gs <gs>
              ^io.output-link <out>)
   (<gs> ^clear <clear-relation>
         ^table <table-relation>
         ^clear <clear-relation-1>)
   (<clear-relation> ^p1 <x>)
   (<table-relation> ^p1 <x>)
   (<clear-relation-1> ^p1 { <y> <> <x> })
  -(<out> ^<cmd-name> <cmd>)
-->
   (<s> ^operator <o> + < =)
   (<o> ^name act-stack
        ^p1 <x>
        ^p2 <y>)}

sp {apply*act-stack
   (state <s> ^name blocksworld
              ^io.output-link <out>
              ^operator <o>)
   (<o> ^name act-stack
        ^p1 <x>
        ^p2 <y>)
-->
   (<out> ^S <stack-action>)
   (<stack-action> ^p1 <x>
                   ^p2 <y>)}

#(<= (legal ROBOT (u ?x ?y))
#    (true (clear ?x))
#    (true (on ?x ?y)))

sp {propose*act-unstack
   (state <s> ^name blocksworld
              ^gs <gs>
              ^io.output-link <out>)
   (<gs> ^clear <clear-relation>
         ^on <on-relation>)
   (<clear-relation> ^p1 <x>)
   (<on-relation> ^p1 <x>
                  ^p2 <y>)
  -(<out> ^<cmd-name> <cmd>)
-->
   (<s> ^operator <o> + < =)
   (<o> ^name act-unstack
        ^p1 <x>
        ^p2 <y>)}

sp {apply*act-unstack
   (state <s> ^name blocksworld
              ^io.output-link <out>
              ^operator <o>)
   (<o> ^name act-unstack
        ^p1 <x>
        ^p2 <y>)
-->
   (<out> ^U <unstack-action>)
   (<unstack-action> ^p1 <x>
                     ^p2 <y>)}


#(<= (goal ROBOT 100)
#    (true (on a b))
#    (true (on b c)))

#(<= (goal ROBOT 0)
#    (not (true (on a b))))

#(<= (goal ROBOT 0)
#    (not (true (on b c))))

#(<= terminal
#    (true (step 4)))
sp {halt*step-4
   (state <s> ^name blocksworld
              ^gs <gs>)
   (<gs> ^step <step-relation>)
   (<step-relation> ^p1 4)
-->
   (halt)}

#(<= terminal
#    (true (on a b))
#    (true (on b c)))
sp {halt*stacked
   (state <s> ^name blocksworld
              ^gs <cgs>)
   (<cgs> ^on <on-relation-1>
          ^on <on-relation-2>)
   (<on-relation-1> ^p1 a
                    ^p2 b)
   (<on-relation-2> ^p1 b
                    ^p2 c)
-->
   (halt)}


sp {propose*progress-state
   (state <s> ^name blocksworld
             -^increment-step-token
              ^io.output-link.<cmd-name> <cmd>)
-->
   (<s> ^operator <o> + <)
   (<o> ^name progress-state)}

sp {apply*progress-state
   (state <s> ^name blocksworld
              ^io.output-link <out>
              ^operator <o>)
   (<out> ^<cmd-name> <cmd>)
   (<o> ^name progress-state)
-->
   (<s> ^increment-step-token <ist>)
   (<out> ^<cmd-name> <cmd> -)}


# switch the current game state with the next game state
##.. sp {propose*switch
##..    (state <s> ^name blocksworld
##..               ^curr-gs <cgs>
##..               ^next-gs <ngs>
##..               ^io.output-link <out>)
##..    (<out> ^<cmd-name> <last-cmd>)
##.. -->
##..    (<s> ^operator <o> + =)
##..    (<o> ^name switch)}

##.. sp {apply*switch
##..    (state <s> ^name blocksworld
##..               ^curr-gs <cgs>
##..               ^next-gs <ngs>
##..               ^io.output-link <out>
##..               ^operator.name switch)
##..    (<out> ^<cmd-name> <last-cmd>)
##.. -->
##..    (<s> ^curr-gs <ngs>)
##..    (<s> ^next-gs <new-ngs>)
##..    (<s> ^curr-gs <cgs> -)
##..    (<s> ^next-gs <ngs> -)
##..    (<out> ^<cmd-name> <last-cmd> -)
##..    (<out> ^reset-last-move <rlm>)}

##.. sp {test-link-stack
##..    (state <s> ^name blocksworld
##..               ^io.input-link.last-moves.player1 <p1-move>
##..               ^io.output-link <out>)
##..    (<out> ^S <stack-cmd>)
##..    (<stack-cmd> ^p1 <x>
##..                 ^p2 <y>)
##.. -->
##..    (<stack-cmd> ^status complete)
##..    (<p1-move> ^name s
##..               ^p1 <x>
##..               ^p2 <y>)}


##.. sp {test-link-unstack
##..    (state <s> ^name blocksworld
##..               ^io.input-link.last-moves.player1 <p1-move>
##..               ^io.output-link <out>)
##..    (<out> ^U <unstack-cmd>)
##..    (<unstack-cmd> ^p1 <x>
##..                   ^p2 <y>)
##.. -->
##..    (<unstack-cmd> ^status complete)
##..    (<p1-move> ^name u
##..               ^p1 <x>
##..               ^p2 <y>)}

##.. sp {remove-last-command
##..    (state <s> ^name blocksworld
##..               ^io.output-link <out>
##..               ^operator <o>)
##..    (<out> ^<cmd-name> <last-cmd>)
##..    (<last-cmd> ^status complete)
##.. -->
##..    (<out> ^<cmd-name> <last-cmd> -)}


