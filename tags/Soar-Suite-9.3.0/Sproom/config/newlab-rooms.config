//////////////////////////////////////////////////////////
// Top-level mode switch
// mixed-mode is sim except real hardware listens to commands and laser data is a min merge
mixed-mode = false;

//////////////////////////////////////////////////////////
// lcm-spy, set enabled true to enable
lcm-spy {
	enabled = false;
	
	// args = { yada, yada };
}

//////////////////////////////////////////////////////////
command {
	productions = "agents/robot1/clean-house-new.soar";
	spawnDebugger = true;

	// limitLinVelMax
	// limitLinVelMin
	// limitAngVelMax
	// limitAngVelMin
	// geomLength
	// geomWidth
	// geomHeight
	// geomWheelbase
	// lengthUnits
	// speedUnits
	// angleUnits
	// angleResolution
	// poseTranslation
	// headingGains
	// angularGains
	// linearGains
	// rangeCount
	// fieldOfView
	// visibleSeconds
	// manipulationDistance
	// gamepadZeroThreshold
	// lidarCacheTimeSeconds
}

//////////////////////////////////////////////////////////
// mixed-mode only
splinter {
	// tickMeters
	// baselineMeters
	// maxThrottleAccelleration
	// updateHz
	orcHostname = "192.168.237.7";
	ports = [ 1, 0 ];
	invert = [ true, false ];
	// captureOdometry
}

//////////////////////////////////////////////////////////
// This is all generated from the image file.
metadata {
	// image file newlab.png
	// 165 inches (4.191 meters) by 256 inches (6.5024 meters)
	// rounded to 4.2 meters (42 pixels) by 6.5 meters (65 pixels)

	units = pixels;
	origin = [ 34, 53 ];
	scale = 0.1;

	// Areas, rectangles with optional door tag
	areas = [ one, one-two-w, one-two-e, two, two-three, two-four, two-five, three, four, five ];

	one {
		pos = [ 11, 1 ]; size = [ 42, 17 ];
	}
	one-two-w {
		pos = [ 11, 18 ]; size = [ 11, 1 ];
		door = true;
	}
	one-two-e {
		pos = [ 44, 18 ]; size = [ 9, 1 ];
		door = true;
	}
	two {
		pos = [ 11, 19 ]; size = [ 42, 23 ];
	}
	two-three {
		pos = [ 11, 42 ]; size = [ 11, 1 ];
		door = true;
	}
	two-four {
		pos = [ 28, 42 ]; size = [ 9, 1 ];
		door = true;
	}
	two-five {
		pos = [ 46, 42 ]; size = [ 7, 1 ];
		door = true;
	}
	three {
		pos = [ 11, 43 ]; size = [ 11, 20 ];
	}
	four {
		pos = [ 23, 43 ]; size = [ 22, 20 ];
	}
	five {
		pos = [ 46, 43 ]; size = [ 7, 20 ];
	}
	
	// Gateways, points connecting two areas. 
	//	to: the connected areas
	//	dir: what wall the gateway is on in the corresponding area in "to"
	gateways = [ g-one-sw, g-one-se, g-two-nw, g-two-ne, g-two-three, g-two-four, g-two-five, g-three, g-four, g-five ];

	g-one-sw {
		to = [ one, one-two-w ];
		dir = [ south, north ];
		pos = [ 16, 18 ];
	}
	g-one-se {
		to = [ one, one-two-e ];
		dir = [ south, north ];
		pos = [ 48, 18 ];
	}
	g-two-nw {
		to = [ one-two-w, two ];
		dir = [ south, north ];
		pos = [ 16, 18 ];
	}
	g-two-ne {
		to = [ one-two-e, two ];
		dir = [ south, north ];
		pos = [ 48, 18 ];
	}
	g-two-three {
		to = [ two, two-three ];
		dir = [ south, north ];
		pos = [ 16, 42 ];
	}
	g-two-four {
		to = [ two, two-four ];
		dir = [ south, north ];
		pos = [ 32, 42 ];
	}
	g-two-five {
		to = [ two, two-five ];
		dir = [ south, north ];
		pos = [ 49, 42 ];
	}
	g-three {
		to = [ two-three, three ];
		dir = [ south, north ];
		pos = [ 16, 42 ];
	}
	g-four {
		to = [ two-four, four ];
		dir = [ south, north ];
		pos = [ 32, 42 ];
	}
	g-five {
		to = [ two-five, five ];
		dir = [ south, north ];
		pos = [ 49, 42 ];
	}
	
	// Movable objects
	objects = [ object-a ];

	object-a {
		type = block;
		pos = [ 26, 9 ];
		size = [ 2, 2 ];
	}

	object-b {
		type = block;
		pos = [ 31, 33 ];
		size = [ 2, 2 ];
	}

	object-c {
		type = block;
		pos = [ 15, 53 ];
		size = [ 2, 2 ];
	}
}

//////////////////////////////////////////////////////////
viewer {
	viewobjects = [ lidars, robot, remotelog, mapimage, waypoints, areas, obstacles ];

	robot {
		class = "april.viewer.ViewRobot";

		avatar {
			path = "config/meshmodels/cy.rwx";
			scale = 7;

			position = [ 0, 0, 0 ];
			rollpitchyaw_degrees = [ 90, 0, 90 ];
		}
	}

	remotelog {
		class = "april.viewer.RemoteLogEventHandler";
	}

	lidars {
		class = "april.viewer.ViewLaser";
	}

	lcmgl {
		class = "april.viewer.ViewLCMGL";
	}

	mapimage {
		class = "april.viewer.ViewMapImage";
		obstacles {
			image_path = "newlab-rooms.png";
			image_origin = [ 34, 53 ];
			meters_per_pixel = 0.1;
		}
	}

	waypoints {
		class = "april.viewer.ViewWaypoints";
	}

	areas {
		class = "april.viewer.ViewAreaDescriptions";
	}

	obstacles {
		class = "april.viewer.ViewObstaclesReadOnly";
	}    
}

//////////////////////////////////////////////////////////
// Simulator has two required sections: obstacles and simobjects. All
// other parameters are "discovered" through the simobjects reflection
// mechanism.
simulator {
	obstacles {
		image_path = "newlab-rooms.png";
		image_origin = [ 34, 53 ];
		meters_per_pixel = 0.1;
	}

	// Generic simulation instantiation: add a configuration block to
	// the list of "sims", then define the parameters in the
	// corresponding block. The block must have an entry named "class",
	// which specifies the java class that will be created and passed
	// the remainder of the arguments.
	simobjects = [ simsplinter, SIM_LIDAR_FRONT ];

	simsplinter {
		class = "april.sim.SimSplinter";
	}

	SIM_LIDAR_FRONT {
		class = "april.sim.SimLaser";

		degree0 = -90;
		degree_step = 1;
		nranges = 180;
		range_noise_m = 0.01;
		theta_noise_degrees = 0.25;
		max_range_m = 30;
		hz = 7;
	}
}

//////////////////////////////////////////////////////////
// the robot's coordinate frame has the vehicle at the origin, looking
// down the X axis, with +Y = left and +Z = up.
SIM_LIDAR_FRONT {
	position = [ 0, 0, 0.5 ];
	rollpitchyaw_degrees = [ 0, 0, 0 ];
	color = [1, 0, 0];
}

SICK_LIDAR_FRONT {
	position = [ 0, 0, 0.5 ];
	rollpitchyaw_degrees = [ 0, 0, 0 ];
	color = [0, 1, 0];
}

// This must be here for the viewer
LIDAR_LOWRES {
	position = [ 0, 0, 0.5 ];
	rollpitchyaw_degrees = [ 0, 0, 0 ];
	color = [0, 0, 1];
}

