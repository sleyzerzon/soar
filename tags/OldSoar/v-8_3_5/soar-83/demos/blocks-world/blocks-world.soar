### 
### FILE               : blocks-world.soar
###

###
### AUTHOR(1)          : John.E.Laird [ Soar 8.2 ]
###

###
### CREATED(1)         : Laird, et al. (1990). Soar User's Manual: Version 5.2
###

###
### MODIFIED(4)        : Mar 8, 1999   [ Soar 8.2] John E. Laird
### MODIFIED(3)        : Aug 22, 96   [ Soar 7.0.3 ] Sayan Bhattacharyya
### MODIFIED(2)        : Apr 26, 93   [ Soar 6.0.7 ] Aladin.Akyurek
### MODIFIED(1)        : Apr 24, 91   [ Soar 5.2.x ] Aladin.Akyurek
###

###
### Mar 8, 99          : Updated to run in Soar 8.2
###                    : Significantly rewrote
### Apr 26, 93         : Updated to run in Soar 6.0.7, 6.0.8.
### Apr 24, 91         : Modified to run to completion in Soar 5.2.
###

### State Diagram:
###   ontop
###     top-block
###       name (A/B/C/table)
###       type block/table
###     bottom-block (can be the table)
###       name (A/B/C/table)
###       type block/table
###   clear
###     name (A/B/C/table)
###     type block/table


###  Has a top problem space with a single operator to build a tower
###  which defines the desired state for the subgoal.

### This version does look ahead search using the selection space

pushd ../default
source simple.soar
source selection.soar
popd

# Change to learn -on to use learning
learn -off

multi-attributes ontop 3
multi-attributes clear 3
multi-attributes objects 4

###
### TOP PROBLEM SPACE:
### ELABORATE TOP STATE WITH INITIAL STATE
###   Modify actions to change initial state
###

sp {top-ps*elaborate*initial-state
	(state <s> ^superstate nil)
	-->
	(<s> ^ontop <ontop1> <ontop2> <ontop3> 
		  ^clear <clear1> <clear2> <clear3>
		  ^objects <blockA> <blockB> <blockC> <table>)
	(<ontop1> ^top-block <blockA> 
				 ^bottom-block <blockB>)
	(<ontop2> ^top-block <blockB> 
				 ^bottom-block <table>)
	(<ontop3> ^top-block <blockC> 
				 ^bottom-block <table>)
	(<clear1> ^object <blockA>)
	(<clear2> ^object <blockC>)
	(<clear3> ^object <table>)
	(<blockA> ^name A ^type block)
	(<blockB> ^name B ^type block)
	(<blockC> ^name C ^type block)
	(<table> ^name table ^type table)
	(write (crlf) |Initial state has A on B and B and C on the table.|)}

###
### TOP PROBLEM SPACE OPERATOR:
### BUILD-TOWER
###

sp {top-ps*propose*operator*build-tower
	(state <s> ^superstate nil
				  ^objects <blockA> <blockB> <blockC> <table>)
	(<blockA> ^name A ^type block)
	(<blockB> ^name B ^type block)
	(<blockC> ^name C ^type block)
	(<table> ^name table ^type table)
 -{(<s> ^ontop <ontopa1> <ontopa2> <ontopa3>)
	(<ontopa1> ^top-block <blockA> 
              ^bottom-block <blockB>)
	(<ontopa2> ^top-block <blockB> 
              ^bottom-block <blockC>)
	(<ontopa3> ^top-block <blockC> 
              ^bottom-block <table>)}
	-->
	(<s> ^operator <o>)
	(<o> ^name build-tower 
		  ^desired <ds>)
	(<ds> ^ontop <ontop1> <ontop2> <ontop3>)
	(<ontop1> ^top-block <blockA> 
				 ^bottom-block <blockB>)
	(<ontop2> ^top-block <blockB> 
				 ^bottom-block <blockC>)
	(<ontop3> ^top-block <blockC> 
				 ^bottom-block <table>)
	(write (crlf) |The goal is to get A on B on C on the table.|)}

###
### SUBGOAL BUILD-TOWER:
### DESIRED STATE
###

sp {build-tower*elaborate*state*desired-state
	(state <s> ^superstate <ts>)
	(<ts> ^operator <so>)
	(<so> ^name build-tower 
			^desired <ds>)
	-->
	(<s> ^desired <ds> 
		  ^world-state <ts>
		  ^name build-tower)}

###
### SUBGOAL BUILD-TOWER:
### PROBLEM SPACE
###
 
sp {build-tower*propose*space*blocks-world
	(state <s> ^name build-tower)
	-->
	(<s> ^problem-space <p>)
	(<p> ^name blocks-world
		  ^default-state-copy yes
		  ^two-level-attributes world-state
		  ^one-level-attributes last-operator)}


###
### BLOCKS-WORLD PROBLEM SPACE OPERATOR:
### MOVE-BLOCK
###
  
sp {blocks-world*propose*operator*move-block
	(state <s> ^problem-space.name blocks-world
				  ^world-state <ws>)
	(<ws> ^clear <clear1> <clear2>)
	(<clear1> ^object <blockA>)
	(<blockA> ^type block)
	(<clear2> ^object { <> <blockA> <blockB> })
 -{(<ws> ^ontop <ontop>)
	(<ontop> ^top-block <blockA>
				^bottom-block <blockB>)}  
	-->
	(<s> ^operator <o> + )
	(<o> ^name move-block
		  ^moving-block <blockA>
		  ^destination <blockB>)}

###
### BLOCKS-WORLD PROBLEM SPACE:
### OPERATOR IMPLEMENTATION
###
  
sp {blocks-world*apply*operator*move-block*remove-ontop
	(state <s>  ^operator <o>
					^world-state <ws>)
	(<ws> ^ontop <ontop>)
	(<ontop> ^top-block <mblock>
			  -^bottom-block <tblock>)
	(<o> ^moving-block <mblock> 
		  ^destination <tblock>)
	-->
	(<ws> ^ontop <ontop> -)}

sp {blocks-world*apply*operator*move-block*create-ontop
	(state <s> ^operator <o>
				  ^world-state <ws>)
	(<o> ^moving-block <mblock>
		  ^destination <tblock>)
	-->
	(<ws> ^ontop <ontop>)
	(<ontop> ^top-block <mblock>
				^bottom-block <tblock>)}

sp {blocks-world*apply*operator*move-block*remove-clear
	(state <s>  ^operator.destination <tblock>
					^world-state <ws>)
	(<ws> ^clear <clear>)
	(<clear> ^object <tblock>)
	-->
	(<ws> ^clear <clear> -)}

sp {blocks-world*apply*operator*move-block*create-clear
	(state <s>  ^operator <o>
					^world-state <ws>)
	(<ws> ^ontop <ontop>)
	(<ontop> ^top-block <mblock>
				^bottom-block { <> <tblock> <bblock>})
  -(<bblock> ^type table)
	(<o> ^moving-block <mblock>
		  ^destination <tblock>)
	-->
	(<ws> ^clear.object <bblock>)}

############

sp {blocks-world*apply*operator*remember*moved-block*a
	(state <s> ^operator.moving-block <mb>
				  ^world-state <ws>)
	(<ws> -^last-moved-block <mb>)
	-->
	(<ws> ^last-moved-block <mb>)}

sp {blocks-world*apply*operator*forget*last-moved-block
	(state <s>  ^operator.moving-block <> <lmb>
					^world-state <ws>)
	(<ws> ^last-moved-block <lmb>)
	-->
	(<ws> ^last-moved-block <lmb> - )}

###
### BLOCKS-WORLD PROBLEM SPACE: 
### SEARCH CONTROL
###

sp {blocks-world*evaluate-object*prefer*move-desired
	(state <s> ^operator <o> +
				  ^superstate.desired.ontop <dot>)
	(<o> ^name evaluate-object
		  ^object <ob>)
	(<dot> ^top-block <mb>
			 ^bottom-block <db>)
	(<ob> ^moving-block <mb>
			^destination <db>)
	-->
	(<s> ^operator <o> > )}

sp {blocks-world*evaluate-object*avoid*move-twice
	(state <s> ^operator <o> + 
				  ^world-state.last-moved-block <mb>)
	(<o> ^name evaluate-object
		  ^object.moving-block <mb>)
	-->
	(<s> ^operator <o> < )}

sp {blocks-world*reject*move-block*twice
	(state <s> ^problem-space.name blocks-world
				  ^operator <o> + 
				  ^world-state.last-moved-block <mb>)
	(<o> ^moving-block <mb>)
	-->
	(<s> ^operator <o> - )}

sp {blocks-world*failure*no-move
	(state <s> ^desired <d>
				  ^problem-space.name blocks-world)
	(state <ss> ^superstate <s>
					^quiescence t
					^impasse no-change
					^attribute state)
	--> 
	(<s> ^failure <d>)}


###
### BLOCKS-WORLD PROBLEM SPACE:
### STATE EVALUATION/GOAL TEST
###

sp {blocks-world*elaborate*state*success
	(state <s> ^desired <ds>
				  ^world-state <ws>)
	(<ws> ^ontop <ontopa1> 
			{ <> <ontopa1> <ontopa2> }
			{ <> <ontopa1> <> <ontopa2> <ontopa3> })
	(<ontopa1> ^top-block <blockA> 
				  ^bottom-block <blockB>)
	(<ontopa2> ^top-block <blockB> 
				  ^bottom-block <blockC>)
	(<ontopa3> ^top-block <blockC> 
				  ^bottom-block <table>)
	(<ds> ^ontop <ontop1> 
			{ <> <ontop1> <ontop2> }
			{ <> <ontop1> <> <ontop2> <ontop3> })
	(<ontop1> ^top-block <blockA> 
				 ^bottom-block <blockB>)
	(<ontop2> ^top-block <blockB> 
				 ^bottom-block <blockC>)
	(<ontop3> ^top-block <blockC> 
				 ^bottom-block <table>)
	-->
	(<s> ^success <ds>)}

###
### BLOCKS-WORLD PROBLEM SPACE: 
### MONITOR STATE AND OPERATORS
###

sp {blocks-world*monitor*world-state
	(state <s> ^world-state.ontop <ontop>)
	(<ontop> ^top-block.name <top-name>
				^bottom-block.name <bottom-name>)
	-->
	(write (crlf)
	|  ontop(| <top-name>
	|,| <bottom-name> |)|)}

sp {blocks-world*monitor*tied-operators*move-block
	(state <s> ^impasse tie 
              ^attribute operator 
              ^item <item>)
	(<item> ^name move-block
			  ^moving-block <mob>
			  ^destination <dob>)
	(<mob> ^name <mob-name>)
	(<dob> ^name <dob-name>)
	-->
	(write (crlf) 
	|  | <item> 
	|: move-block(| <mob-name> 
	|,| <dob-name> 
	|)|)}

sp {blocks-world*monitor*operator-application*move-block
	(state <s> ^operator <o>)
	(<o> ^name move-block
		  ^moving-block <mob>
		  ^destination <dob>)
	(<mob> ^name <mob-name>)
	(<dob> ^name <dob-name>)
	-->
	(write (crlf) 
	|  APPLIED | <o> 
	|: move-block(| <mob-name> 
	|,| <dob-name> 
	|)|)}

### eof of blocks-world.soar

