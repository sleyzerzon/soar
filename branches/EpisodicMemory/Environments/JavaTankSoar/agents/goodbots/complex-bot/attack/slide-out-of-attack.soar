echo "\nLoading attack/slide.soar "
## Under attack so move out of the way and turn off shields

sp {attack*propose*slide-out-of-attack
   (state <s> ^name attack
              ^top-state <ss>
              ^io.input-link.blocked.<ndir> no)
   (<ss> ^idirection <dir>
         ^side-direction.<dir> <ndir>
        -^idirection <ndir>)
   -->
   (write (crlf) |Move out of the way of an attack: | <ndir>)
   (<s> ^operator <o> + =, >)
   (<o> ^name slide-out-of-attack
        ^attack-direction <dir>
        ^direction <ndir>
        ^actions <a>)
   (<a> ^move.direction <ndir>
        ^shields.switch off
        ^radar.switch off)}

sp {attack*apply*slide-out-of-attack
   (state <s> ^operator <o>
              ^io.input-link.radar <r>)
   (<r> ^tank <t>)
   (<t> ^position center
        ^distance <d>)
 -{(<r> ^obstacle <ob>)
   (<ob> ^position <pos>
         ^distance <= <d>)}
   (<o> ^name slide-out-of-attack
        ^attack-direction forward
        ^actions <a>
        ^direction <pos>)
   -->
   (write (crlf) |Shoot missile on slide.|)
   (<a> ^fire.weapon missile)}

sp {attack*apply*slide-out-of-attack2
   (state <s> ^operator <o>
              ^top-state <ss>)
  (<ss> ^square <square>
        ^opposite-direction.<d> <od>)
   (<o> ^name slide-out-of-attack
        ^attack-direction <attack>
        ^direction <d>)
   -->
   (write (crlf) |Slide away for later pop back to re-attack: | <od> | Attack dir:| <attack>)
   (<ss> ^saved-slide-direction <x>)
   (<x> ^direction <od>
        ^avoid-square <square>
        ^attack-direction <attack>)}

sp {attack*apply*slide-out-of-attack*radar*distance
   (state <s> ^operator <o>
              ^io.input-link.radar.tank.distance <dist>
              ^top-state.saved-slide-direction <x>)
   (<o> ^name slide-out-of-attack
        ^attack-direction forward)
  -(<x> ^distance)
   -->
   (<x> ^distance <dist>)}

sp {attack*apply*slide-out-of-attack*smell*distance
   (state <s> ^operator.name slide-out-of-attack
             -^io.input-link.radar.tank
              ^io.input-link.smell.distance <dist>
              ^top-state.saved-slide-direction <x>)
  -(<x> ^distance)
   -->
   (<x> ^distance <dist>)}

sp {attack*apply*slide-out-of-attack*smell*distance*not-forward
   (state <s> ^operator <o>
              ^io.input-link.smell.distance <dist>
              ^top-state.saved-slide-direction <x>)
   (<o> ^name slide-out-of-attack
        ^attack-direction <> forward)
  -(<x> ^distance)
   -->
   (<x> ^distance <dist>)}

sp {attack*apply*slide-out-of-attack*time-to-hit
   (state <s> ^operator.name slide-out-of-attack
              ^io.input-link.clock <clock>
              ^top-state.saved-slide-direction <x>)
   (<x> ^distance <dist>
       -^hit-time)
    -->
   (write (crlf) |Hit Time |  (+ <clock> (/ <dist> 1.4)) | Clock: | <clock>)
   (<x> ^hit-time  (+ <clock> (/ <dist> 1.4))
        ^remove-hit-time (+ 1 (+ <clock> (/ <dist> 1.4))))}

sp {attack*select*slide-out-of-attack
   (state <s> ^operator <o1> + <o2> +)
   (<o1> ^name << slide-out-of-attack 
                  move-to-opening-fire >>)
   (<o2> ^name fire-missile)
   -->
   (<s> ^operator <o1> > <o2>)}


############ TURN TO EARLIER SLIDE THREAT

################################
### Propose Turn operator if rwaves is not from front
################################
sp {attack*propose*turn-after-slide*lr*forward
   (state <s> ^name attack
              ^top-state <ss>)
   (<ss> ^saved-slide-direction <ssd>
         ^opposite-direction.<tdir> <odir>)
   (<ssd> ^attack-direction { << left right >> <tdir>}
          ^direction forward)
   -->
   (write (crlf) |Turn to face: | <tdir> )
   (<s> ^operator <o> + =, >)
   (<o> ^name turn-after-slide
        ^new-direction <odir>
        ^actions.rotate.direction <tdir>)}

sp {attack*propose*turn-after-slide*lr*backward
   (state <s> ^name attack
              ^top-state.saved-slide-direction <ssd>)
   (<ssd> ^attack-direction { << left right >> <tdir>}
          ^direction backward)
   -->
   (write (crlf) |Turn to face: | <tdir> )
   (<s> ^operator <o> + =, >)
   (<o> ^name turn-after-slide
        ^new-direction <tdir>
        ^actions.rotate.direction <tdir>)}

sp {attack*propose*turn-after-slide*backward
   (state <s> ^name attack
              ^top-state.saved-slide-direction <ssd>)
   (<ssd> ^attack-direction backward
          ^direction <odir>)
   -->
   (write (crlf) |Turn to face: | <odir>)
   (<s> ^operator <o> + =, >)
   (<o> ^name turn-after-slide
        ^new-direction forward
        ^actions.rotate.direction <odir>)}

sp {attack*apply*turn*from-attack*correct
   (state <s> ^top-state.saved-slide-direction <ssd>
              ^operator <o>)
   (<ssd> ^direction <odir>)
   (<o> ^name turn-after-slide
        ^new-direction <ndir>)
   -->
   (write (crlf) |Correct saved-direction | <odir> | --> | <ndir>)
   (<ssd> ^direction <odir> -
          ^direction <ndir>)}


########## SLIDE AROUND CORNER OR BACK INTO FIGHT

sp {attack*propose*slide-at-corner
   (state <s> ^name attack
              ^io.input-link <il>
              ^top-state.saved-slide-direction <x>)
   (<il> ^blocked.<d> no
         ^clock <clock>)
   (<x> ^direction <d>
       -^hit-time > <clock>)
   -->
   (write (crlf) |Slide back : | <d>)
   (<s> ^operator <o> + =, >)
   (<o> ^name slide-attack
        ^actions <a>)
   (<a> ^fire.weapon missile
        ^move.direction <d>
        ^radar.switch on
        ^shields.switch on)}

sp {attack*remove*saved-slide-direction*old
   :o-support
   (state <s> ^name attack
              ^top-state <ss>
              ^io.input-link.clock <clock>)
   (<ss> ^saved-slide-direction <x>)
   (<x> ^remove-hit-time < <clock>)
   -->
   (write |Remove old slide structure.|)
   (<ss> ^saved-slide-direction <x> -)}

# Remove saved-slide-direction
sp {attack*apply*slide-at-corner  
   (state <s> ^top-state <ss>
              ^operator.name slide-attack)
   (<ss> ^saved-slide-direction <d>)
   -->
   (write (crlf) |Remove slide direction.|)
   (<ss> ^saved-slide-direction <d> -)}

########### DO NOT MOVE INTO SLIDE AREA ##########
sp {attack*select*avoid-move*slide-square
   (state <s> ^operator <o>
              ^top-state <ss>
              ^io.input-link.direction <dir>)
   (<ss> ^saved-slide-direction.avoid-square <sq>
         ^direction-map.<dir>.<tdir> <ndir>
         ^square.<ndir> <sq>)
   (<o> ^actions.move.direction <tdir>)
   -->
   (write |*** AVOID MOVING INTO DANGER AREA |)
   (<s> ^operator <o> -)}

########RETREAT
sp {attack*propose*slide-at-corner*retreat
   (state <s> ^top-state <ss>
              ^io.input-link <il>)
   (<ss> ^saved-slide-direction <x>
         ^opposite-direction.<d> <od>)
   (<il> ^blocked.<od> no
         ^energy 0)
   (<x> ^direction <d>)
   -->
   (write (crlf) |Retreat Slide away : | <od>)
   (<s> ^operator <o> + =, >)
   (<o> ^name slide-away
        ^actions <a>)
   (<a> ^move.direction <od>)}

####################################

sp {attack*propose*slide-away-from-death
   (state <s> ^io.input-link <il>
              ^top-state <ss>)
   (<ss> ^about-to-die *yes*
         ^square.<dir>.open *yes* 
         ^side-direction.forward <ndir>)
   (<il> ^direction <dir>
         ^smell.distance 1
         ^blocked <b>)
   (<b> ^forward yes
        ^<ndir> no)
   -->
   (write (crlf) |Move out of way before death.|)
   (<s> ^operator <o> + =, >)
   (<o> ^name slide-from-death
        ^actions <a>)
   (<a> ^move.direction <ndir>)}

sp {attack*apply*slide-from-death
   (state <s> ^operator <o>
              ^io.input-link.missiles > 0)
   (<o> ^name slide-from-death
        ^actions <a>)
   -->
   (write (crlf) |Shoot missile on slide.|)
   (<a> ^fire.weapon missile)}
