Mike Parent
ID# 7105-5529
EECS 498
Project 2

Agent Name: EighthBot



Agent Overview:

My Tank agent divides its behaviors into five broad categories,
1) Explore (aka "Wander")
2) Chase
3) Attack
4) Recharge - goto health/energy/missile power-up location
5) Retreat

It selects from these five sub-operators based upon threat levels, sighted enemies, and health/energy/missile resource levels.


######################################################################
#
#   Feature List
#
#####################################################################

1) Mapping 1: Environment
Files: (all files contained in 'mapping-elaborations' folder)
Description: Tank maintains internal map of all items detected on radar. This code was based on the mapping powerpoint lecture, but contains many custom rules.



2) Mapping 2: Energy and Health Recharging
Files: (all files within 'recharge' folder)
Description: Tank will automatically head towards Health/Energy rechargers when necessary. When sitting on a resource, tank will turn with radar on to look for enemies, since the tank is vulnerable while sitting on top of a charger.



3) Mapping 3: Missile Aquisition
Files: recharge/missiles.soar
Description: Tank will head towards the nearest detected missile powerup when necessary. This feature was much more difficult than Energy/Health Recharging because of the dynamic nature of missile-powerups. The tank knows when to "re-flood" the map to determine routes to the nearest missile power-ups.



4) Mapping 4: Environment Data
Files: attack/elaborations.soar, status-elaborations/enemy-sighted.soar
Description: The map is used to determine if an enemy is right next to the tank (i.e. the blocked sensor conflicts with the map data), and the map is also used to determine if a particular path to the enemy tank is blocked. (Used by the attack*slide-and-shoot sub-operator).



5) Parameters and Status
Files: elaborations/parameters.soar, status-elaborations/resources.soar
Description: Tank monitors its energy/health/missile status using according to a set of user-defined parameters. This allows easy tweaking of agent performance. The parameters are used to classify each of the three resource levels as critical, low, or high. These categories are used to determine agent sub-goals. (Ex: If energy is critical, the tank will attempt to move to a recharger.)



6) More Efficient, Coordinate-Based Radar
Files: elaborations/radar.soar
Description: Tank adjusts its radar power-setting according to its (x,y) position on the map. Depending on a tanks movement decision, the radar is automatically pre-set for optimal settings AFTER the move (ie if the tank is moving forward, the radar setting is reduced by 1). In addition, Tank will only use it's radar when absolutley necessary (attacking or turning down a new path in 'Explore' mode)



7) Forced Exploration
Files: status-elaborations/visit.soar, explore/move.soar, explore/turn.soar
Description: Tank records the last time that it visited each square on the map. When in "explore" mode, the Tank will attempt to move into a square that was visited the least recently. This allows the Tank to both avoid getting stuck in rooms and also forces the tank to eventually explore the entire map.



8) More Efficient Shields
Files:  elaborations/shields.soar
Description: Tank will turn on its shields if an enemy is 1 square (N, NE, E, SE, etc) away. This is a crucial rule, since the original "incoming/not-incoming" conditions for shield rules will not help when a missile is fired at point-blank range.



9) More Efficient Use of Sensors:
Files: status-elaborations/in-danger.soar, status-elaborations/enemy-sighted.soar, status-elaborations/enemy-detected.soar 
Description: Because the Tank has a variety of sensors, I have created rules that process all input and classify it into three categories:
1) in-danger  -   rwaves or incoming sensors set to true
2) enemy-detected - sound or smell
3) enemy-sighted - an enemy position has been pinpointed using radar, a map/blocked conflict, a combination of smell and sound inputs, or positioned remembered from current shoot-and-duck manuever.
By combining all input data into these three categories, my sub-goal rule conditions have become much simpler. In particular, determining what method of attack to use is extremely simplified, because each rule can ignore HOW an enemy was sighted due to the 'enemy-sighted' abstraction.



10) Resurrection Radar Settings
Files: elaborations/radar.soar
Description: When a tank is "resurrected", a simple rule turns radar on. This rule was not included in the tutorial bots. The radar is turned on corresponding to the (x,y) position, as described in the "Coordinate-Based Radar" feature.



11) Duck-and-Shoot
Files: attack/elaborations.soar, attack.soar, attack/remove-manuevers.soar, and all files within the shoot-and-duck sub-operator folder (stage-1-fire.soar, stage-2-duck.soar, stage-3-slide-back.soar)
Description: Tank will attempt to shoot at enemy target and then duck out of the way of incoming fire. To determine if this manuever is possible, the tank uses some very long rules (attack/elaborations.soar) In between each decision phase, the Tank will remember that it is currently in the "shoot-and-duck" manuever. In addition, the tank will calculate how long it needs to hide behind cover based upon the distance the enemie's missle has to travel.



12) Improved Attacking
Files: attack.soar, target-directly-behind.soar, slide-and-shoot.soar, turn-and-fire.soar
Description: Tank will use the enemy-sighted status data (described in Feature #9 above) to determine the appropriate attack method. This includes sliding and shooting at the same time, charging the enemy, and turning around to face a rear threat. Sliding directions are proposed in all directions, allowing somewhat random behavior.



13) Better Retreat Behavior
Files: retreat/turn.soar, retreat/move.soar
Description: Tank will attempt to turn towards an unknown threat if enemy is behind it. Moving still has higher priority than turning. When in doubt, the Tank will randomly turn with it's radar on to locate a threat.



14) Performance Controlled by Resource Levels and Threat Levels
Files: explore.soar, recharge.soar, attack.soar, retreat.soar, chase.soar (Top - level sub-goal files), and all files in the status-elaborations folder (except for visit.soar)
Description: Tank uses a short list of resource status indicators to dictate its performance. 
1) in-danger
2) enemy-detected
3) enemy-sighted
4) need-missiles
5) need-energy
6) need-health
These factors are arranged so that each of the five main states (Recharge, Chase, Attack, Retreat and Explore (AKA "Wander")) contains mutually exclusive conditions. 










######################################################################
#
#   Goal/operator Hierarchy
#
#####################################################################

Automatice Operators (called from state ^tanksoar):
1) visit - updates visit time in current square
2) remove-sound - same as tutorial
3) remove-manuever - delete old manuevers




TANKSOAR
1) Explore
     a) move
     b) turn
     c) backwards (turn)
2) Attack
     a) shoot-and-duck
           i) stage-1-fire
           ii) stage-2-duck
         iii) stage-3-slide-back
     b) stationary-fire
     c) turn-and-fire
     d) slide-and-shoot
     e) target-directly-behind
3) Recharge
     a) move-to-energy
           i) move
          ii) turn  (defensive)
     b) move-to-missiles
           i) move
     c) move-to-health
           i) move
          ii) turn  (defensive)
4) Retreat
     a) turn-towards-threat
     b) move
     c) random-turn
5) Chase
     a) move
     b) turn



			
                                        