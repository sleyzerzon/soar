Soar 9.1.0-beta Release Notes
=============================

This release of Soar continues the 9.x series of releases during which we 
expect to introduce several new mechanisms. 9.0.0 included reinforcement
learning code (Soar-RL), which was first released alongside the 8.6.4
beta. 9.0.0 was also the first release to include the SML interface 
without gSKI.  9.1.0-beta includes episodic memory (Soar-EpMem) and Working
Memory Activation (WMA).

Soar-EpMem is a task-independent, architectural integration of an artificial 
episodic memory (EpMem) with Soar.  The EpMem mechanism will automatically 
record episodes as a Soar agent executes.  These episodes can later be queried 
and retrieved in order to improve performance on future tasks.  See the EpMem 
manual in Documentation.

This release of Soar-EpMem does not include a tutorial.  To see examples
of using Soar-EpMem with a Soar agent, see the "kb" agent in the Demos
directory.  This agent will run a series of EpMem "unit tests," exploring
all forms of the Soar-EpMem agent API.

Soar 9.1.0-beta includes all source code, many demo programs, and a 
number of applications that serve as examples of how to interface 
Soar to an external Environment.  There is support for integrating 
Soar with C++, Java, Tcl, Python and C# applications.  Many Tools
that aid in development of Soar programs are also included.

These Release Notes describe the primary changes in this 
latest release.  More detailed information can be obtained at 
http://winter.eecs.umich.edu/soarwiki

This release was generated for Windows, Linux, and OSX systems.  
Windows XP and Vista are supported.

Soar 9.1.0-beta can be downloaded from the Soar homepage at:

        http://sitemaker.umich.edu/soar

Installation Requirements
=========================

* On Windows, the 19MB download file expands to ~45MB when extracted.  
  Linux and OSX disk requirements are similar. Note that Windows has
  a 255 character path length limit; some parts of the directory 
  structure are deep, so users wishing to put Soar in a deep location
  on their machines may run into issues.

* Java 1.5.0 or newer is required to use the Java applications,
  including the debugger (Java must be available in the path). Get it 
  at http://java.sun.com/. Most operating systems probably already have 
  Java installed. NOTE: Java 1.4.2 is no longer supported.

* If you want to run Tcl applications on Linux, Tcl 8.4.x or later is
  required (note that the tutorial applications are now available in
  Java).  Also note that we do not currently support threaded builds
  of Tcl (e.g. ActiveTcl 8.4.11.2 or later).

* The included Python libraries support Python 2.4.  Python 2.5 support
  requires a rebuild of the ClientSMLPython project.

Build Requirements
==================
Binaries are released for Windows/Linux/OS X, so building is not required.
For those on other platforms or developers:
* On all platforms, SWIG 1.3.31 or later is required to build with 
  cross-language support (e.g. to use the Java debugger).
* On Windows, Visual Studio 2005 SP1 is required.
* On Linux/Unix/OS X, Python, SCons, gcc 3.3 or later required.

Soar-EpMem & SQLite
===================
Soar-EpMem requires both statically and dynamically linked SQLite components. 
The former is provided in source. The latter, at this time, is a manual process 
(SQLite uses make scripts for their compile). EpMem includes pre-built binaries 
for Windows, Linux (tested on Ubuntu) and OS X Leopard. If your install works with 
these components, you can skip this section. Otherwise, the following process 
documents how to build the required components.

First, download the source tarball from the SQLite homepage (http://www.sqlite.org/download.html). 
To be clear, you want the non-amalgamated source code tarball 
(probably named sqlite-A.B.C.tar.gz, for version A.B.C).  Next, extract the contents, 
change to the directory, and run ./configure followed by make at the command line. 
These commands will create the required libraries for your system.  The final step 
is to copy the required components from the SQLite directory to your EpMem 
directory. The only file of interest is named libsqliteA.B.C.D.ext 
(ext is dylib on Mac, so for Linux; A.B.C.D will vary on the version) and is 
located in the .libs folder of your SQLite directory. You will want to copy this 
file out of .libs and into the SoarLibrary/lib folder of your EpMem install. 
Furthermore, SQLite requires that this file exist under two additional names: 
libqsliteA.ext and libsqliteA.B.ext. To accommodate, you can either create a symbolic 
link under these two names or duplicate the file (it makes no difference, except 
for added/saved disk space).  Once you have these components in the appropriate directory, 
your EpMem build (and subsequent runs) should work fine.

Components of Soar 9.1.0-beta
=============================
* Pre-built libraries and executables (SoarLibrary/bin)
* all source code, config files, and OS tools for automated Soar builds
* SoarJavaDebugger 
* VisualSoar
* JavaEaters, JavaTankSoar, TclEaters
* Test and Demo programs
* Documentation

New in 9.1.0-beta
=================

* Components and Capabilities added
  -- EpMem commands and documentation added (see EpMem manual in
     Documentation directory).
  -- WMA commands and documentation added (see EpMem manual in
     Documentation directory).
  -- Other minor enhancements.

* Bug fixes
  -- Several other minor fixes.

Known issues:
=============

* No EpMem tutorial
* EpMem "provenance" parameter is unimplemented
* ^status complete appears on the ^output-link immediately instead 
  of during the next input phase.
* The Soar 7 mode implementation currently relies on an ugly hack. If
  you experience problems in this mode, please let us know.
* Many other minor issues (see bugzilla for details).

If any other issues or bugs are found, please send mail to:

soar-sml-list@lists.sourceforge.net (preferred)
-or-
soar-group@lists.sourceforge.net

