############ Sub-task proposals ###############

sp {propose*navigate*get
  (state <s> ^superoperator.name get ^info-link <i>)
  (<i> ^passenger <p> -^location <p>)
 -->
   (<s> ^operator <o> + =)
   (<o> ^name navigate ^to <p>)}
   
############### Primitive ops ###################

sp {propose*pickup
  (state <s> ^superoperator.name get)
  -->
  (<s> ^operator <o> + =)
  (<o> ^name pickup)}
  
sp {apply*pickup*success
  (state <s> ^operator.name pickup ^info-link <i>)
  (<i> ^location <x> ^passenger <x>)
 -->
  (<i> ^passenger <x> -)
  (<i> ^passenger taxi)}
  
sp {apply*pickup*failure*no*location
  (state <s> ^operator <o> ^info-link <i>)
  (<i> -^location)
  (<o> ^name pickup)
 -->
  (<o> ^result failure)}
  
sp {apply*pickup*failure*wrong*location
  (state <s> ^operator <o> ^info-link <i>)
  (<i> ^location <x> ^passenger <> <x>)
  (<o> ^name pickup)
  -->
  (<o> ^result failure)}


################### RL template ######################

sp {RL*pickup
  :template
(state <s> ^superoperator.name get ^info-link <i> ^operator <o> +)
(<i> ^destination <dest> ^x-coor <x> ^y-coor <y>)
(<o> ^name pickup)
-->
(<s> ^operator <o> = 0)}

sp {RL*get*navigate
:template
(state <s> ^superoperator.name get ^info-link <i> ^operator <o> +)
(<o> ^name navigate)
(<i> ^x-coor <x> ^y-coor <y> ^passenger <pass>)
-->
(<s> ^operator <o> = 0)}