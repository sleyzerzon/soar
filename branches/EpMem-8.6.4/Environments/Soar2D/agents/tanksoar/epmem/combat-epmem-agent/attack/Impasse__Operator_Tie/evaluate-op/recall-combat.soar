#IF I haven't retrieved any epmems to do the evaluation yet
#THEN propose doing so
sp {evaluate-op*propose*recall-combat-result
   (state <s> ^name evaluate-op
             -^epmem.result.retrieved)
-->
   (<s> ^operator <op> + =)
   (<op> ^name recall-combat)
}

#IF the operator was selected
#THEN try to retrieve a similar situation in
#     which I took the to-be-evaluated action
sp {apply*recall-combat-result
   (state <s> ^operator <op>
              ^top-state <ts>
              ^epmem.command <ep-cmd>)
   (<op> ^name recall-combat)
   (<ts> ^energy <energy>
         ^missiles <missiles>
         ^health <health>
         ^tank-on-radar <tor>
         ^enemy-distance <edist>
         ^incoming <yn>)
-->
   (<ep-cmd> ^query <query>
             ^neg-query <neg-query>)
   (<query> ^energy <energy>
            ^missiles <missiles>
            ^health <health>
            ^tank-on-radar <tor>
            ^enemy-distance <edist>
            ^incoming <yn>
            ^io.output-link <ol>)
   (<neg-query> ^io.output-link <neg-acts>)
}


#IF a query has been created 
#AND I currently have a dodge direction
#THEN elaborate the query with that dodge direction
sp {apply*query*dodge-direction
   (state <s> ^operator.name recall-combat
              ^top-state.dodge-direction <ddir>
              ^epmem.command.query <query>)
   (<query> ^io)
-->
   (<query> ^dodge-direction <ddir>)
}



##IF the operator was selected
##THEN try to retrieve a similar situation in
##     which I took the to-be-evaluated action
#sp {apply*recall-combat-result*small-cue
#   (state <s> ^operator <op>
#              ^top-state <ts>
#              ^epmem.command <ep-cmd>)
#   (<ep-cmd> ^query <query>
#             ^neg-query <neg-query>)
#   (<op> ^name recall-combat)
#   (<ts> ^missiles <missiles>
#         ^health <health>
#         ^enemy-distance <edist>
#         ^incoming <yn>)
#-->
#   (<query> ^missiles <missiles>
#            ^health <health>
#            ^enemy-distance <edist>
#            ^incoming <yn>
#            ^io.output-link <ol>)
#   (<neg-query> ^io.output-link <neg-acts>)
#}

#If a query has been created with an output-link,
#elaborate it with the eval-item's actions
sp {apply*query*item-action-command
   (state <s> ^operator.name recall-combat
              ^eval-item <item>
              ^epmem.command.query.io.output-link <qol>)
   (<item> ^actions <act>)
   (<act> ^<att> <value>)
   (<value> ^<att2> <value2>)
-->
   (<qol> ^<att> <value3>)
   (<value3> ^<att2> <value2>)
}

#Prohibit epmems that have a bad meta-evaluation
#%%%NOTE:  Hard-coded threshold
sp {apply*query*prohibit-epmems-with-poor-meta-evaluation
   (state <s> ^operator.name recall-combat
              ^top-state.meta-evaluations.<any> <me>
              ^epmem.command <ep-cmd>)
   (<ep-cmd> ^query.io)
   (<me> ^mem-id <mem-id>
         ^value <= -3)
-->
   (<ep-cmd> ^prohibit <mem-id>)
   (write (crlf) |Prohibiting epmem #| <mem-id> | due to poor meta-evaluation.|)
#   (interrupt)
}

#If the negative query has been created with 
#an output-link, elaborate it with those
#actions that aren't to be evaluated
sp {apply*neg-query*unwanted-item-action-commands
   (state <s> ^operator.name recall-combat
              ^eval-item <item>
              ^available-commands <ac>
              ^epmem.command.neg-query.io.output-link <nqol>)
   (<item> ^actions <act>)
   (<ac> ^<att> <value>)
   (<value> ^<att2> <value2>)
  -{(<act> ^<att>.<att2> <value2>)}
-->
   (<nqol> ^<att> <value3>)
   (<value3> ^<att2> <value2>)
#   (write (crlf) |NEG-QUERY: excluding  ^| <att> |.| <att2> | | <value2>|.|)
}

