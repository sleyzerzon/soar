
#######Break when the agent decides to attack
#sp {break*on-attack
#   (state <s> ^name tanksoar
#              ^io.input-link.radar.tank
#             -^missiles-energy low)
#-->
#   (interrupt)
#}


#####Break when taking an action in the attack
#sp {break*attack-action
#   (state <s> ^name attack
#              ^operator.name << move turn move-and-fire turn-and-fire fire-missile >>)
#-->
#   (interrupt)
#}


#Track the world count
sp {elaborate*state*world-count
   (state <s> ^name tanksoar
              ^io.input-link.clock <n>)
-->
   (write (crlf) |                                              world count=| <n>)
}

##Break if we get an unexpected impasse
#sp {elaborations*break-on-failed-attack-decision
#   (state <s> ^impasse <any>
#             -^attribute state
#              ^superstate.superstate.name evaluate-op)
#-->
#   (write (crlf) |Whoops!  impasse | <any>)
#   (interrupt)
#}


###Break on retrieved ressurect
#sp {break*on-resurrect
#   (state <s> ^epmem.retrieved.result.io.input-link.resurrect yes)
#-->
#   (interrupt)
#}

#Print the important bits from epmem queries
sp {retreat-or-attack*elaborate*epmem-query
   (state <s> ^name evaluate-op
              ^epmem.command.query <query>
              ^eval-name <action>
              ^eval-direction <dir>)
   (<query> ^energy <energy>
            ^missiles <missiles>
            ^health <health>
            ^tank-on-radar <tor>
            ^enemy-distance <edist>)
-->
   (write (crlf) |QUERIED EPMEM:        action=| <action> | | <dir> | energy=| <energy> | health=| <health> | missiles=| <missiles> | tank-on-radar=| <tor> | enemy-distance=| <edist>)
}

#Print the important bits from retreived epmems
sp {retreat-or-attack*elaborate*retrieved-epmem
   (state <s> ^name evaluate-op
              ^epmem.result <ep-res>)
   (<ep-res> ^memory-id <id>
             ^retrieved <ret>)
   (<ret> ^energy <energy>
          ^missiles <missiles>
          ^health <health>
          ^enemy-distance <edist>
          ^io <rio>)
   (<rio> ^input-link <ril>
          ^output-link <rol>)
   (<ril> ^resurrect <yn>
          ^smell <smell>
          ^my-color <my-color>
          ^current-score <cs>)
   (<cs>  ^<my-color> <my-score>
          ^<enemy-color> <enemy-score>)
   (<smell> ^color <enemy-color>
            ^distance <dist>)
   (<rol> ^<action> <act>)
   (<act> ^direction <dir>)
-->
   (write (crlf) |RETRIEVED EPMEM | <id> |: action=| <action> | | <dir> | energy=| <energy> | health=| <health> | missiles=| <missiles> | enemy-distance=| <edist>)
   (write (crlf) |                          my score=| <my-score> | enemy score=| <enemy-score> | ressurect=| <yn>)
}

#Print the important bits from retreived epmems
sp {retreat-or-attack*elaborate*retrieved-epmem*fire-missile
   (state <s> ^name evaluate-op
              ^epmem.result <ep-res>)
   (<ep-res> ^memory-id <id>
            ^retrieved <ret>)
   (<ret> ^energy <energy>
          ^missiles <missiles>
          ^health <health>
          ^enemy-distance <edist>
          ^io <rio>)
   (<rio> ^input-link <ril>
          ^output-link <rol>)
   (<ril> ^resurrect <yn>
          ^smell <smell>
          ^my-color <my-color>
          ^current-score <cs>)
   (<cs>  ^<my-color> <my-score>
          ^<enemy-color> <enemy-score>)
   (<smell> ^color <enemy-color>
            ^distance <dist>)
   (<rol> ^fire.weapon missile
         -^move.direction
         -^rotate.direction)
-->
   (write (crlf) |RETRIEVED EPMEM | <id> |: action=fire-missile energy=| <energy> | health=| <health> | missiles=| <missiles> | enemy-distance=| <edist>)
   (write (crlf) |                          my score=| <my-score> | enemy score=| <enemy-score> | ressurect=| <yn>)
}


sp {retreat-or-attack*elaborate*retrieved-epmem*fire-missile-variant
   (state <s> ^name evaluate-op
              ^epmem.result <ep-res>)
   (<ep-res> ^memory-id <id>
             ^retrieved <ret>)
   (<ret> ^energy <energy>
          ^missiles <missiles>
          ^health <health>
          ^enemy-distance <edist>
          ^tank-on-radar <tor>
          ^io <rio>)
   (<rio> ^input-link <ril>
          ^output-link <rol>)
   (<ril> ^resurrect <yn>
          ^smell <smell>
          ^my-color <my-color>
          ^current-score <cs>)
   (<cs>  ^<my-color> <my-score>
          ^<enemy-color> <enemy-score>)
   (<smell> ^color <enemy-color>
            ^distance <dist>)
   (<rol> ^fire-missile)
-->
   (write (crlf) |RETRIEVED EPMEM | <id> |: action=fire-missile energy=| <energy> | health=| <health> | missiles=| <missiles> | tank-on-radar=| <tor> | enemy-distance=| <edist>)
}


sp {elaborate*retrieved-epmem*metadata
   (state <s> ^name evaluate-op
              ^epmem.result <ep-res>)
   (<ep-res> ^memory-id <id>
             ^cue-size <size>
             ^match-cardinality <card>
             ^match-score <score>
             ^normalized-match-score <norm-score>
             ^present-id <present>
             ^retrieval-count <count>)
-->
   (write (crlf) |       metadata | <id> |: cue-size=| <size> | cardinality=| <card> | score=| <score> | norm score=| <norm-score> | retrieval-count=| <count> | present-id=| <present>)
#   (interrupt)
}


#IF I take an action with a value
#THEN print debugging info
sp {print*operator-with-value
   (state <s> ^name attack
              ^operator <o>)
   (<o> ^name <name>
        ^direction <dir>
        ^value <val>)
-->
   (write (crlf) |Selected operator | <name> |  |<dir> | with value | <val>)
}

##Catch any evals that conflict
sp {apply*attack*remove-conflicting-evals
   (state <s> ^operator <op>
              ^top-state.evaluations <evals>)
   (<op> ^name attack)
   (<evals> ^eval <e1>
            ^eval <e2>)
   (<e1> ^name <name>
         ^direction <dir>
         ^value <val>)
   (<e2> ^name <name>
         ^direction <dir>
         ^value <> <val>)
-->
   (write (crlf) |ERROR!! Conflicting evaluations:  | <e1>|  and | <e2>)
   (interrupt)
}

sp {elaborate*state*current-action
   (state <s> ^operator <o> +)
   (<o> ^name { <action> << attack retreat chase wander >> })
-->
   (<s> ^<action> yes)
}

