# OBJECT PROPERTIES

# height = {short, medium, tall}
# color = {red, orange, yellow, green, blue, indigo, violet}
# shape = {sphere, tetrahedron, cube, octahedron, dodecahedron, icosahedron, tesseract}
# type = {block}

# TASKS

smem --add {
    # block 1
    # start: room 0
    # end: room 10
    # distance: 2 rooms
    (<task01> ^type task
              ^object <obj01>
              ^destination <dest01>)
    (<obj01> ^height large
             ^color green
             ^shape sphere)
    (<dest01> ^id 50)

    # block 2
    # start: room 10
    # end: room 40
    # distance: 6 rooms
    (<task02> ^type task
              ^object <obj02>
              ^destination <dest02>)
    (<obj02> ^height short
             ^color green
             ^color cube)
    (<dest02> ^id 40)

    # block 3
    # start: room 20
    # end: room 0
    # distance: 6 rooms
    (<task03> ^type task
              ^object <obj03>
              ^destination <dest03>)
    (<obj03> ^height large
             ^color green
             ^shape tetrahedron)
    (<dest03> ^id 0)

    # block 4
    # start: room 20
    # end: room 35
    # distance: 3 rooms
    (<task04> ^type task
              ^object <obj04>
              ^destination <dest04>)
    (<obj04> ^height large
             ^color green
             ^shape tetrahedron)
    (<dest04> ^id 35)

    # block 5
    # start: room 20
    # end: room 0
    # distance: 8 rooms
    (<task05> ^type task
              ^object <obj05>
              ^destination <dest05>)
    (<obj05> ^height short
             ^color green
             ^color cube)
    (<dest05> ^id 30)

    # block 6
    # start: room 20
    # end: room 30
    # distance: 2 rooms
    (<task06> ^type task
              ^object <obj06>
              ^destination <dest06>)
    (<obj06> ^height large
             ^color red
             ^shape sphere)
    (<dest06> ^id 30)

    # block 7
    # start: room 30
    # end: room 20
    # distance: 10 rooms
    (<task07> ^type task
              ^object <obj07>
              ^destination <dest07>)
    (<obj07> ^height medium
             ^color magenta
             ^shape sphere)
    (<dest07> ^id 20)

    # block 8
    # start: room 30
    # end: room 0
    # distance: 6 rooms
    (<task08> ^type task
              ^object <obj08>
              ^destination <dest08>)
    (<obj08> ^height short
             ^color green
             ^shape cube)
    (<dest08> ^id 0)

    # block 9
    # start: room 30
    # end: room 20
    # distance: 10 rooms
    (<task09> ^type task
              ^object <obj09>
              ^destination <dest09>)
    (<obj09> ^height medium
             ^color green
             ^shape dodecahedron)
    (<dest09> ^id 20)

    # block 10
    # start: room 40
    # end: room 10
    # distance: 6 rooms
    (<task10> ^type task
              ^object <obj10>
              ^destination <dest10>)
    (<obj10> ^height short
             ^color yellow
             ^shape octahedron)
    (<dest10> ^id 10)

    # block 11
    # start: room 50
    # end: room 20
    # distance: 6 rooms
    (<task11> ^type task
              ^object <obj11>
              ^destination <dest11>)
    (<obj11> ^height short
             ^color indigo
             ^shape tesseract)
    (<dest11> ^id 20)
}

sp {interrupt
   (state <s> ^operator.name record-area-wm
              ^io.input-link.area-description.id 15)
-->
   #(interrupt)
}

# DELIVERY PROBLEM SPACE

sp {propose*init-agent
   (state <s> ^superstate nil
             -^name)
-->
   (<s> ^operator <o> +)
   (<o> ^name init-agent)
}

sp {apply*init-agent
   (state <s> ^operator.name init-agent)
-->
   (<s> ^name delivery
        ^areas <areas>
        ^flags <flags>
        ^ltis <ltis>
        ^metrics <metrics>
        ^objects <objects>
        ^tasks <tasks>)
   (<metrics> ^unnecessary-retrievals 0)
}

sp {delivery*elaborate*parameters
   (state <s> ^name delivery)
-->
   (<s> ^parameters <params>)
   (<params> ^distance-tolerance 1.0
             ^heading-tolerance 1.5
             ^linear-velocity 0.7
             ^storage-delta-x 1
             ^storage-delta-y 1)
}

sp {delivery*elaborate*constants
   (state <s> ^name delivery
              ^parameters <params>)
   (<params> ^distance-tolerance <distance-tol>)
-->
   (<s> ^constants <constants>)
   (<constants> ^gateway-deltas <deltas>
                ^direction-opposites <opposites>
                ^operator-preferences <preferences>)
   (<deltas> ^north <delta-north>
             ^south <delta-south>
             ^east <delta-east>
             ^west <delta-west>)
   (<delta-north> ^x 0.0
                  ^y (+ 0.5 <distance-tol>))
   (<delta-south> ^x 0.0
                  ^y (- -0.5 <distance-tol>))
   (<delta-east> ^x (+ 0.5 <distance-tol>)
                 ^y 0.0)
   (<delta-west> ^x (- -0.5 <distance-tol>)
                 ^y 0.0)
   (<opposites> ^north south
                ^south north
                ^east west
                ^west east)
   (<preferences> ^initialization 10
                  ^record 20
                  ^retrieve 25
                  ^task 30
                  ^movement 40)
}

# ELABORATIONS

# default

sp {elaborate*topstate*topstate
   (state <s> ^superstate nil)
-->
   (<s> ^topstate <s>)
}

sp {elaborate*state*inherited*defaults
   (state <s> ^superstate.{<attr> << io topstate >>} <val>)
-->
   (<s> ^<attr> <val>)
}

sp {elaborate*state*state-name
   (state <s> ^superstate.operator.name <name>)
-->
   (<s> ^name <name>)
}

# domain-specific inherited attributes

sp {elaborate*state*inherited*roomsworld
   (state <s> ^superstate.{<attr> << parameters constants areas flags metrics objects tasks >>} <val>)

-->
   (<s> ^<attr> <val>)
}

# memory

# TODO these rules will not work on LTIs with cyclic references
# or, for that matter, when we don't need the entire LTI tree

sp {elaborate*state*forgettables-base
   (state <s> ^superstate nil
              ^ltis <ltis>
              ^tasks.task <task>)
-->
   (<ltis> ^lti <task>)
}

sp {elaborate*state*forgettables-recurse
   (state <s> ^superstate nil
              ^ltis <ltis>)
   (<ltis> ^lti.<attr> {<ident> <=> <s>})
-->
   (<ltis> ^lti <ident>)
}

sp {elaborate*state*forgettables-status-base
   (state <s> ^superstate nil
              ^ltis.lti <lti>
             -^smem.command.store <lti>)
   # there is at least one non-identifier child
   # and no identifier children
   (<lti> ^{<attr> <> forgotten}
         -^<ident-attr> {<ident> <=> <s>})
-->
   (<lti> ^forgotten no)
}

sp {elaborate*state*forgettables-status-recurse
   (state <s> ^superstate nil
              ^ltis.lti <lti>
             -^smem.command.store <lti>)
   # there is an identifier child
   # and all identifier children have ^forgotten no
   (<lti> ^<attr> {<=> <s>})
  -{ (<lti> ^<ident-attr> {<ident> <=> <s>})
    -(<ident> ^forgotten no) }
-->
   (<lti> ^forgotten no)
}

# navigation

sp {elaborate*state*current-area
   (state <s> ^io.input-link.area-description.id <id>
              ^areas.area <area>)
   (<area> ^id <id>
           ^stored yes)
-->
   (<s> ^current-area <area>)
}

sp {elaboroate*state*waypoint
   (state <s> ^name <name>
              ^io.input-link.waypoints.waypoint <waypoint>
              ^destination <destination>)
   (<destination> ^x <x>
                  ^y <y>)
   (<waypoint> ^id <name>
               ^x <x>
               ^y <y>)
-->
   (<destination> ^waypoint <waypoint>)
}

sp {elaborate*state*arrived
   (state <s> ^name <name>
              ^parameters.distance-tolerance <distance-tol>
              ^destination.waypoint.distance {<= <distance-tol>})
-->
   (<s> ^arrived yes)
}

# PREFERENCES

sp {elaborate*operator*initialization
   (state <s> ^operator <o> +)
   (<o> ^name << initialize-tasks >>)
-->
   (<o> ^type initialization)
}

sp {elaborate*operator*record
   (state <s> ^operator <o> +)
   (<o> ^name << record-area-wm mark-object-picked-up mark-task-completed remove-flags >>)
-->
   (<o> ^type record)
}

sp {elaborate*operator*retrieve
   (state <s> ^operator <o> +)
   (<o> ^name << retrieve-all-tasks-area recursive-retrieve >>)
-->
   (<o> ^type retrieve)
}

sp {elaborate*operator*task
   (state <s> ^operator <o> +)
   (<o> ^name << perform-pick-up-task perform-put-down-task pick-up-object put-down-object >>)
-->
   (<o> ^type task)
}

sp {elaborate*operator*movement
   (state <s> ^operator <o> +)
   (<o> ^name << patrol go-to-adjacent-area go-to-coord turn-to-coord drive-to-coord >>)
-->
   (<o> ^type movement)
}

sp {delivery*compare*operator-types
   (state <s> ^operator <o1> +
              ^operator <o2> +
              ^constants.operator-preferences <preferences>)
   (<o1> ^type <o1-type>)
   (<o2> ^type <o2-type>)
   (<preferences> ^<o1-type> <o1-rank>
                  ^<o2-type> {<o2-rank> > <o1-rank>})
-->
   (<s> ^operator <o1> > <o2>)
}

sp {delivery*compare*perform-pick-up-task
   (state <s> ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name perform-pick-up-task
         ^object.distance <d1>)
   (<o2> ^name perform-pick-up-task
         ^object.distance {> <d1>})
-->
   (<s> ^operator <o1> > <o2>)
}

# OPERATORS

# initialize-tasks

sp {delivery*propose*initialize-tasks
   (state <s> ^name delivery
             -^tasks-initialized
              ^tasks)
-->
   (<s> ^operator <o> +)
   (<o> ^name initialize-tasks)
}

sp {delivery*apply*initialize-tasks*first-query
   (state <s> ^operator.name initialize-tasks
              ^smem.command <scmd>)
-->
   (<scmd> ^query.type task)
}

sp {delivery*apply*initialize-tasks*next-query
   (state <s> ^operator.name initialize-tasks
              ^smem <smem>
              ^tasks <tasks>)
   (<smem> ^command <scmd>
           ^result <sres>)
   (<sres> ^success
           ^retrieved <task>)
-->
   (<tasks> ^task <task>)
   (<scmd> ^prohibit <task>)
}

sp {delivery*apply*initialize-tasks*done
   (state <s> ^operator.name initialize-tasks
              ^smem <smem>)
   (<smem> ^command <scmd>
           ^result.failure)
   (<scmd> ^{<cmd> << query prohibit >>} <arg>)
-->
   (<scmd> ^<cmd> <arg> -)
   (<s> ^tasks-initialized yes)
}

# store-task TODO

# retrieve-all-tasks-area

sp {delivery*propose*retrieve-all-tasks-area*doors
   (state <s> ^name delivery
              ^parameters <params>
              ^current-area <area>
             -^flags.tasks-retrieved-in-area <area-id>)
   (<area> ^id <area-id>
           ^type door)
   (<params> ^tasks-held-in smem
             ^method-ecological-entry yes)
-->
   (<s> ^operator <o>)
   (<o> ^name retrieve-all-tasks-area)
}

sp {delivery*propose*retrieve-all-tasks-area*entry
   (state <s> ^name delivery
              ^parameters <params>
              ^current-area <area>
             -^flags.tasks-retrieved-in-area <area-id>)
   (<area> ^id <area-id>
           ^type room)
   (<params> ^tasks-held-in smem
             ^method-ecological-entry yes)
-->
   (<s> ^operator <o>)
   (<o> ^name retrieve-all-tasks-area)
}

sp {retrieve-all-tasks-area*propose*remove-flags
   (state <s> ^name retrieve-all-tasks-area
              ^flags.tasks-retrieved-in-area)
-->
   (<s> ^operator <o> +)
   (<o> ^name remove-flags
        ^flags <flags>)
}

sp {retrieve-all-tasks-area*elaborate*remove-flag-operator
   (state <s> ^name retrieve-all-tasks-area
              ^operator <o> +
              ^flags.tasks-retrieved-in-area <val>)
   (<o> ^name remove-flags
        ^flags <flags>)
-->
   (<flags> ^tasks-retrieved-in-area <val>)
}

sp {retrieve-all-tasks-area*propose*recursive-retrieve
   (state <s> ^name retrieve-all-tasks-area
             -^flags.tasks-retrieved-in-area
              ^tasks.task <task>)
  -(<task> ^forgotten no)
-->
   (<s> ^operator <o> + =)
   (<o> ^name recursive-retrieve
        ^lti <task>)
}

sp {retrieve-all-tasks-area*propose*done
   (state <s> ^name retrieve-all-tasks-area
             -^flags.tasks-retrieved-in-area
              ^tasks <tasks>)
  -{ (<tasks> ^task <task>)
    -(<task> ^forgotten no) }
-->
   (<s> ^operator <o> +)
   (<o> ^name done)
}

sp {retrieve-all-tasks-area*apply*done
   (state <s> ^name retrieve-all-tasks-area
              ^operator.name done
              ^current-area.id <area-id>
              ^flags <flags>)
-->
   (<flags> ^tasks-retrieved-in-area <area-id>)
}

# recursive-retrieve

sp {recursive-retrieve*elaborate*deeper
   (state <s> ^name recursive-retrieve
              ^to-be-retrieved <to-be-retrieved>
              ^depth <depth>)
   (<to-be-retrieved> ^{<attr> <=> 0}
                     -^<depth>)
-->
   (<s> ^we-need-to-go-deeper (+ <attr> 1))
}

sp {recursive-retrieve*propose*initialize
   (state <s> ^name recursive-retrieve
             -^to-be-retrieved
             -^retrieved
              ^quiescence t)
-->
   (<s> ^operator <o> +)
   (<o> ^name initialize)
}

sp {recursive-retrieve*apply*initialize*default-depth
   (state <s> ^name recursive-retrieve
              ^operator.name initialize
             -^superstate.operator.depth)
-->
   (<s> ^depth 9999)
}

sp {recursive-retrieve*apply*initialize*copy-depth
   (state <s> ^name recursive-retrieve
              ^operator.name initialize
              ^superstate.operator.depth <depth>)
-->
   (<s> ^depth <depth>)
}

sp {recursive-retrieve*apply*initialize*copy-path
   (state <s> ^name recursive-retrieve
              ^operator.name initialize
              ^superstate.operator <so>)
   (<so> ^lti <lti>
         ^path <path>)
-->
   (<s> ^mapping.node <node>)
   (<node> ^path <path>
           ^retrieved <lti>)
}

sp {recursive-retrieve*apply*initialize*create-sets
   (state <s> ^name recursive-retrieve
              ^operator.name initialize
              ^superstate.operator.lti <lti>
              ^depth <depth>)
-->
   (<s> ^to-be-retrieved.<depth> <lti>
        ^retrieved <retrieved>)
}

sp {recursive-retrieve*propose*retrieve
   (state <s> ^name recursive-retrieve
              ^depth {<depth> > 0}
              ^to-be-retrieved.<depth> <lti>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name retrieve
        ^lti <lti>)
}

sp {recursive-retrieve*apply*retrieve*retrieve
   (state <s> ^name recursive-retrieve
              ^operator <o>
              ^smem.command <scmd>
             -^retrieved.lti <lti>)
   (<o> ^name retrieve
        ^lti <lti>)
-->
   (<scmd> ^retrieve <lti>)
}

sp {recursive-retrieve*apply*retrieve*copy-children*no-path
   (state <s> ^name recursive-retrieve
              ^operator <o>
              ^smem.result.retrieved <lti>
              ^depth <depth>
              ^to-be-retrieved <to-be-retrieved>
              ^retrieved <retrieved>
             -^mapping)
   (<o> ^name retrieve
        ^lti <lti>)
   (<lti> ^<attr> {<val> <=> <s>})
   (<retrieved> -^lti <val>)
-->
   (<to-be-retrieved> ^(- <depth> 1) <val>)
}

sp {recursive-retrieve*apply*retrieve*copy-children*path
   (state <s> ^name recursive-retrieve
              ^operator <o>
              ^smem.result.retrieved <lti>
              ^depth <depth>
              ^to-be-retrieved <to-be-retrieved>
              ^retrieved <retrieved>
              ^mapping <mapping>)
   (<o> ^name retrieve
        ^lti <lti>)
   (<lti> ^<attr> {<val> <=> <s>})
   (<retrieved> -^lti <val>)
   (<mapping> ^node <node>)
   (<node> ^path.<attr> <ident>
           ^retrieved <lti>)
-->
   (<to-be-retrieved> ^(- <depth> 1) <val>)
   (<mapping> ^node <new-node>)
   (<new-node> ^path <ident>
               ^retrieved <val>)
}

sp {recursive-retrieve*apply*retrieve*remove-command
   (state <s> ^name recursive-retrieve
              ^operator <o>
              ^smem <smem>
              ^depth <depth>
              ^to-be-retrieved <to-be-retrieved>
              ^retrieved <retrieved>)
   (<o> ^name retrieve
        ^lti <lti>)
   (<smem> ^command <scmd>
           ^result.<< success failure bad-cmd >>)
   (<scmd> ^retrieve <lti>)
   (<to-be-retrieved> ^<depth> <lti>)
-->
   (<scmd> ^retrieve <lti> -)
   (<to-be-retrieved> ^<depth> <lti> -)
   (<retrieved> ^lti <lti>)
}

sp {recursive-retrieve*propose*go-deeper
   (state <s> ^name recursive-retrieve
              ^retrieved
              ^we-need-to-go-deeper <depth>
              ^depth <depth>)
-->
   (<s> ^operator <o> +)
   (<o> ^name go-deeper)
}

sp {recursive-retrieve*apply*go-deeper
   (state <s> ^name recursive-retrieve
              ^operator.name go-deeper
              ^depth <depth>)
-->
   (<s> ^depth <depth> -
        ^depth (- <depth> 1))
}

# perform-pick-up-task

sp {delivery*propose*perform-pick-up-task
   (state <s> ^name delivery
              ^io.input-link.objects.object <obj>
              ^tasks.task <task>)
   (<task> ^object <desc>)
   # check that the object has not been forgotten
   (<desc> ^forgotten no
          -^id)
   # check that the object is right for the task
  -{ (<desc> ^{<attr> <> forgotten} <val>)
    -(<obj> ^<attr> <val>) }
-->
   (<s> ^operator <o> +)
   (<o> ^name perform-pick-up-task
        ^task <task>
        ^object <obj>)
}

sp {perform-pick-up-task*propose*pick-up-object
   (state <s> ^name perform-pick-up-task
              ^superstate.operator <so>)
   (<so> ^task <task>
         ^object <obj>)
-->
   (<s> ^operator <o> +)
   (<o> ^name pick-up-object
        ^object <obj>)
}

# mark-object-picked-up

sp {delivery*propose*mark-object-picked-up
   (state <s> ^name delivery
              ^tasks <tasks>
              ^io.input-link.self.carry.object <obj>)
   (<obj> ^id <id>)
  -(<tasks> ^task.object.id <id>)
   (<tasks> ^task <task>)
   (<task> ^object <desc>)
   # check that the object has not been forgotten
   (<desc> ^forgotten no
          -^id)
   # check that the object is right for the task
  -{ (<desc> ^{<attr> <> forgotten} <val>)
    -(<obj> ^<attr> <val>) }
-->
   (<s> ^operator <o> +)
   (<o> ^name mark-object-picked-up
        ^task <task>
        ^object <obj>)
}

sp {delivery*apply*mark-object-picked-up
   (state <s> ^name delivery
              ^operator <o>)
   (<o> ^name mark-object-picked-up
        ^task.object <desc>
        ^object.id <id>)
-->
   (<desc> ^id <id>)
}

sp {delivery*apply*mark-object-picked-up*store-smem
   (state <s> ^name delivery
              ^operator <o>
              ^parameters.tasks-held-in smem
              ^smem.command <scmd>)
   (<o> ^name mark-object-picked-up
        ^task.object <desc>)
-->
   (<scmd> ^store <desc>)
}

# perform-put-down-task

sp {delivery*propose*perform-put-down-task
   (state <s> ^name delivery
              ^io.input-link.self.carry.object <obj>
              ^current-area <area>
              ^tasks.task <task>)
   (<task> ^object.id <id>
           ^destination <dest>)
   (<obj> ^id <id>)
   # check that the destination has not been forgotten
   (<dest> ^forgotten no)
   # check that we are in the right location
  -{ (<dest> ^{<attr> <> forgotten} <val>)
    -(<area> ^<attr> <val>) }
-->
   (<s> ^operator <o> + =)
   (<o> ^name perform-put-down-task
        ^task <task>
        ^object <obj>)
}

sp {perform-put-down-task*propose*put-down-object
   (state <s> ^name perform-put-down-task
              ^superstate.operator.object <obj>)
-->
   (<s> ^operator <o> +)
   (<o> ^name put-down-object
        ^object <obj>)
}

# mark-task-completed

sp {delivery*propose*mark-task-completed
   (state <s> ^name delivery
              ^tasks.task <task>
              ^io.input-link.objects.object <obj>
              ^current-area <area>)
   # check that the task has not been forgotten
   (<task> ^object <desc>
           ^destination <dest>
           ^forgotten no)
   # check that the object is right for the task
  -{ (<desc> ^{<attr> <> forgotten} <val>)
    -(<obj> ^<attr> <val>) }
   # check that we are in the right location
  -{ (<dest> ^{<attr> <> forgotten} <val>)
    -(<area> ^<attr> <val>) }
-->
   (<s> ^operator <o> +)
   (<o> ^name mark-task-completed
        ^task <task>)
}

sp {delivery*apply*mark-task-completed
   (state <s> ^name delivery
              ^operator <o>
              ^tasks <tasks>)
   (<tasks> ^task <task>)
   (<o> ^name mark-task-completed
        ^task <task>)
-->
   (<tasks> ^task <task> -)
}

# record-area-wm

sp {delivery*propose*record-area-wm
   (state <s> ^name delivery
             -^current-area
              ^parameters.areas-held-in wm)
-->
   (<s> ^operator <o> +)
   (<o> ^name record-area-wm)
}

sp {record-area-wm*propose*create-neighbor-area
   (state <s> ^name record-area-wm
              ^io.input-link.area-description <description>
             -^areas.area.id <to>)
   (<description> ^id <id>
                  ^gateway.to {<to> <> <id>})
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-neighbor-area
        ^area-id <to>)
}

sp {record-area-wm*apply*create-neighbor-area
   (state <s> ^name record-area-wm
              ^operator <o>
              ^areas <areas>)
   (<o> ^name create-neighbor-area
        ^area-id <id>)
-->
   (<areas> ^area.id <id>)
}

sp {record-area-wm*propose*copy-curent-area
   (state <s> ^name record-area-wm
              ^io.input-link.area-description <description>
              ^areas <areas>)
   (<description> ^id <id>)
  -{ (<description> ^gateway.to {<to> <> <id>})
    -(<areas> ^area.id <to>) }
-->
   (<s> ^operator <o> +)
   (<o> ^name copy-current-area)
}

sp {record-area-wm*apply*copy-current-area*create-area
   (state <s> ^name record-area-wm
              ^operator.name copy-current-area
              ^io.input-link.area-description.id <id>
              ^areas <areas>)
  -(<areas> ^area.id <id>)
-->
   (<areas> ^area <area>)
   (<area> ^id <id>)
}

sp {record-area-wm*apply*copy-current-area*link-area
   (state <s> ^name record-area-wm
              ^operator.name copy-current-area
              ^areas.area <area>
              ^io.input-link.area-description <description>)
   (<area> ^id <id>)
   (<description> ^id <id>
                  ^type <type>
                  ^wall <north-wall>
                  ^wall <south-wall>
                  ^wall <east-wall>
                  ^wall <west-wall>)
   (<north-wall> ^direction north
                 ^y <north-y>)
   (<south-wall> ^direction south
                 ^y <south-y>)
   (<east-wall> ^direction east
                ^x <east-x>)
   (<west-wall> ^direction west
                ^x <west-x>)
-->
   (<s> ^area <area>)
   (<area> ^type <type>
           ^class area
           ^center-x (/ (+ <east-x> <west-x>) 2)
           ^center-y (/ (+ <north-y> <south-y>) 2)
           ^width (- <east-x> <west-x>)
           ^height (- <north-y> <south-y>))
}

sp {record-area-wm*apply*copy-current-area*gateway
   (state <s> ^name record-area-wm
              ^operator.name copy-current-area
              ^io.input-link.area-description.gateway <cgateway>
              ^areas.area <to-area>
              ^area <area>
              ^constants.direction-opposites.<direction> <opposite>)
   (<area> ^id <id>
          -^<direction>.id <gid>)
   (<to-area> ^id <to>)
   (<cgateway> ^id <gid>
               ^to {<to> <> <id>}
               ^direction <direction>
               ^x <x>
               ^y <y>)
-->
   (<area> ^<direction> <gateway>)
   (<to-area> ^<opposite> <gateway>)
   (<gateway> ^id <gid>
              ^class coord
              ^type gateway
              ^to <area>
              ^to <to-area>
              ^x <x>
              ^y <y>)
}

sp {record-area-wm*apply*copy-current-area*done
   (state <s> ^name record-area-wm
              ^operator.name copy-current-area
              ^io.input-link.area-description <description>
              ^area <area>)
   (<area> ^id <id>)
  -{ (<description> ^gateway <gateway>)
     (<gateway> ^to {<to> <> <id>}
                ^direction <direction>)
    -(<area> ^<direction>.to.id <to>) }
-->
   (<area> ^stored yes)
}

# pick-up-object

sp {pick-up-object*elaborate*destination
   (state <s> ^name pick-up-object
              ^superstate.operator.object <obj>)
   (<obj> ^x <x>
          ^y <y>)
-->
   (<s> ^destination <destination>)
   (<destination> ^x <x>
                  ^y <y>)
}

sp {pick-up-object*propose*go-to-object
   (state <s> ^name pick-up-object
              ^destination.waypoint <waypoint>
             -^arrived)
   (<waypoint> ^x <x>
               ^y <y>)
-->
   (<s> ^operator <o> +)
   (<o> ^name go-to-coord
        ^x <x>
        ^y <y>)
}

sp {pick-up-object*propose*get-object
   (state <s> ^name pick-up-object
              ^superstate.operator.object.id <id>
              ^arrived)
-->
   (<s> ^operator <o> +)
   (<o> ^name get-object
        ^actions <actions>)
   (<actions> ^stop <stop>
              ^get-object.id <id>)
}

# put-down-object

sp {put-down-object*elaborate*destination
   (state <s> ^name put-down-object
              ^parameters <params>
              ^current-area <area>)
   (<params> ^storage-delta-x <dx>
             ^storage-delta-y <dy>)
   (<area> ^center-x <x>
           ^center-y <y>
           ^width <width>
           ^height <height>)
-->
   (<s> ^destination <destination>)
   (<destination> ^x (+ (- <x> (/ <width> 2)) <dx>)
                  ^y (+ (- <y> (/ <height> 2)) <dy>))
}

sp {put-down-object*propose*go-to-storage-coord
   (state <s> ^name put-down-object
              ^destination.waypoint <waypoint>
             -^arrived)
   (<waypoint> ^x <x>
               ^y <y>)
-->
   (<s> ^operator <o> +)
   (<o> ^name go-to-coord
        ^x <x>
        ^y <y>)
}

sp {put-down-object*propose*drop-object
   (state <s> ^name put-down-object
              ^superstate.operator.object.id <id>
              ^arrived)
-->
   (<s> ^operator <o> +)
   (<o> ^name drop-object
        ^actions <actions>)
   (<actions> ^stop <stop>
              ^drop-object.id <id>)
}

# patrol

sp {delivery*propose*patrol
   (state <s> ^name delivery)
-->
   (<s> ^operator <o> +)
   (<o> ^name patrol
        ^area <a01> <a02> <a03> <a04> <a05> <a06> <a07> <a08> <a09> <a10> <a11> <a12>)
   (<a01> ^next <a02>
          ^id 0)
   (<a02> ^next <a03>
          ^id 5)
   (<a03> ^next <a04>
          ^id 10)
   (<a04> ^next <a05>
          ^id 15)
   (<a05> ^next <a06>
          ^id 20)
   (<a06> ^next <a07>
          ^id 25)
   (<a07> ^next <a08>
          ^id 30)
   (<a08> ^next <a09>
          ^id 35)
   (<a09> ^next <a10>
          ^id 40)
   (<a10> ^next <a11>
          ^id 45)
   (<a11> ^next <a12>
          ^id 50)
   (<a12> ^next <a01>
          ^id 55)
} 

sp {patrol*propose*go-to-adjacent-area
   (state <s> ^name patrol
              ^superstate.operator.area <area>
              ^current-area.id <id>)
   (<area> ^id <id>
           ^next <next-area>)
   (<next-area> ^id <next-id>)
-->
   (<s> ^operator <o> +)
   (<o> ^name go-to-adjacent-area
        ^area-id <next-id>)
}

# go-to-adjacent-area

sp {go-to-adjacent-area*elaborate*destination
   # TODO this can cause multiple destinations to be specified
   # if there are two gateways to the same room
   (state <s> ^name go-to-adjacent-area
              ^superstate.operator.area-id <next-id>
              ^current-area.<< north south east west >> <gateway>)
   (<gateway> ^to.id <next-id>
              ^x <x>
              ^y <y>)
-->
   (<s> ^destination <destination>)
   (<destination> ^x <x>
                  ^y <y>)
}

sp {go-to-adjacent-area*propose*go-to-gateway
   (state <s> ^name go-to-adjacent-area
              ^destination.waypoint <waypoint>
             -^arrived)
   (<waypoint> ^x <x>
               ^y <y>)
-->
   (<s> ^operator <o> +)
   (<o> ^name go-to-coord
        ^x <x>
        ^y <y>)
}

sp {go-to-adjacent-area*propose*enter-area
   (state <s> ^name go-to-adjacent-area
              ^superstate.operator.area-id <next-id>
              ^arrived yes
              ^current-area.{<direction> << north south east west >>}.to.id <next-id>
              ^destination.waypoint <waypoint>
              ^constants.gateway-deltas.<direction> <deltas>)
   (<waypoint> ^x <x>
               ^y <y>)
   (<deltas> ^x <delta-x>
             ^y <delta-y>)
-->
   (<s> ^operator <o> +)
   (<o> ^name go-to-coord
        ^x (+ <x> <delta-x>)
        ^y (+ <y> <delta-y>))
}

# go-to-coord

sp {go-to-coord*elaborate*destination
   (state <s> ^name go-to-coord
              ^superstate.operator <so>)
   (<so> ^x <x>
         ^y <y>)
-->
   (<s> ^destination <destination>)
   (<destination> ^x <x>
                  ^y <y>)
}

sp {go-to-coord*propose*turn-to-waypoint
   (state <s> ^name go-to-coord
              ^parameters.heading-tolerance <heading-tol>
              ^destination.waypoint <waypoint>)
   (<waypoint> ^yaw <yaw>
               ^abs-relative-bearing {> <heading-tol>})
-->
   (<s> ^operator <o> +)
   (<o> ^name turn-to-waypoint
        ^actions.set-heading.yaw <yaw>)
}

sp {go-to-coord*propose*drive-to-waypoint
   (state <s> ^name go-to-coord
              ^parameters <params>
              ^destination.waypoint <waypoint>)
   (<params> ^distance-tolerance <distance-tol>
             ^linear-velocity <velocity>
             ^heading-tolerance <heading-tol>)
   (<waypoint> ^abs-relative-bearing {<= <heading-tol>}
               ^distance {<remaining> > <distance-tol>})
-->
   (<s> ^operator <o> +)
   (<o> ^name drive-to-waypoint
        ^actions.set-linear-velocity.linear-velocity <velocity>)
}

# remove-flags

sp {delivery*apply*remove-flags
   (state <s> ^operator <o>
              ^flags <flags>)
   (<o> ^name remove-flags
        ^flags <oflags>)
   (<flags> ^<flag> <val>)
   (<oflags> ^<flag> <val>)
-->
   (<flags> ^<flag> <val> -)
}

# waypoints

sp {propose*add-waypoint
   (state <s> ^name <name>
             -^io.input-link.waypoints.waypoint.id <name>
              ^destination <destination>)
   (<destination> ^x <x>
                  ^y <y>)
-->
   (<s> ^operator <o> + >)
   (<o> ^name add-waypoint
        ^actions.add-waypoint <add-waypoint>)
   (<add-waypoint> ^id <name>
                   ^x <x>
                   ^y <y>)
}

sp {propose*remove-waypoint
   (state <s> ^name <name>
              ^io.input-link.waypoints.waypoint <waypoint>
              ^destination <destination>)
   (<destination> ^x <x>
                  ^y <y>)
   (<waypoint> ^id <name>)
  -(<waypoint> ^x <x>
               ^y <y>)
-->
   (<s> ^operator <o> + >)
   (<o> ^name remove-waypoint
        ^actions.remove-waypoint.id <name>)
}

# output commands

sp {apply*operator*create-output
   (state <s> ^operator.actions.<attr> <val>
              ^io.output-link <ol>
              ^quiescence t)
-->
   (<ol> ^<attr> <val>)
}

sp {apply*operator*remove-output
   (state <s> ^superstate nil
              ^operator <o>
              ^io.output-link <ol>)
   (<ol> ^<attr> <val>)
   (<val> ^status << interrupted complete error >>)
-->
   (<ol> ^<attr> <val> -)
}

# smem stores

sp {apply*operator*remove-store-command
   :o-support
   (state <s> ^smem <smem>)
   (<smem> ^command <scmd>
           ^result.success <store>)
   (<scmd> ^store <store>)
-->
   (<scmd> ^store <store> -)
}

# wait

sp {propose*wait
   (state <s> ^attribute state
              ^choices none
             -^operator.name wait)
-->
   (<s> ^operator <o> +)
   (<o> ^name wait)
}

# metrics

sp {apply*recursive-retrieve*update-unnecessary-retrievals
   (state <s> ^name delivery-false
              ^operator <o>
              ^tasks.task <task>
              ^metrics <metrics>
             -^metrics-updated)
   (<o> ^name recursive-retrieve
        ^lti <task>)
   (<metrics> ^unnecessary-retrievals <n>)
-->
   (<metrics> ^unnecessary-retrievals <n> -
              ^unnecessary-retrievals (+ <n> 1))
   (<s> ^metrics-updated yes) 
}
