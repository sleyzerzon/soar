# <ignored> means that the value is ignored, key presence is used for "true"
#objects {
#	+<id> {
#		name = <name>;
#		*<p1> = <value>;								# user property
#		*<p1> = [<value1>, <value2>];					# user property
#		?apply.points = <int>;							# number of points to apply
#		?apply.energy = <int>;							# amount of energy to apply
#		?apply.energy.shields = <boolean>;				# condition for energy apply
#		?apply.health = <int>;							# amount of health to apply
#		?apply.health.shields-down = <boolean>;			# condition for health apply
#		?apply.missiles = <int>;						# number of missiles to apply
#		?apply.remove;									# remove on apply
#		?box-id = <int>;								# this box's id number (set after load)
#		?apply.reward-info;								# contains reward information
#		?apply.reward-info.positive-id = <int>;			# correct box id (set after load)
#		?apply.reward;									# is reward box
#		?apply.reward.correct;							# is the correct box (set randomly after load)
#		?apply.reward.positive = <int>;					# reward if correct
#		?apply.reward.negative = <int>;					# "reward" if incorrect, different from wrong box
#		?apply.reset;									# reset sim on apply
#		?apply.properties {								# these get moved to top level on applyProperties call
#			?<p1> = <value>;							# user apply property
#			?<p1> = [<value1>, <value2>];				# user apply property
#		}
#		?update.decay = <int>;							# decay apply.points by this amount on update
#		?update.fly-missile = <int>;					# increment update.fly-missile phase on update
#		?update.linger = <int>;							# decrement update.linger on update, remove at 0
#	}
#}

objects {
	b {
		name = bonusfood;
		edible = true;
		color = red;
		shape = square;
		id = bonusfood;
		apply.points = 10;
		apply.remove;
	}
	n {
		name = normalfood;
		edible = true;
		color = blue;
		shape = round;
		id = normalfood;
		apply.points = 5;
		apply.remove;
	}
	db {
		name = bonusfood;
		edible = true;
		color = red;
		shape = square;
		id = bonusfood;
		apply.points = 10;
		apply.remove;
		update.decay = 1;
	}
	dn {
		name = normalfood;
		edible = true;
		color = blue;
		shape = round;
		id = normalfood;
		apply.points = 5;
		apply.remove;
		update.decay = 1;
	}
	nn {
		name = normalfood;
		edible = true;
		color = blue;
		shape = round;
		id = normalfood;
		apply.points = -1;
		apply.remove;
	}
	w {
		name = wall;
		block = true;
		id = wall;
	}
	1 {
		name = box1;
		color = green;
		shape = square;
		box = true;
		id = box;
		apply.points = 20;
		apply.properties {
			status = open;
		}
	}
	2 {
		name = box2;
		color = orange;
		shape = square;
		box = true;
		id = box;
		apply.points = 10;
		apply.properties {
			status = open;
		}
	}
	p {
		name = permafood;
		color = purple;
		shape = round;
		move-apply = true;
		apply.points = 1;
	}
	i {
		name = infobox;
		shape = square;
		box = true;
		id = info-box;
		apply.properties {
			status = open;
		}
		apply.reward-info;
	}
	r {
		name = rewardbox;
		shape = square;
		box = true;
		id = box;
		apply.properties {
			status = open;
		}
		apply.reward;
		apply.reward.positive = 10;
		apply.reward.negative = 1;
		apply.reset;
	}		
}
