#!/usr/bin/python
import glob
import os
import SCons.Script
import sys
import SoarSCons

Import('swigenv')

conf = Configure(swigenv)
	
# ConfigureJNI and tolen from http://www.scons.org/wiki/JavaNativeInterface
# Modified from its original format
def walkDirs(path):
    """helper function to get a list of all subdirectories"""
    def addDirs(pathlist, dirname, names):
        """internal function to pass to os.path.walk"""
        for n in names:
            f = os.path.join(dirname, n)
            if os.path.isdir(f):
                pathlist.append(f)
    pathlist = [path]
    os.path.walk(path, addDirs, pathlist)
    return pathlist

def ConfigureJNI(env):
    """Configure the given environment for compiling Java Native Interface
       c or c++ language files."""

    #if not env.get('JAVAC'):
    #    print "The Java compiler must be installed and in the current path."
    #    return 0

    # first look for a shell variable called JAVA_HOME
    java_base = os.environ.get('JAVA_HOME')
    if not java_base:
        if sys.platform == 'darwin':
            # Apple's OS X has its own special java base directory
            java_base = '/System/Library/Frameworks/JavaVM.framework'
        else:
            # Search for the java compiler
            print "JAVA_HOME environment variable is not set. Searching for java... ",
            jcdir = os.path.dirname(env.WhereIs('javac'))
            if not jcdir:
                print "not found."
                return 0
            # assuming the compiler found is in some directory like
            # /usr/jdkX.X/bin/javac, java's home directory is /usr/jdkX.X
            java_base = os.path.join(jcdir, "..")
            print "found:", java_base

    if sys.platform == 'darwin':
        # Apple does not use Sun's naming convention
        java_headers = [os.path.join(java_base, 'include')]
        java_libs = [os.path.join(java_base, 'lib')]
    else:
        # windows and linux
        java_headers = [os.path.join(java_base, 'include')]
        java_libs = [os.path.join(java_base, 'lib')]
        # Sun's windows and linux JDKs keep system-specific header
        # files in a sub-directory of include
        if java_base == '/usr' or java_base == '/usr/local':
            # too many possible subdirectories. Just use defaults
            java_headers.append(os.path.join(java_headers[0], 'win32'))
            java_headers.append(os.path.join(java_headers[0], 'linux'))
            java_headers.append(os.path.join(java_headers[0], 'solaris'))
        else:
            # add all subdirs of 'include'. The system specific headers
            # should be in there somewhere
            java_headers = walkDirs(java_headers[0])

    # add Java's include and lib directory to the environment
    env.Append(CPPPATH = java_headers)
    env.Append(LIBPATH = java_libs)
    return 1

def JavaSources(dir):
        sources = list()
        for root, dirs, files in os.walk(dir):
                for f in files:
                        sources.append(os.path.join(root, f))
                if '.svn' in dirs:
                        dirs.remove('.svn')
        return sources

# This sets up the jni include files
if not ConfigureJNI(conf.env):
	print "Could not configure Java. If you know where java is on your system,"
	print "set environment variable JAVA_HOME to point to the directory containing"
	print "the Java include, bin, and lib directories."
	print "You may disable java, see help (scons -h)"
	print "Java Native Interface is required... Exiting"
	Exit(1)

env = conf.Finish()
#################

# This directory must exist for swig java stuff not to fail
if not env.GetOption('clean'):
	if not os.path.exists('src/sml'):
		if not os.path.exists('src'):
			os.mkdir('src')
		os.mkdir('src/sml')

####
# Produce wrapper cpp
wrapper_env = env.Clone()
# Scanner for dependencies in .i files
SWIGScanner = SCons.Scanner.ClassicCPP("SWIGScan",".i","CPPPATH",'^[ \t]*[%,#][ \t]*(?:include|import)[ \t]*(<|")([^>"]+)(>|")')
wrapper_env.Append(SCANNERS=[SWIGScanner])
java_sml_interface_wrap_target = '#Core/ClientSMLSWIG/Java/Java_sml_ClientInterface_wrap.cpp'
java_sml_interface_wrap_source = '#Core/ClientSMLSWIG/Java/Java_sml_ClientInterface.i'
wrapper_env.Command('#Core/ClientSMLSWIG/Java/src', java_sml_interface_wrap_source, 'mkdir Core/ClientSMLSWIG/Java/src')
wrapper_env.Command('#Core/ClientSMLSWIG/Java/src/sml', java_sml_interface_wrap_source, 'mkdir Core/ClientSMLSWIG/Java/src/sml')
# Side effect: this produces src/*.java files (the SML Java interface)
wrapper_env.Command(java_sml_interface_wrap_target, java_sml_interface_wrap_source, 'swig -o Core/ClientSMLSWIG/Java/Java_sml_ClientInterface_wrap.cpp -c++ -java -Wall -package sml -ICore/ClientSML/include -ICore/ElementXML/include -ICore/ConnectionSML/include -outdir Core/ClientSMLSWIG/Java/src/sml Core/ClientSMLSWIG/Java/Java_sml_ClientInterface.i')
wrapper_env.SideEffect('src/sml/*.java', java_sml_interface_wrap_target)
# Removes SML Java interface files
wrapper_env.Clean(java_sml_interface_wrap_target, 'src')
#### (end wrapper)

####
# Produce shared library
def determine_flags(env):
	# Remove some optimizations
	if env['CPPFLAGS'].find('fvisibility') >= 0:
		return ' -Wno-unused -fno-strict-aliasing -fvisibility=default'
	return ' -Wno-unused -fno-strict-aliasing'
def determine_shlib_target(env):
	# Things a bit different on Mac
	if sys.platform == 'darwin':
		env.Append(SHLINKFLAGS = ' -framework JavaVM')
		#env['SHLIBSUFFIX'] = '.jnilib'
		return 'libJava_sml_ClientInterface.jnilib'
	return 'Java_sml_ClientInterface'
shlib_env = env.Clone()
shlib_env.Prepend(CPPPATH = ['#Core/ClientSML/include', '#Core/ElementXML/include', '#Core/ConnectionSML/include', ])
shlib_env.Append(CPPFLAGS = determine_flags(shlib_env))
shlib_env.Append(LIBS = ['ClientSML', 'ConnectionSML', 'ElementXML', ])
shlib_env.Append(LIBPATH = ['#Core/ClientSML', '#Core/ConnectionSML', '#Core/ElementXML', ])
java_sml_interface_shlib_target = determine_shlib_target(shlib_env)
java_sml_interface_shlib_source = 'Java_sml_ClientInterface_wrap.cpp'
# Explicitly depend on the wrapper target
Depends(java_sml_interface_shlib_target, java_sml_interface_wrap_target)
java_sml_interface_shlib = shlib_env.SharedLibrary(java_sml_interface_shlib_target, java_sml_interface_shlib_source)
shlib_env.Install('#SoarLibrary/lib', java_sml_interface_shlib)
#### (end shlib)

####
# Produce jar
jar_env = env.Clone()
sml_jar_target = '#Core/ClientSMLSWIG/Java/sml.jar'
Depends(sml_jar_target, 'build.xml')
jar_env.Command(sml_jar_target, 'src/sml/*.java', 'ant -q')
#### (end jar)

