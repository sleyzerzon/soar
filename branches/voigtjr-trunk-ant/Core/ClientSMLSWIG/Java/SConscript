#!/usr/bin/python
import glob
import os
import SCons.Script
import sys
import SoarSCons

Import('env')

####
# Produce wrapper .cpp
wrapper_env = env.Clone()
# Scanner for dependencies in .i files
SWIGScanner = SCons.Scanner.ClassicCPP("SWIGScan",".i","CPPPATH",'^[ \t]*[%,#][ \t]*(?:include|import)[ \t]*(<|")([^>"]+)(>|")')
wrapper_env.Append(SCANNERS=[SWIGScanner])
java_sml_interface_wrap_target = '#Core/ClientSMLSWIG/Java/Java_sml_ClientInterface_wrap.cpp'
java_sml_interface_wrap_source = '#Core/ClientSMLSWIG/Java/Java_sml_ClientInterface.i'
# Side effect: this produces src/*.java files (the SML Java interface)
wrapper_env.Command(java_sml_interface_wrap_target, java_sml_interface_wrap_source, 'swig -o Core/ClientSMLSWIG/Java/Java_sml_ClientInterface_wrap.cpp -c++ -java -Wall -package sml -ICore/ClientSML/include -ICore/ElementXML/include -ICore/ConnectionSML/include -outdir Core/ClientSMLSWIG/Java/src Core/ClientSMLSWIG/Java/Java_sml_ClientInterface.i')
# Removes SML Java interface files
wrapper_env.Clean(java_sml_interface_wrap_target, 'src')
#### (end wrapper)

####
# Produce shared library
def determine_flags(env):
	# Remove some optimizations
	if env['CPPFLAGS'].find('fvisibility') >= 0:
		return ' -Wno-unused -fno-strict-aliasing -fvisibility=default'
	return ' -Wno-unused -fno-strict-aliasing'
def determine_shlib_target(env):
	# Things a bit different on Mac
	if sys.platform == 'darwin':
		env.Append(SHLINKFLAGS = ' -framework JavaVM')
		#env['SHLIBSUFFIX'] = '.jnilib'
		return 'libJava_sml_ClientInterface.jnilib'
	return 'Java_sml_ClientInterface'
shlib_env = env.Clone()
shlib_env.Prepend(CPPPATH = ['#Core/ClientSML/include', '#Core/ElementXML/include', '#Core/ConnectionSML/include', ])
shlib_env.Append(CPPFLAGS = determine_flags(shlib_env))
shlib_env.Append(LIBS = ['ClientSML', 'ConnectionSML', 'ElementXML', ])
shlib_env.Append(LIBPATH = ['#Core/ClientSML', '#Core/ConnectionSML', '#Core/ElementXML', ])
java_sml_interface_shlib_target = determine_shlib_target(shlib_env)
java_sml_interface_shlib_sources = [ 'Java_sml_ClientInterface_wrap.cpp', ]
Depends(java_sml_interface_shlib_target, java_sml_interface_wrap_source)
Depends(java_sml_interface_shlib_target, '#Core/ClientSMLSWIG/Java/JavaCallbackByHand.h')
java_sml_interface_shlib = shlib_env.SharedLibrary(java_sml_interface_shlib_target, java_sml_interface_shlib_sources)
shlib_env.Install('#SoarLibrary/lib', java_sml_interface_shlib)
#### (end shlib)

####
# Produce jar
jar_env = env.Clone()
sml_jar_target = '#Core/ClientSMLSWIG/Java/sml.jar'
Depends(sml_jar_target, 'build.xml')
Depends(sml_jar_target, java_sml_interface_shlib)
jar_env.Command(sml_jar_target, SoarSCons.JavaSources('src'), 'ant', chdir=1)
if jar_env.GetOption('clean'):
	os.system('ant clean')
#### (end jar)

