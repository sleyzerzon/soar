#!/usr/bin/python
# Project: Soar <http://soar.googlecode.com>
# Author: Jonathan Voigt <voigtjr@gmail.com>
#
import os
import SCons.Script
import sys

# adapted from http://www.scons.org/wiki/JavaNativeInterface
def ConfigureJNI():
	base = os.environ.get('JAVA_HOME')
	if not base:
		if sys.platform == 'darwin':
			# Apple's OS X has its own special java base directory
			base = '/System/Library/Frameworks/JavaVM.framework'

		else:
			# Search for the java compiler
			jcdir = os.path.dirname(env.WhereIs('javac'))
			if not jcdir:
				return None
			# assuming the compiler found is in some directory like
			# /usr/jdkX.X/bin/javac, java's home directory is /usr/jdkX.X
			base = os.path.split(jcdir)[0]

	if sys.platform == 'darwin':
		headers = [os.path.join(base, 'Headers')]
		libs = [os.path.join(base, 'Libraries')]
	else:
		headers = [os.path.join(base, 'include')]
		libs = [os.path.join(base, 'lib')]
		if sys.platform == 'win32':
			headers.append(os.path.join(base, 'include', 'win32'))
		elif sys.platform.startswith('linux'):
			headers.append(os.path.join(base, 'include', 'linux'))
		else:
			return None
	
	return (headers, libs)

config = ConfigureJNI()
if config == None:
	print "Could not configure Java. If you know where java is on your system,"
	print "set environment variable JAVA_HOME to point to the directory containing"
	print "the Java include, bin, and lib directories."
	Return()

Import('env')
lib_install_dir = os.path.join(env['PREFIX'], 'lib')
clone = env.Clone()	
clone.Append(
	LIBS = 'SoarClient SoarKernel'.split(),
	CPPPATH = config[0],
	LIBPATH = config[1] + [lib_install_dir]
)

if clone['CXX'] == 'g++':
	if clone['VISHIDDEN']:
		clone['CPPFLAGS'].remove('-fvisibility=hidden')
		clone.Append(CPPFLAGS = ['-fvisibility=default'])
	clone.Append(CPPFLAGS = '-Wno-unused -fno-strict-aliasing'.split())

if sys.platform == 'darwin':
	clone.Append(SHLINKFLAGS = ' -framework JavaVM')
	clone.Replace(SHLIBSUFFIX = '.jnilib')

name = 'Java_sml_ClientInterface'
interface = clone.File(name + '.i')
wrapper = clone.File(name + '_wrap.cpp')
srcdir = clone.Dir('src')
smldir = srcdir.Dir('sml')
source = smldir.File('sml.java')
classdir = clone.Dir('classes')
jar = clone.File('sml.jar')

incs = ' '.join('-I%s' % GetBuildPath(d) for d in clone['CPPPATH'])
swig_cmd = 'swig %s -o %s -c++ -java -Wall -package sml -outdir %s %s' % (incs, wrapper, smldir, interface)

# Custom scanner for internal dependencies:
SWIGScanner = SCons.Scanner.ClassicCPP("SWIGScan",".i","CPPPATH",'^[ \t]*[%,#][ \t]*(?:include|import)[ \t]*(<|")([^>"]+)(>|")')
clone.Append(SCANNERS = [ SWIGScanner ])

clone.Command([wrapper, source], interface, swig_cmd, chdir=clone.Dir('.'))
clone.Clean(wrapper, [srcdir, classdir])
shlib = clone.SharedLibrary(name, wrapper)
clone.Java(classdir, srcdir)
clone['JARCHDIR'] = classdir
smljar = clone.Jar(jar, classdir)

lib_install = clone.Install(lib_install_dir, shlib)
jar_install = clone.Install(lib_install_dir, smljar)
env.Alias('sml_java', [lib_install, jar_install])
