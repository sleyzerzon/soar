PDDL Translator Readme

This directory contains a Java program that can translate a domain
specification written in the Planning Domain Definition Language (PDDL)
1.2 into a Python SML environment and a set of Soar rules that propose
legal operators. The program was generated by ANTLR v3.1.3 from a PDDL
grammar written by Zeyn Saigol at University of Birmingham.

PDDL domains are usually described in two files - one that defines
the domain dynamics, and one that defines the initial conditions of a
specific problem within that domain. You must translate both of these
files into Python SML code in order to run the environment.

To run the translator, make sure that antlr-3.1.3.jar and pddl_trans.jar
are in your Java classpath, and enter the following command to the shell:

java translate <pddl file>

If the PDDL file is a domain definition, the translator will output
two files:

output/<domain_name>/<domain_name>.py
output/<domain_name>/rules.soar

If the PDDL file is a problem definition, the translator will output a
single file:

output/<domain_name>/<problem_name>.py

In addition to these files, there are also several Python scripts that
need to be included by all domains in the python/ subdirectory, as well
as some rules that need to be sourced by all agents in pddl-base.soar.

To run an agent in a generated environment, you must create an instance
of the problem class (NOT the domain class), then create an instance
of SmlCommandHandler using the problem object and an SML agent. This
will register callback functions with the Soar agent to initialize the
environment state on the input link and change it in response to commands
sent to the output link. See example.py for details on how to do this.
