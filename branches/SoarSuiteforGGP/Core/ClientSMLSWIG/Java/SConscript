#!/usr/bin/python
import glob
import os
import SCons.Script
import sys

Import('env')
env = env.Copy()
env.Prepend(CPPPATH = [
			'#Core/ClientSML/include',
			'#Core/ElementXML/include',
			'#Core/ConnectionSML/include'
			])

if sys.platform == 'cygwin':
	env.Append(CPPFLAGS = ' -D_USRDLL')
	env['no_import_lib'] = 1

SWIGScanner = SCons.Scanner.ClassicCPP(
	"SWIGScan",
	".i",
	"CPPPATH",
	'^[ \t]*[%,#][ \t]*(?:include|import)[ \t]*(<|")([^>"]+)(>|")'
)

env.Append(SCANNERS=[SWIGScanner])

if os.name == 'posix':
	if env['CPPFLAGS'].find('fvisibility') >= 0:
		env.Append(CPPFLAGS = ' -Wno-unused -fno-strict-aliasing -fvisibility=default')
	else:
		env.Append(CPPFLAGS = ' -Wno-unused -fno-strict-aliasing')

libadd = [
	   'ClientSML',
	   'ConnectionSML',
	   'ElementXML',
	   ]
	   
if sys.platform == 'cygwin':
	libadd.extend(['ws2_32',])

libpath = [ 
	    '#Core/ClientSML',
	    '#Core/ConnectionSML',
	    '#Core/ElementXML', 
	    ]

swigflags = '-c++ -java -Wall -package sml -ICore/ClientSML/include -ICore/ElementXML/include -ICore/ConnectionSML/include -outdir Core/ClientSMLSWIG/Java/build'

###
# Changes suggested by Markus
env_jni = env.Copy()
targetname = 'Java_sml_ClientInterface'
if sys.platform == 'darwin':
	env_jni.Append(SHLINKFLAGS = ' -framework JavaVM')
	targetname = 'libJava_sml_ClientInterface.jnilib'
	#env_jni['SHLIBSUFFIX'] = '.jnilib'
elif sys.platform == 'cygwin':
    env_jni.Append(CCFLAGS = '-mno-cygwin')
    env_jni.Append(SHLINKFLAGS = '-mno-cygwin -Wl,--kill-at')
    targetname = 'Java_sml_ClientInterface'

Java_sml_ClientInterface = env_jni.SharedLibrary(targetname, glob.glob('*.i'), 
												 LIBS = libadd,LIBPATH = libpath, SWIGFLAGS = swigflags, 
												 SWIGCXXFILESUFFIX = "_wrap.cpp")

#voigtjr: for some reason it isn't picking this dependency up:
Depends(Java_sml_ClientInterface, '#Core/ElementXML')

#Java_sml_ClientInterface = env.SharedLibrary('Java_sml_ClientInterface', glob.glob('*.i'), LIBS = libadd, LIBPATH = libpath, SWIGFLAGS = swigflags, SWIGCXXFILESUFFIX = "_wrap.cpp")
# end changes suggested by Markus
###

env.Install('#SoarLibrary/lib', Java_sml_ClientInterface)

sml_jar_javac = env.Java('classes', 'build')

env['JARCHDIR'] = 'Core/ClientSMLSWIG/Java/classes'
sml_jar = env.Jar(target = 'sml.jar', source = 'classes')

env.Install('#SoarLibrary/bin', sml_jar)
