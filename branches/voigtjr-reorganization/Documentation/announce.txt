Soar 9.0.1, 9.1.1, 9.2.0 Release Notes
======================================

This release of Soar continues the 9.x series of releases during which we
expect to introduce several new mechanisms. 

Soar can be downloaded from the Soar homepage at:

        http://sitemaker.umich.edu/soar

These Soar releases include all source code, many demo programs, and a number
of applications that serve as examples of how to interface Soar to an external
environment.  There is support for integrating Soar with C++, Java, Tcl, Python
and C# applications.  Many tools that aid in development of Soar programs are
also included.

Soar 9.0.1 (Soar-RL)
====================

Soar 9.0 includes reinforcement learning code (Soar-RL), which was first
released alongside the 8.6.4 beta. Soar 9.0.1 is primarily a maintenance
release, although many bugs have been fixed and minor features added.

Soar-RL is the architectural integration of reinforcement learning (RL) with
Soar. The RL mechanism will automatically tune the values of
numeric-indifferent preference rules based on reward generated while a Soar
agent executes.  These values represent the expected discounted sum of future
rewards the agent will receive if it selects that operator for states matched
by the condition of the rule.  See the RL manual and tutorial in Documentation.

To see Soar-RL in action right away, try the Water Jug RL demo (it can be
loaded from the Demos->Water Jug menu in the Java Debugger). To see the effects
of RL, run it to completion, then init-soar and run it again. Repeat 4-5 times
to see it reach optimal behavior. (Note: the agent may occasionally perform
non-optimal behavior even after it has converged because of its exploration
policy. See the RL manual and tutorial for details).

Soar 9.1.1 (Episodic Memory)
============================

Soar 9.1 includes an Episodic Memory module, which was first released as Soar
9.1.0.  Soar 9.1.1 is primarily a maintenance release with bugs fixed and minor
features added. 9.1 also includes all of the features from 9.0 (Soar-RL).

Soar-EpMem is a task-independent, architectural integration of an artificial
episodic memory (EpMem) with Soar.  The EpMem mechanism will automatically
record episodes as a Soar agent executes.  These episodes can later be queried
and retrieved in order to improve performance on future tasks. See the EpMem
manual for details.

Soar 9.2.0 (Semantic Memory)
============================

Soar 9.2 includes a Semantic Memory module, and this release of Soar 9.2.0 is
the first official release of Soar with semantic memory capabilities. 9.2 also
includes all features from 9.1 (EpMem) and 9.0 (Soar-RL).

Soar-SMem is a task-independent, architectural integration of an artificial
semantic memory (SMem) with Soar.  The SMem mechanism facilitates deliberate
recording and querying of semantic chunks as a Soar agent executes.

Installation Requirements
=========================

These releases are generated for Windows, Linux, and OSX systems.  Windows XP
and Vista are supported, as well as 32- and 64-bit architectures.

* IMPORTANT NOTE ABOUT 64-BIT BINARIES: To use the 64-bit Soar tools with Java
  (such as the Java debugger) you must be using the 64-bit JVM. Attempting to
  start 64-bit Soar programs with the 32-bit JVM on Windows will cause a
  javaw.exe process to hang open (terminate it using task manager). Also note:
  attempting to start 32-bit Java tools, such as those included in previous
  distributions of Soar, with a 64-bit JVM will also result in the hanging
  javaw.exe process.

* Sun Java 1.5 or newer is required to use the Java applications, including the
  debugger (Java must be available in the path). Get it at
  http://java.sun.com/. Most operating systems probably already have Java
  installed. NOTE: Java 1.4.2 is no longer supported.

* The Soar Suite needs under 100 MB for regular use, but closer to 1 GB of disk
  space for object and debugging files if rebuilding all projects.

* Due to path length limits on some versions of Windows, it is recommended
  to extract Soar to the C:\ root or similar. Some parts of the Soar Suite
  directory structure are deep, so users wishing to put Soar in a deep location
  on their machines (such as 
  C:\Documents and Settings\username\My Documents\Visual Studio Projects) may 
  run into issues.

* Tcl version 8.4 is required for the Tcl SML interface. Threaded Tcl builds
  are not supported. Windows 64-bit does not include the Tcl SML interface.
  Your installed Tcl architecture must be the same (32 or 64 bit) as the Soar
  binaries for the Tcl SML interface to load correctly.

* The included Python libraries support Python 2.5.  Python 2.6 and 3 support
  requires a rebuild of the ClientSMLPython project. Your installed Python
  architecture must be the same (32 or 64 bit) as the Soar binaries for the 
  Python SML interface to load correctly.

Build Requirements
==================

Binaries are released for Windows/Linux/OS X, so building is not required.  For
those on other platforms or developers:

* Compilers: Windows: Visual Studio 2005 SP1 or 2008, Linux/OS X: GCC 3.3 
  or later

* SWIG 1.3.31 or later is required to build with cross-language support (e.g.
  to use the Java debugger).

* Apache ant is required to build Java projects.

* Only the Sun JDK will work, 1.5 or newer.

* On Linux/OS X: Scons, Python 2.5 or newer, Tcl 8.4

* Please see detailed build instructions available on http://msoar.org

New in 9.0.1, 9.1.1, 9.2.0
==========================

* Soar-RL reward link is now limited to reward-link.reward.value instead of
  reward-link.<id>.value, see documentation.

* Native 64-bit platform support for Windows, Linux, OSX (bugs 1139, 
  1064, 1036, 531) resulting in different, usually better performance
  on these platforms, and definite ease of compilation and integration
  with tools such as Java and Python.

* Visual Studio 2008 is now supported and its use is recommended. 
  Visual Studio 2005 support will likely be dropped with the next
  release.

* Soar 7 mode has been completely removed.

* Preference semantics regarding the generation of operator conflict
  impasses have changed, see appendix D in the Soar Manual for details.

* Apache ant is now used to build java projects. This results in much
  faster and reliable Java builds.

Detailed fixes:

* Bug 873: Match-time interrupt with :interrupt production tag re- enabled. 

* Bug 234: Preference semantics changed regarding operator conflicts.

* Bug 1145: dont-learn/force-learn RHS actions fixed.

* Bug 1144: Crash bug related to chunking caveat mentioned in manual section
  4.6.5 fixed, helpful error message displayed instead.

* Bug 1011: Impasses that existed in a superstate were not getting regenerated
  if the sub-state was removed due to the GDS, this has been fixed.

* Bug 878: With verbose enabled, the general reason states are getting removed
  is printed when the state is removed.

* Bug 510: Chunking bug fixed when trying to chunk over negated, conjuntive
  conditions.

* Bug 1121: RL template production (:template) bug fixed that was failing to
  correctly generate productions if variables starting with "o" were used.

* Bug 882: Changing trace filters in the Soar Java Debugger no longer collapses
  the whole trace.

* Bug 1143: Direct I/O functions for WMEs in SML were acting in the wrong phase
  (usually the output phase instead of the input phase), changed these
  functions to instead buffer their actions for later execution in the input
  phase.

* Bug 866: Optimization settings with Visual Studio tweaked.

* Bug 517: Fixed a bug where an unbound variable included in a negated
  condition where a bound variable was required would crash Soar.

* Bug 1138: Fixed FindByAttribute bug not handling piped strings correctly and,
  as a result, made it impossible to find some WMEs created on the kernel side.

* Bug 867: Extended SML Identifier interface adding a number of methods that
  don't have the redundant Agent pointer in their argument list.

* Bug 1049: Fixed io_header_output memory leak.

* Bug 1060: CreateSharedIdWME now explicitly fails if an existing WME is
  specified, violating the working memory set restriction.

* Bug 987, 1013: Echo command now ignores braces, pipes and other Soar
  characters so that better ascii art is possible.

* Bug 1084, 1124, 1141: gp command extended with better error messages, maximum
  rule threshold, VisualSoar support, newline indifference.

* Bug 1057: Many buffers replaced with growable, safer containers such as
  std::string and std::stringstream in performance-indifferent code.

* Bug 776: New random command implemented and random right hand side functions
  implemented for random numbers on command.

* Bug 1106: New print --exact flag added to avoid printing unnecessary copies
  of objects with multi-valued attributes. 

* Bug 927: Command line interface made more reentrant to avoid weird "true"
  results output with multiple clients connected to the agent.

* Bug 952: New agents can now be created on the fly, during a run.

* Bug 1104: Fixed TestCLI hang if exited during run.

* Bug 1033: CreateKernelInNewThread error message fixed.

* Bug 794: edit-production now reports failure if visual soar is not connected.

* Bug 1043: Added SML Agent methods to launch the debugger.

* Bug 1140: RHS halt does not cancel multiple Soar2D runs.

* Bug 1099: Find function in Soar Java Debugger scrolls window to result now.

* Bug 638: Tutorials updated.

* Bug 931: Multiple productions can be pasted in to debugger at same time now.

* Bug 1012: Unterminated strings in productions fail at parse-time now.

* Bug 1025: GetOutputLink() no longer returns null.

* Bug 1042: Debugger command line options fixed.

* Bug 1045: Status complete was getting added twice on output link commands.

* Bug 1056: Kernel changed to use const char more.

* Bug 627: Help command lists folder instead of using command-names file,
  allowing arbitrary help topics to be easily added.

* Bug 1105: Capture/replay input implemented.

* Large Soar production file parsing speed improvements.

* Soar2d rewritten, faster, easier to configure.

* Various memory leaks fixed, some major.

* Console logging fixed (clog command).

* Build procedure streamlined on all platforms.

* Removed all build warnings.

* Added many regression tests.

If any other issues or bugs are found, please send mail to:

soar-sml-list@lists.sourceforge.net (preferred)
   -or-
soar-group@lists.sourceforge.net

