#include <iostream>
#include <stdlib.h>
#include <malloc.h>

using namespace std;

/*
awk 'BEGIN {srand(1); for(i = 0; i < 100; i++) { printf("%f, ", rand()); } }'
*/

float a1[] = {0.610198, 0.661343, 0.872396, 0.056247, 0.340972, 0.767681, 0.023067, 0.673116, 0.295499, 0.959346, 0.893104, 0.254544, 0.342930, 0.077765, 0.870760, 0.926801, 0.485812, 0.528565, 0.366809, 0.739908, 0.381959, 0.527647, 0.603178, 0.942404, 0.665621, 0.774524, 0.058148, 0.732319, 0.425778, 0.957906, 0.513986, 0.764910, 0.911928, 0.324044, 0.372370, 0.576992, 0.725002, 0.907095, 0.659452, 0.157513, 0.506100, 0.905753, 0.370686, 0.505024, 0.538476, 0.380069, 0.000840, 0.519618, 0.729344, 0.690187, 0.921965, 0.621715, 0.420145, 0.955482, 0.826523, 0.296604, 0.951375, 0.258035, 0.933464, 0.565647, 0.813559, 0.506586, 0.846764, 0.456962, 0.118305, 0.990701, 0.046948, 0.387921, 0.155601, 0.178669, 0.851784, 0.147283, 0.106629, 0.999733, 0.254277, 0.597208, 0.674973, 0.545733, 0.472534, 0.958346, 0.486911, 0.853720, 0.593628, 0.975587, 0.503234, 0.106413, 0.048816, 0.714437, 0.488961, 0.547109, 0.279428, 0.705206, 0.663112, 0.177098, 0.942008, 0.853937, 0.177981, 0.550350, 0.127343, 0.852345, 0.610198, 0.661343, 0.872396, 0.056247, 0.340972, 0.767681, 0.023067, 0.673116, 0.295499, 0.959346, 0.893104, 0.254544, 0.342930, 0.077765, 0.870760, 0.926801, 0.485812, 0.528565, 0.366809, 0.739908, 0.381959, 0.527647, 0.603178, 0.942404, 0.665621, 0.774524, 0.058148, 0.732319, 0.425778, 0.957906, 0.513986, 0.764910, 0.911928, 0.324044, 0.372370, 0.576992, 0.725002, 0.907095, 0.659452, 0.157513, 0.506100, 0.905753, 0.370686, 0.505024, 0.538476, 0.380069, 0.000840, 0.519618, 0.729344, 0.690187, 0.921965, 0.621715, 0.420145, 0.955482, 0.826523, 0.296604, 0.951375, 0.258035, 0.933464, 0.565647, 0.813559, 0.506586, 0.846764, 0.456962, 0.118305, 0.990701, 0.046948, 0.387921, 0.155601, 0.178669, 0.851784, 0.147283, 0.106629, 0.999733, 0.254277, 0.597208, 0.674973, 0.545733, 0.472534, 0.958346, 0.486911, 0.853720, 0.593628, 0.975587, 0.503234, 0.106413, 0.048816, 0.714437, 0.488961, 0.547109, 0.279428, 0.705206, 0.663112, 0.177098, 0.942008, 0.853937, 0.177981, 0.550350, 0.127343, 0.852345 };
float a2[] = {0.237788, 0.291066, 0.845814, 0.152208, 0.585537, 0.193475, 0.810623, 0.173531, 0.484983, 0.151863, 0.366957, 0.491736, 0.910094, 0.265257, 0.893188, 0.220351, 0.631798, 0.571077, 0.332158, 0.104455, 0.502931, 0.567394, 0.854165, 0.040141, 0.108022, 0.639396, 0.013111, 0.720184, 0.101814, 0.482945, 0.254355, 0.676697, 0.896782, 0.759896, 0.720292, 0.907623, 0.928611, 0.377663, 0.899756, 0.778880, 0.324255, 0.194231, 0.995553, 0.161296, 0.708034, 0.501519, 0.936301, 0.716323, 0.105190, 0.209205, 0.559397, 0.705432, 0.078234, 0.510530, 0.196197, 0.274211, 0.638602, 0.448208, 0.039872, 0.467251, 0.077757, 0.038100, 0.160044, 0.397832, 0.688898, 0.534712, 0.686920, 0.272457, 0.465933, 0.276555, 0.450086, 0.935069, 0.086932, 0.453889, 0.945625, 0.855719, 0.120976, 0.014164, 0.234515, 0.866313, 0.437390, 0.769548, 0.874003, 0.376934, 0.944328, 0.798493, 0.838634, 0.946656, 0.586052, 0.599163, 0.319347, 0.421162, 0.904107, 0.158462, 0.835159, 0.731942, 0.491837, 0.212129, 0.119752, 0.048363, 0.237788, 0.291066, 0.845814, 0.152208, 0.585537, 0.193475, 0.810623, 0.173531, 0.484983, 0.151863, 0.366957, 0.491736, 0.910094, 0.265257, 0.893188, 0.220351, 0.631798, 0.571077, 0.332158, 0.104455, 0.502931, 0.567394, 0.854165, 0.040141, 0.108022, 0.639396, 0.013111, 0.720184, 0.101814, 0.482945, 0.254355, 0.676697, 0.896782, 0.759896, 0.720292, 0.907623, 0.928611, 0.377663, 0.899756, 0.778880, 0.324255, 0.194231, 0.995553, 0.161296, 0.708034, 0.501519, 0.936301, 0.716323, 0.105190, 0.209205, 0.559397, 0.705432, 0.078234, 0.510530, 0.196197, 0.274211, 0.638602, 0.448208, 0.039872, 0.467251, 0.077757, 0.038100, 0.160044, 0.397832, 0.688898, 0.534712, 0.686920, 0.272457, 0.465933, 0.276555, 0.450086, 0.935069, 0.086932, 0.453889, 0.945625, 0.855719, 0.120976, 0.014164, 0.234515, 0.866313, 0.437390, 0.769548, 0.874003, 0.376934, 0.944328, 0.798493, 0.838634, 0.946656, 0.586052, 0.599163, 0.319347, 0.421162, 0.904107, 0.158462, 0.835159, 0.731942, 0.491837, 0.212129, 0.119752, 0.048363};

typedef float afloat __attribute__((aligned (16)));

float d[200];

/* everything vectorizes, but not as fast as it can be, rt = 0.65 */
inline float foo1(int n) {
	int j;
	float s = 0.;
	for(j = 0; j < n; ++j) {
		d[j] = a1[j] - a2[j];
	}
	for(j = 0; j < n; ++j) {
		d[j] *= d[j];
	}
	for(j = 0; j < n; ++j) {
		s += d[j];
	}

	return s;
}

/* seems like the winner right now, rt = 0.4 */
inline float foo2(int n) {
	int j;
	float s = 0.;
	for(j = 0; j < n; ++j) {
		d[j] = (a1[j] - a2[j]) * (a1[j] - a2[j]);
	}
	for(j = 0; j < n; ++j) {
		s += d[j];
	}

	return s;
}

inline float foo21(int n, afloat * __restrict__ a3, afloat * __restrict__ a4, afloat * __restrict__ w) {
	int j;
	float s = 0.;
	for(j = 0; j < n; ++j) {
		w[j] = (a3[j] - a4[j]);
	}
	for(j = 0; j < n; ++j) {
		s += w[j];
	}

	return s;
}

/* won't vectorize, rt = .947 */ 
inline float foo3(int n) {
	int j;
	float s = 0.;
	for(j = 0; j < n; ++j) {
		s += (a1[j] - a2[j]) * (a1[j] - a2[j]);
	}

	return s;
}

/* vectorizes but allocation is slow, rt = 0.9 */
inline float foo4(int n) {
	int j;
	float s = 0.;
	float * d1 = (float*) malloc(n * sizeof(float));
	for(j = 0; j < n; ++j) {
		d1[j] = (a1[j] - a2[j]) * (a1[j] - a2[j]);
	}
	for(j = 0; j < n; ++j) {
		s += d1[j];
	}
	free(d1);
	return s;
}

inline float foo5(int n) {
	int j;
	float s = 0.;
	float d1[n];
	for(j = 0; j < n; ++j) {
		d1[j] = (a1[j] - a2[j]) * (a1[j] - a2[j]);
	}
	for(j = 0; j < n; ++j) {
		s += d1[j];
	}
	return s;
}

int main(int argc, char *argv[]) {
	int i, n = 128;
	float s;
	float *w, *a3, *a4;
	w = (float*) memalign(16, sizeof(float) * n);
	a3 = (float*) memalign(16, sizeof(float) * n);
	a4 = (float*) memalign(16, sizeof(float) * n);

	//cout << a3 << endl;
	//cout << a4 << endl;

	for(i = 0; i < 10000000; ++i) {
		//s += foo2(n);
		s += foo21(n, a3, a4, w);
	}
	cout << s << endl;
	return 0;
}
