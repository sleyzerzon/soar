waitsnc -e

sp {init
(state <s> ^superstate nil)
-->
(<s> ^time 0 ^auto-control t)
}


#sp {make-free-move-model
#(state <s> ^superstate nil ^svs <svs>)
#(<svs> ^spatial-scene.child.id splinter ^command <c>)
#-->
#(<c> ^create-model <cm>)
#(<cm> ^name free-move ^type splinter)
#}
#
## for now, assume that colliding with the box doesn't affect the robot's movement
#sp {assign-free-move-model
#(state <s> ^superstate nil ^svs.command <c>)
#(<c> ^create-model <cm>)
#(<cm> ^name free-move ^status success)
#-->
#(<c> ^assign-model <am>)
#(<am> ^name free-move ^inputs <in> ^outputs <out>)
#(<in> ^px splinter:px
#      ^py splinter:py
#      ^rz splinter:rz
#      ^vx splinter:vel_0
#      ^vy splinter:vel_1
#      ^rtz splinter:rotation_rate_2
#      ^lrps splinter:left_rads_per_sec
#      ^rrps splinter:right_rads_per_sec
#      ^lvolts left
#      ^rvolts right)
#(<out> ^px splinter:px
#       ^py splinter:py
#       ^rz splinter:rz
#       ^vx splinter:vel_0
#       ^vy splinter:vel_1
#       ^rtz splinter:rotation_rate_2
#       ^lrps splinter:left_rads_per_sec
#       ^rrps splinter:right_rads_per_sec)
#}

#sp {make-collision-model
#(state <s> ^superstate nil ^svs.command <c>)
#-->
#(<c> ^create-model <cm>)
#(<cm> ^name collision
#      ^type lwr
#      ^log |collision.arff|
#      ^test t
#      ^inputs <in> ^outputs <out>)
#(<in> ^spx  <spx>
#      ^spy  <spy>
#      ^srz  <srz>
#      ^bpx  <bpx>
#      ^bpy  <bpy>
#      ^brz  <brz>
#      ^vx   <vx>
#      ^vy   <vy>
#      ^lvolts <lvolts>
#      ^rvolts <rvolts>)
#(<out> ^bpx <obpx>
#       ^bpy <obpy>
#       ^brz <obrz>)
#}
#
#sp {assign-collision-model
#(state <s> ^superstate nil 
#           ^svs.command <c>
#           ^intersect ( ^a splinter ^b box1))
#-->
#(<c> ^assign-model <am>)
#(<am> ^name collision ^inputs <in> ^outputs <out>)
#(<in> ^spx splinter:px
#      ^spy splinter:py
#      ^srz splinter:rz
#      ^bpx box1:px
#      ^bpy box1:py
#      ^brz box1:rz
#      ^vx splinter:vel_0
#      ^vy splinter:vel_1
#      ^lvolts left
#      ^rvolts right)
#(<out> ^bpx box1:px
#       ^bpy box1:py
#       ^brz box1:rz)}

sp {create-manual-model
(state <s> ^superstate nil ^svs <svs>)
(<svs> ^spatial-scene.child.id splinter ^command <c>)
-->
(<c> ^create-model <cm>)
(<cm> ^name manual
      ^type splinterenv
      ^test t)
}

sp {assign-manual-model
(state <s> ^superstate nil ^svs.command <c>)
(<c> ^create-model <cm>)
(<cm> ^name manual ^status success)
-->
(<c> ^assign-model <am>)
(<am> ^name manual ^inputs <in> ^outputs <out>)
(<in> ^box1:px        box1:px
      ^box1:py        box1:py
      ^box1:vx        box1:vx
      ^box1:vy        box1:vy
      ^box1:fx        box1:fx
      ^box1:fy        box1:fy
      ^box1:rz        box1:rz
      ^box1:av        box1:av
      ^box1:t         box1:t

      ^splinter:px    splinter:px
      ^splinter:py    splinter:py
      ^splinter:vx    splinter:vx
      ^splinter:vy    splinter:vy
      ^splinter:fx    splinter:fx
      ^splinter:fy    splinter:fy
      ^splinter:rz    splinter:rz
      ^splinter:av    splinter:av
      ^splinter:t     splinter:t
      ^splinter:lrps  splinter:lrps
      ^splinter:rrps  splinter:rrps

      ^lvolts         left
      ^rvolts         right)

(<out> ^box1:px        box1:px
       ^box1:py        box1:py
       ^box1:vx        box1:vx
       ^box1:vy        box1:vy
       ^box1:fx        box1:fx
       ^box1:fy        box1:fy
       ^box1:rz        box1:rz
       ^box1:av        box1:av
       ^box1:t         box1:t
 
       ^splinter:px    splinter:px
       ^splinter:py    splinter:py
       ^splinter:vx    splinter:vx
       ^splinter:vy    splinter:vy
       ^splinter:fx    splinter:fx
       ^splinter:fy    splinter:fy
       ^splinter:rz    splinter:rz
       ^splinter:av    splinter:av
       ^splinter:t     splinter:t
       ^splinter:lrps  splinter:lrps
       ^splinter:rrps  splinter:rrps)
}


sp {gen-target
(state <s> ^superstate nil ^svs.command <c>)
-->
(<c> ^generate <g1>)
(<g1> ^parent world
      ^node <n1>)
(<n1> ^type gen
      ^name target1
      ^points.type origin
      ^pos <pos1>)
(<pos1> ^type vec3
        ^x 6.0
        ^y 6.0
        ^z 0.0)
}

# sp {gen-splinter-target-line
# (state <s> ^superstate nil ^svs
# 	( ^spatial-scene.child.id target1
# 	  ^command <c>))
# -->
# (<c> ^generate <g>)
# (<g> ^parent world ^node <n>)
# (<n> ^type gen
#      ^name splinter-target-line
#      ^points <p>)
# (<p> ^type ptlist ^a <pa> ^b <pb>)
# (<pa> ^type node_centroid ^node <na>)
# (<na> ^type node ^name splinter)
# (<pb> ^type node_centroid ^node <nb>)
# (<nb> ^type node ^name target1)
# }

sp {propose*count-time
(state <s> ^superstate nil ^time <t>)
-->
(<s> ^operator <o> +)
(<o> ^name count-time)
}

sp {apply*count-time
(state <s> ^superstate nil
           ^time <t>
           ^operator.name count-time)
-->
(<s> ^time <t> - (+ <t> 1))
}

sp {splinter-box-int
(state <s> ^superstate nil 
           ^svs
	( ^command <c> 
	  ^spatial-scene 
		( ^child.id splinter 
		  ^child.id box1)))
-->
(<c> ^extract <e>)
(<e> ^type intersect ^a <a> ^b <b>)
(<a> ^type node ^name splinter)
(<b> ^type node ^name box1)}

# sp {line-box-int
# (state <s> ^superstate nil
#            ^svs
# 	( ^command <c>
# 	  ^spatial-scene
# 		( ^child.id splinter-target-line
# 		  ^child.id box1 )))
# -->
# (<c> ^extract <e>)
# (<e> ^type intersect ^a <a> ^b <b>)
# (<a> ^type node ^name splinter-target-line)
# (<b> ^type node ^name box1)}

sp {report-int
(state <s> ^svs.command.extract
	( ^type intersect
	  ^a.name <a>
	  ^b.name <b>
	  ^result.literal
		( ^a <a> ^b <b>)))
-->
(<s> ^intersect <i>)
(<i> ^a <a> ^b <b>)
(write |INTERSECT | <a> | | <b> (crlf))
(interrupt)}

sp {report-no-int-1
(state <s> ^svs.command.extract
	( ^type intersect
	  ^a.name <a>
	  ^b.name <b>
	  ^result ( -^literal)))
-->
(write |NO INTERSECT | <a> | | <b> (crlf))}

sp {report-no-int-2
(state <s> ^svs.command.extract
	( ^type intersect
	  ^a.name <a>
	  ^b.name <b>
	  -^result))
-->
(write |NO INTERSECT | <a> | | <b> (crlf))}


sp {move-to-box
(state <s> ^superstate nil
           ^auto-control t
           ^svs
	( ^command <c>
	  ^spatial-scene
		( ^child.id splinter
		  ^child.id target1 )))
-{
	(<s> ^intersect <i>)
	(<i> ^a splinter ^b box1)
}
-->
(<c> ^seek <sk>)
(<sk> ^type simplex
      ^depth 20
      ^outputs <out>
      ^objective <obj>)
(<out> ^left <left> ^right <right>)
(<left>  ^min -1.0 ^max 1.0 ^inc 1.0)
(<right> ^min -1.0 ^max 1.0 ^inc 1.0)
(<obj> ^name euclidean
       ^a splinter
       ^b box1)
}

sp {push-box-to-target
(state <s> ^superstate nil
           ^auto-control t
           ^svs
	( ^command <c>
	  ^spatial-scene
		( ^child.id splinter
		  ^child.id box1
		  ^child.id target1 )))
(<s> ^intersect ( ^a splinter ^b box1 )
     #^intersect ( ^a splinter-target-line ^b box1 )
)
-->
(<c> ^seek <sk>)
(<sk> ^type simplex
      ^depth 20
      ^outputs <out>
      ^objective <obj>)
(<out> ^left <left> ^right <right>)
(<left>  ^min -1.0 ^max 1.0 ^inc 1.0)
(<right> ^min -1.0 ^max 1.0 ^inc 1.0)
(<obj> ^name euclidean
       ^a box1
       ^b target1)}

sp {manual
(state <s> ^superstate nil 
           ^svs.command <c>
          -^auto-control t)
-->
(<c> ^manual_control.outputs <out>)
(<out> ^left <left> ^right <right>)
(<left>  ^min -1.0 ^max 1.0 ^inc 1.0)
(<right> ^min -1.0 ^max 1.0 ^inc 1.0)}
