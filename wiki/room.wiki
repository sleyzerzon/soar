#summary Room environment notes.
#labels Phase-Support

Note: This help refers to the trunk and future releases, and is not included with the latest round of Soar releases (9.0.1, 9.1.1, 9.2.0).

The Room environment is included in the soar-java/soar-soar2d folder in the Soar suite.

= Configuration =

See configuration help on the [Soar2D Soar2D help page]. Here is an example:

{{{
general.game = "room";
general.map = "config/maps/room/default.txt";
players.active_players = [ "robot" ];
players.robot.productions = "agents/room/simple-robot.soar";
}}}

= I/O =
Strikeout denotes not implemented.

== Input link specification =
input-link
  * time (id) wall clock time that soar has been running
    * seconds (int) seconds
    * microseconds (int) (0..1000000) microsecond fraction of current second
  * self
    * name (string) agent name
    * area (int) room id
    * pose
      * x (float) current x in meters
      * y (float) current y in meters
      * z (float) (0) current z in meters
      * yaw (float or int) (-180..180)
      * x-velocity (float) meters per second
      * y-velocity (float) meters per second
      * z-velocity (float) meters per second
      * yaw-velocity (float) degrees per second
    * collision
      * x (string) (true, false) colliding on x-axis
      * y (string) (true, false) colliding on y-axis
    * waypoints
      * waypoint (id) one of these for each registered, enabled waypoint
        * id (string) user-defined identifier string
        * x (float) x position in meters
        * y (float) y position in meters
        * z (float) (0) z position in meters
        * distance (float) (0..) distance to waypoint in meters
        * yaw (float or int) what yaw to turn to to face the waypoint
        * relative-bearing (float or int) if positive then turn left
        * abs-relative-bearing (float or int) (0..) absolute value of relative bearing
    * received-messages
      * message (id) one of these for each received event
        * from (string) (http) source of message
        * first (id) starts linked list
          * word (string)
          * next (id or sting "nil" to end)
            * word (string)
            * next (id or string "nil" to end) ... etc.
  * area-description
    * id (int) unique identifying number
    * gateway (id) one of these for each gateway
      * id (int) unique identifying number
      * direction (string) (north, east, south, west) which wall the gateway is on
      * to (room id on one side of gateway)
      * to (room id on other side of gateway)
      * x (float) x position in meters
      * y (float) y position in meters
      * z (float) (0) z position in meters
      * distance (float) (0..) distance in meters
      * yaw (float or int) what yaw to turn to to face it
      * relative-bearing (float or int) if positive then turn left
      * abs-relative-bearing (float or int) (0..) absolute value of relative bearing
    * wall (id) one of these for each wall
      * id (int) unique identifying number
      * direction (string) (north, east, south, west) which wall it is on
      * x (float) x position in meters
      * y (float) y position in meters
      * z (float) (0) z position in meters
      * distance (float) (0..) distance in meters
      * yaw (float or int) what yaw to turn to to face it
      * relative-bearing (float or int) if positive then turn left
      * abs-relative-bearing (float or int) (0..) absolute value of relative bearing
  * object (id) one of these for each block, player
    * type (string) (block, player) type of object
    * id (int) unique identifying number if object
    * name (string) unique agent name if other player
    * visible (string) (yes, no) object stays on input link briefly after it is not 
    * x (float) x position in meters
    * y (float) y position in meters
    * z (float) (0) z position in meters
    * distance (float) (0..) distance in meters
    * yaw (float or int) what yaw to turn to to face it
    * relative-bearing (float or int) if positive then turn left
    * abs-relative-bearing (float or int) (0..) absolute value of relative bearing
visible
  * configuration
    * yaw-format (float, int)
    * offset-x (float)
    * offset-y (float)

== Output link specification ==

output-link
  * ~~motor (id) command motors directly~~
    * ~~left (float) (-1.0..1.0) percent throttle~~
    * ~~right (float) (-1.0..1.0) percent throttle~~
    * ~~status (string) (accepted, executing, complete, error)~~
  * set-velocity
    * linear-velocity (float) (-0.5..0.5) meters per second forward or reverse
    * angular-velocity (float) (-180..180) rotation, degrees per second, positive is left turn
    * status (string) (accepted, executing, complete, error)
  * set-heading
    * yaw (float or int) (-180..180) target yaw (modded, values outside this bounds OK)
    * status (string) (accepted, executing, interrupted, complete, error)
  * stop (id) graceful stop
    * status (string) (accepted, executing, interrupted, complete, error)
  * estop (id) emergency stop
    * status (string) (accepted, complete)
  * add-waypoint (id) enter a waypoint into the system, enabled
    * id (string) user-defined identifier string
    * x (float) x position in meters
    * y (float) y position in meters
    * status (string) (accepted, complete, error)
  * remove-waypoint (id) remove the waypoint from the system
    * id (string)
    * status (string) (accepted, complete, error)
  * enable-waypoint (id) enable a previously disabled waypoint
    * id (string)
    * status (string) (accepted, complete, error)
  * disable-waypoint (id) disable an enabled waypoint
    * id (string)
    * status (string) (accepted, complete, error)
  * send-message
    * destination (string) (say) target of message, currently only 'say' is valid, which is text to speech
    * first (id)
    * word (string)
    * next (id or string 'nil' to end)
    * status (string) (accepted, complete, error)
  * remove-message (id) remove a specific message from the received-messages list
    * id (string)
    * status (string) (accepted, complete, error)
  * clear-messages (id) remove all messages from received-messages list
    * status (string) (accepted, complete)
  * configure (id) set configuration parameters
    * yaw-format (string) (float, int) use integer data types for yaw
    * offset-x (float) relocate origin
    * offset-y (float) relocate origin
    * status (string) (accepted, complete, error)
  * get-object (id) get object by id
    * id (int) target object id
    * status (string) (accepted, complete, error)
  * drop-object (id) drop object by id
    * id (int) target object id
    * status (string) (accepted, complete, error)