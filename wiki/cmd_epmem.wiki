#summary Documentation for epmem command

= epmem =

Control the behavior of episodic memory.

== Synopsis ==

{{{
epmem -g|--get <parameter>
epmem -s|--set <parameter> <value>
epmem -S|--stats [<statistic>]
epmem -t|--timers [<timer>]
epmem -c|--close
epmem -v|--viz <episode id>
}}}

== Options ==

|| `-g, --get` || Print current parameter setting ||
|| `-s, --set` || Set parameter value ||
|| `-S, --stats` || Print statistic summary or specific statistic ||
|| `-c, --close` || Close epmem database and commit to disk (if applicable) ||
|| `-v, --viz` || Print episode in graphviz format ||

== Description ==

The `epmem` command is used to change all behaviors of the episodic
memory module, except for watch output, which is controlled by the
`watch --epmem` command.  

=== Parameters ===

Due to the large number of parameters, the `epmem` command uses the
`--get|--set <parameter> <value>` convention rather than individual
switches for each parameter.  Running `epmem` without any switches
displays a summary of the parameter settings.

|| *Parameter* || *Description* || *Possible values* || *Default* ||
|| `balance` || Set the weight of match cardinality in calculating match score || `[`0, 1`]` || `0.5` ||
|| `cache_size` || Set the number of memory pages used in the SQLite cache || `1, 2, ...` || `10000` ||
|| `commit` || Set the number of episode encodings between committing changes to disk || `1, 2, ...` || `1` ||
|| `database` || Set storage location of the database || `file, memory` || `memory` ||
|| `exclusions` || Toggle the exclusion of an attribute string constant || _any string_ || `epmem, smem` ||
|| `force` || Forces episode encoding/ignoring in the next storage phase || `ignore, remember, off` || `off` ||
|| `graph-match` || Enable graph matching || `on, off` || `on` ||
|| `learning` || Enable epmem learning  || `on, off` || `off` ||
|| `optimization` || Set database policy to optimize performance or file system safety || `safety, performance` || `performance` ||
|| `page_size` || Set the size of each memory page used in the SQLite cache || `1k, 2k, 4k, 8k, 16k, 32k, 64k` || `8k` ||
|| `path` || Set the file system path for the database file || _empty_, _some path_ || _empty_ ||
|| `phase` || Set the decision cycle phase for encoding new episodes and processing epmem link commands || `output, selection` || `output` ||
|| `timers` || Set granularity of timers || `off, one, two, three` || `off` ||
|| `trigger` || Set what triggers encoding of new episodes || `dc, output, none` || `output` ||


The `learning` parameter turns the episodic memory module on or off.
When `learning` is set to `off`, no new episodes are encoded and no
commands put on the epmem link are processed.  The `phase` parameter
determines which decision cycle phase episode encoding and retrieval
will be performed.  The `trigger` parameter controls when new episodes
will be encoded.  When it is set to `output`, new episodes will be
encoded only if the agent made modifications to the output-link during
that decision cycle.  When set to 'dc', new episodes will be encoded
every decision cycle.

The `exclusions` parameter can be used to prevent episodic memory from
encoding parts of working memory into new episodes.  The value of
`exclusions` is a list of string constants.  During encoding, episodic
memory will walk working memory starting from the top state
identifier.  If it encounters a WME whose attribute is a member of the
`exclusions` list, episodic memory will ignore that WME and abort
walking the children of that WME, and they will not be included in the
encoded episode.  Note that if the children of the excluded WME can be
reached from top state via an alternative non-excluded path, they
will still be included in the encoded episode.  The `exclusions`
parameter behaves differently from other parameters in that issuing
`epmem --set exclusions <val>` does not set its value to `<val>`.
Instead, it will toggle the membership of `<val>` in the `exclusions`
list.

Various runtime behaviors for the SQLite database backing episodic
memory can be set via the parameters.  The most commonly used is
`path`, which specifies the file system path the database is stored
in.  When `path` is empty, the database is stored in main memory and
will be lost when the agent exits.  When `path` is set to a valid file
system path, the SQLite database is written to that path.  When this
is the case, the `commit` and `optimization` parameters control how
often cached database changes are written to disk.  These parameters
trade off safety in the case of a program crash with database
performance.  When `optimization` is set to `performance`, the agent
will have an exclusive lock on the database, meaning it cannot be
opened concurrently by another SQLite process such as SQLiteMan.  The
lock can be relinquished by issuing `epmem --close` or shutting down
the Soar kernel.

A last note is that when the `path` parameter is set to a non-empty value
for the first time, the value of the `database` parameter is
automatically changed to `file`.


=== Statistics ===

Episodic memory tracks statistics over the lifetime of the agent.
These can be accessed using `epmem --stats <statistic>`.  Running
`epmem --stats` without a statistic will list the values of all
statistics.  Unlike timers, statistics will always be updated.
Available statistics are:

|| *Name* || *Label* || *Description* ||
|| `time` || Time || Current episode ID ||
|| `mem-usage` || Memory Usage || Current SQLite memory usage in bytes ||
|| `mem-high` || Memory Highwater || High SQLite memory usage watermark in bytes ||
|| `queries` || Queries || Number of times the *query* command has been processed ||
|| `ncb-wmes` || Last Retrieval WMEs || Number of WMEs added to working memory in last reconstruction ||
|| `qry-pos` || Last Query Positive || Number of leaf WMEs in the *query* cue of last cue-based retrieval ||
|| `qry-neg` || Last Query Negative || Number of leaf WMEs in the *neg-query* cue of the last cue-based retrieval ||
|| `qry-ret` || Last Query Retrieved || Episode ID of last retrieval ||
|| `qry-card` || Last Query Cardinality || Match cardinality of last cue-based retrieval ||
|| `qry-lits` || Last Query Literals || Number of literals in the DNF graph of last cue-based retrieval ||

=== Timers ===

Episodic memory also has a set of internal timers that record the
durations of certain operations.  Because fine-grained timing can
incur runtime costs, episodic memory timers are off by default.
Timers of different levels of detail can be turned on by issuing
`epmem --set timers <level>`, where the levels can be `off`, `one`,
`two`, or `three`, `three` being most detailed and resulting in all
timers being turned on.  Note that none of the episodic memory
statistics nor timing information is reported by the `stats` command.

Level one

|| `_total` || Total epmem operations ||

Level two

|| `epmem_api` || Agent command validation ||
|| `epmem_hash` || Hashing symbols ||
|| `epmem_init` || Episodic store initialization ||
|| `epmem_ncb_retrieval` || Episode reconstruction ||
|| `epmem_next` || Determining next episode ||
|| `epmem_prev` || Determining previous episode ||
|| `epmem_query` || Cue-based query ||
|| `epmem_storage` || Encoding new episodes ||
|| `epmem_trigger` || Deciding whether new episodes should be encoded ||
|| `epmem_wm_phase` || Converting preference assertions to working memory changes ||

Level three

|| `ncb_edge` || Collecting edges during reconstruction ||
|| `ncb_edge_rit` || Collecting edges from relational interval tree ||
|| `ncb_node` || Collecting nodes during reconstruction ||
|| `ncb_node_rit` || Collecting nodes from relational interval tree ||
|| `query_dnf` || DNF graph construction ||
|| `query_graph_match` || Graph match ||
|| `query_neg_end_ep` || Interval search for negative cue, end point, ranges ||
|| `query_neg_end_now` || Interval search for negative cue, end point, now ||
|| `query_neg_end_point` || Interval search for negative cue, end point, points ||
|| `query_neg_start_ep` || Interval search for negative cue, start point, ranges ||
|| `query_neg_start_now` || Interval search for negative cue, start point, now ||
|| `query_neg_start_point` || Interval search for negativecue, start point, points ||
|| `query_pos_end_ep` || Interval search for positive cue, end point, ranges ||
|| `query_pos_end_now` || Interval search for positive cue, end point, now ||
|| `query_pos_end_point` || Interval search for positive cue, end point, points ||
|| `query_pos_start_ep` || Interval search for positive cue, start point, ranges ||
|| `query_pos_start_now` || Interval search for positive cue, start point, now ||
|| `query_pos_start_point` || Interval search for positivecue, start point, points ||

=== Graphviz ===

When debugging agents using episodic memory it is often useful to
inspect the contents of individual episodes.  Running `epmem --viz
<episode id>` will output the contents of an episode in graphviz
format.  For more information on this format and visualization tools,
see http://www.graphviz.org .