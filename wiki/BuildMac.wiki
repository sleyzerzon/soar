= Building Soar on Mac OS X =

== Install the Prerequisites ==

  * *Java Developers Package*:  10.6 is the only one we support. You can find this at http://connect.apple.com/ under Java downloads.  You do not have to pay for a developers account.  There's a link at the bottom that will let you register for free resources.
    * *Note*: If you get an error with "jni.h", visit the [http://discussions.apple.com/thread.jspa?threadID=2630649&tstart=0 following page] to see how to resolve it.
  * *XCode*: XCode is the Mac OS development environment under which you'll build Soar.  It is free with the latest version of MacOS.  If you don't already have it, you can download it [http://developer.apple.com/tools/xcode/ here].
  * *Python*: Python 2 is required to build Soar, and should be installed by default in OSX. Please make sure the installed version is 2.x (where x >= 5), as Python 3 doesn't work. To check your version, run `python --version` in a terminal.
  
== Build Soar ==

Go into the !SoarSuite folder and run: 
{{{
python scons/scons.py all
}}}

All of your resulting binaries will be in the /out folder.  

For more detailed information about the Scons script, see the [BuildSconsScript SCons Script Documentation page]. See the [FAQ] for common solutions to errors.

== Set Up Environment Variables ==

(The following assumes that you're using the Bash shell)

In order to build and run a program that uses Soar, your system needs to know the locations of the Soar libraries and header files. Specify the library location by setting the `LD_LIBRARY_PATH` environment variable:

{{{
export DYLD_LIBRARY_PATH=$HOME/SoarSuite/out:$DYLD_LIBRARY_PATH
}}}

The exact path depends on where you put the Soar distribution. It should contain the file `libSoar.dylib`. Specify the headers location by setting the `CPATH` environment variable:

{{{
export CPATH=$HOME/SoarSuite/out/include:$CPATH
}}}

Please make sure that the `include` directory actually exists. If it does not, you need to build the `headers` target with SCons.

Certain functions in the kernel may also use the SOAR_HOME environment variable to find binaries.  For example, !SpawnDebugger uses it to find !SoarDebugger.jar. Set it like this:

{{{
export SOAR_HOME=$HOME/SoarSuite/out
}}}

You can add these commands to the `.bashrc` file in your home directory to automatically set these variables each time you start a Bash shell.

For more detailed information about library search paths, see the wiki page on [BuildLibrarySearchPaths how library search paths work].