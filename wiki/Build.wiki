#summary Checkout and build procedure
#labels Phase-Implementation,Phase-Support

[http://code.google.com/p/soar/source/browse BROWSE],
[http://code.google.com/p/soar/source/list Recent Changes],
[http://code.google.com/p/soar/source/checkout Google Code Checkout Page].

[http://code.google.com/hosting/settings Your Google Code Password].

Please help keep this page up to date. [http://code.google.com/p/soar/w/edit/Build If you see an error or notice an omission, correct it yourself] or do not hesitate to [mailto:soar-sml-list@lists.sourceforge.net send a note to the soar-sml-list].

<wiki:toc max_depth="1"/>

= Getting the Source =

To build Soar:

  * Download the latest release, or checkout the code from SVN.

If you download the latest release, skip down to your operating system notes below (noting that the source code is in the SoarSuite subfolder of the release archive):

  * [http://code.google.com/p/soar/wiki/Build#Windows Windows]
  * [http://code.google.com/p/soar/wiki/Build#Linux Linux]
  * [http://code.google.com/p/soar/wiki/Build#Mac_OS_X Mac OS X]

To checkout Soar from the Google Code subversion repository:

  * Install a subversion client,
  * Check out `SoarSuite` *non-recursively*,
  * Check out module *Core* and probably *Java* and maybe a few more depending on your application.

== Subversion ==

  * Windows users: get [http://tortoisesvn.net/downloads TortoiseSVN] (GUI) and/or [http://www.sliksvn.com/en/download SlikSVN] (command line).
    * Windows 64-bit users: Installing both of those side-by-side is helpful.
  * Ubuntu Linux: Install package `subversion`
  * Mac: Subversion ships with Leopard and newer.

== Checkout ==

  * *Do not check out the entire trunk.*
  * *Instead, check out only the `SoarSuite` subfolder non-recursively (also known as: depth files).* 

To check out `SoarSuite` non-recursively:

  * Command line (use http*s* for write access): `svn checkout http://soar.googlecode.com/svn/trunk/SoarSuite --depth files`
  * TortoiseSVN (Windows): Change the _Checkout Depth_ option in [http://tortoisesvn.net/docs/release/TortoiseSVN_en/tsvn-dug-checkout.html the checkout dialog] to _Only file children_.

  * *Your username* is your Google account name without the `@` or domain
  * *[http://code.google.com/hosting/settings Your password is your googlecode.com password]*.

=== Module Checkout ===

Once the top level folder is checked out, sub-modules need to be checked out, definitely Core, probably Java, potentially others.

*To check out modules on Mac/Linux*, there are shortcuts in the [http://code.google.com/p/soar/source/browse/trunk/SoarSuite/Makefile Makefile] at the top level.

  * Check out read-only: `make public-checkout` (use `make checkout` for write access)
  * [http://code.google.com/p/soar/source/browse/trunk/SoarSuite/Makefile Look at the contents of Makefile for more shortcuts and information].

*To check out modules on Windows* with TortoiseSVN:

  * Create an empty folder, name it the module's name (such as `Core` or `Java`),
  * Right-click that folder and check out the module (with a URL like http://soar.googlecode.com/svn/trunk/SoarSuite/Core) (use http*s* for write access).

[ProjectLayout A full list of modules is available here], a partial list is below:

  * *Core*: *Required* module to develop with Soar.
    * Depends on Visual Studio (Windows) or SCons, G++, various other libraries (see operating system below).
  * *Java*: *Recommended* module, used to interface with Java.
    * Depends on Sun JDK 6, Apache ant, SWIG.
  * *Python*: *Recommended* module, used to interface with Python.
    * Depends on Python 2.6, SWIG.
  * *CSharp*: Optional module, used to interface with CSharp.
    * Depends on Visual Studio, SWIG. Microsoft only (no Mono support).
  * *Tcl*: Optional module, used to interface with Tcl.
    * Depends on Tcl 8.4, SWIG.

All Soar users and developers need Core, and most will need Java because the
debugger is implemented using the Java interface. Some users will need Python,
CSharp and Tcl depending on what programs they are using. The rest of the
modules are optional tools, environments and example code.

Next, skip to your operating system notes:

  * [http://code.google.com/p/soar/wiki/Build#Windows Windows]
  * [http://code.google.com/p/soar/wiki/Build#Linux Linux]
  * [http://code.google.com/p/soar/wiki/Build#Mac_OS_X Mac OS X]

----

= Windows =

32-bit and 64-bit Windows platforms are supported for Windows XP, Vista, and 7.
Other versions of 32-bit windows might work but are not officially supported.

== Windows Prerequisites ==

Some of the prerequisites are listed as _recommended_ or _optional_. Please
note that *if all _recommended_ prerequisites are not installed, some build
errors will be encountered as unsupported language interfaces fail to build*.
Open the solution and remove the related projects to fix the errors.

Either Microsoft Visual Studio 2008 or Microsoft Visual C++ 2008 Express
Edition is _required_ to build Soar. Visual C# Express is necessary for C#
projects.

  * Install Visual Studio 2008 if you have access to it, or download and install Visual C++ 2008 Express Edition from [http://www.microsoft.com/express/vc/ microsoft.com]. 

SWIG is _recommended_, or _required if any of the language interfaces are used_
(such as Java, Python, CSharp, or Tcl) since it acts as a bridge between the
C++ libraries and the various other languages. CSharp has no other
prerequisites.

  * Download the latest version of *swigwin* from [http://www.swig.org/download.html swig.org].
  * Extract anywhere, such as your home folder or `C:\` or `C:\Program Files`.

Java is _recommended_ for most users, as most of the Soar tools and environments are written in Java.

  * Download and install the latest Java SE 6 JDK from [http://java.sun.com/javase/downloads/index.jsp java.sun.com].
    * If targeting 64-bit, download the 64-bit version of the JDK.

The Apache Ant build system is _required if using Java applications_.

  * Download ant from [http://ant.apache.org/ ant.apache.org].
  * Extract anywhere, such as your home folder or `C:\` or `C:\Program Files`.
  * Helpful: add ant's `bin` folder to your PATH environment variable.

Eclipse is _recommended_ if doing Java development.

  * Download the latest version of Eclipse from [http://eclipse.org eclipse.org]
    * If targeting 64-bit, download the 64-bit version of Eclipse, found on [http://download.eclipse.org/eclipse/downloads/ download.eclipse.org].
  * Extract anywhere you have write permissions without authentication, such as your home folder. System folders (such as `C:\Program Files`) are not recommended locations for Eclipse.

Python 2.6 is _recommended_, or required if the Python SML interface is
desired.  Other versions of Python will not work "out of the box." 

  * Download and install Python *2.6* from [http://www.python.org/download/releases/2.6/ python.org].
    * If targeting 64-bit, download the 64-bit version of Python.
  * If you are planning on a debug build including Python, [http://www.eecs.umich.edu/~soar/sitemaker/misc/python you will need Python debug libraries]. Save the correct one for your architecture in `Python26\libs`.

!PyDev for Eclipse is _optional_, it is for Python development inside Eclipse.

  * Inside Eclipse, visit the Help -> Install new software dialog
  * Add the site `http://pydev.sourceforge.net/updates/` and install the components.

Tcl/Tk is _optional_, or _required if the Tcl SML interface is desired_. Tcl/Tk
is not supported for 64-bit targets.

  * Download and install Tcl/Tk *8.4* from [http://www.activestate.com/activetcl/downloads/ activestate.com]

== Windows Environment ==

Visual Studio looks at the environment variables for a number of program
locations, depending on what language interfaces you are building.

  * `ANT_HOME`: Full path to the Apache Ant folder.
  * `SWIG_HOME`: Full path to the Swig folder.
  * `JAVA_HOME`: Full path to the JDK home folder.
  * `PYTHON_HOME`: Full path to Python folder.
  * `TCL_HOME`: Full path to Tcl folder.
  * `PATH`: The full path to Ant's bin folder should be manually added to the `PATH` environment variable to facilitate command line Java builds. Reminder: the path separator character on Windows is semicolon (`;`) (not colon (`:`)).

Examples, don't just cut and paste because *exact paths may vary*:

{{{
ANT_HOME = C:\apache-ant-1.7.1
SWIG_HOME = C:\swigwin-1.3.39
JAVA_HOME = C:\Program Files\Java\jdk1.6.0_17
PYTHON_HOME = C:\Python26
TCL_HOME = C:\Tcl

# PATH may contain many other elements, semicolon (;) delimited
PATH = C:\apache-ant-1.7.1\bin
}}}

*Eclipse users* targeting 64-bit should also add SlikSVN's bin folder to the
`PATH` environment variable, usually `C:\Program Files\SlikSvn\bin`.

== Windows Build ==

Double-click `build.bat` to build everything. You will see many errors about
projects not being loaded unless you checked out the entire SoarSuite, which is
not recommended.

If you need CSharp or Tcl, you will have to open the solution and add those
projects to the solution file.

See the [FAQ] for common solutions to build errors.

----

= Linux =

The only officially supported Linux distribution right now is
[http://www.ubuntu.com/ Ubuntu], though Soar should work on almost any
distribution so long as things are configured correctly.

Make sure to see the Makefile checkout shortcuts in the top section of this
file.

== Linux Prerequisites ==

Install Ubuntu and use the update manager or similar tool to make sure all
packages are up-to-date.

Recommended system setting: _disable_ visual effects: system -> preferences ->
appearance -> visual effects

Install these packages using your favorite package manager, such as `apt-get`
where the command would be `sudo apt-get install` followed by this list: `scons swig sun-java6-jdk subversion libc6-dev g++ ant manpages-dev python-all-dev libsvn-java subversion-tools`

Make sure the Sun JDK is in use: `sudo update-java-alternatives -s java-6-sun`

Eclipse is recommended if doing Java development with Soar. Prefer a manual
installation over Eclipse packages.

  * Download Eclipse at [http://eclipse.org eclipse.org] and be sure to get the correct 32- or 64-bit version depending on your system.
  * Extract it somewhere convenient, such as your home directory or Desktop.
  * When running Eclipse, it helps to run it with a copy of your environment. Do this by running it in a terminal using a command like: `./eclipse`

Subclipse is recommended if using Eclipse.

  * Install Subclipse by visiting the Help -> Install new software  dialog and adding the site `http://subclipse.tigris.org/update_1.6.x`.

If you install this version of Subclipse, you will also need to install an
updated subversion client on your system, since the Ubuntu default client is
1.5 and Subclipse (as listed above) is 1.6, and the two versions will not play
nice together.

  * Visit https://launchpad.net/~anders-kaseorg/%2Barchive/subversion-1.6 and follow instructions.
  * After the repository is installed, subversion will be able to be upgraded to 1.6 in your favorite package manager.

!PyDev for Eclipse is _optional_, it is for Python development inside Eclipse.

  * Inside Eclipse, visit the Help -> Install new software dialog
  * Add the site `http://pydev.sourceforge.net/updates/` and install the components.

== Linux Environment ==

To make these changes permenant, edit your `.bashrc` file and put them at the
bottom.

Scons needs to be able to find the correct version of Java to build Soar. The
discovery process often finds the GNU version of the JDK before the Sun JDK if
both are installed on the system. To assist it in finding the correct version,
environment variable `JAVA_HOME` needs to be set.

{{{
export JAVA_HOME=/usr/lib/jvm/java-6-sun
}}}

Soar binaries are, by default, installed to a prefix `SoarSuite/out`.  When
Soar is running, it needs to be able to load the relevant dynamic libraries on
the fly. Unfortunately, if those libraries are not installed in a system-wide
prefix already on the library path such as `/usr/lib`, Soar will (likely) not
be able to find them. The environment variable `LD_LIBRARY_PATH` can be set to
point to additional places to look, such as the full path to
`SoarSuite/out/lib`.

{{{
# The exact path here will depend on your system settings.
export LD_LIBRARY_PATH=/home/$USER/soar/SoarSuite/out/lib
}}}

The executables are also installed in that same prefix, and, if added to the PATH
environment variable, will be able to be executed from anywhere. Usually you want to
retain your current path:

{{{
export PATH=$PATH:/home/$USER/soar/SoarSuite/out/bin
}}}

Alternatively, you can change the prefix to have it install binaries to a more
well-known location by using `SOAR_HOME`. Although you can do this to send
binaries to a place like `/usr/local`, this is not recommended. Many people use
sandboxes in their home directories:

{{{
export SOAR_HOME=/home/$USER/sandbox
export PATH=$PATH=/home/$USER/sandbox/bin
export LD_LIBRARY_PATH=/home/$USER/sandbox/lib
}}}

== Linux Build ==

Run `make` in the top-level folder, see the [FAQ] for common solutions to
errors.

----

= Mac OS X =

== Mac OS X Prerequisites ==

Open spotlight: Java preferences, make sure that the appropriate JVM is selected. This is apparently not an issue on snow leopard.

Install [http://developer.apple.com/tools/xcode/ XCode].

Install SCons. Download the tarball from the [http://www.scons.org/ SCons site]
and open (extract) it. Open a terminal and navigate to the extracted folder
(likely in Downloads). Run:

{{{
sudo python setup.py install
}}}

Install Eclipse from the [http://www.eclipse.org/downloads/ download site]. Get
the 64- or 32-bit *Carbon* version, depending on your system (likely 64bit).
Install by dropping it in to your Applications folder, or your home folder.

== Mac OS X Environment ==

To make these changes permenant, edit your `.bash_profile` file and put them at
the bottom.

Note for Eclipse users: Eclipse will not inherit these environment variables unless you launch Eclipse from the shell. Alternatively [http://developer.apple.com/mac/library/documentation/MacOSX/Conceptual/BPRuntimeConfig/Articles/EnvironmentVars.html#//apple_ref/doc/uid/20002093-BCIJIJBH look here for other ways to get environment variables to Eclipse].

SCons needs to find the Java development libraries, you help it by setting the
`JAVA_HOME` variable to:

{{{
export JAVA_HOME=/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home
}}}

The binaries are installed to `SoarSuite/out` by default and need to be in the
library path during execution, tell the loader where to look by setting:

{{{
# Note: your exact path will vary depending on the location of SoarSuite
export DYLD_LIBRARY_PATH=/home/$USER/soar/SoarSuite/out/lib
}}}

If you add the `SoarSuite/out/bin` file to the path, you can execute binaries
from anywhere:

{{{
export PATH=$PATH=/home/$USER/sandbox/bin
}}}

Alternatively you can install things to a well-known location like `/usr/local`
though this is not recommended. Many users do have sandboxes in their home
directories, you can do that by using the `SOAR_HOME` variable:

{{{
export SOAR_HOME=/home/$USER/sandbox
export PATH=$PATH=/home/$USER/sandbox/bin
export DYLD_LIBRARY_PATH=/home/$USER/sandbox/lib
}}}

== Mac OS X Build ==

Run `make` in the top-level folder, see the [FAQ] for common solutions to
errors.

----

= Eclipse =

If you are not planning on using Eclipse, skip this section.

Linux and Mac users might want to launch Eclipse from the command prompt so that it inherits environment variables such as SOAR_HOME.

== Eclipse Import ==

Run Eclipse and either use the default workspace or make a new one next to
where you checked out Soar. Do not have the folder where you checked out Soar
be a child of your workspace folder.

Import existing projects in to workspace without copying them in to the
workspace folder. Point the import wizard to the `SoarSuite` folder. Import all
projects.

== Set Variables ==

Variables help Eclipse remain platform independent, you tell it where to find external resources necessary for build.

I'm not sure if there's another generic way to get to variables (since they are global and shared across all projects) but here's how I do it:

  * Open any project's _Properties_ and go to the _Java Build Path_ tab
  * Click on _Libraries_ on the _Java Build Path_ page to show _Libraries_ settings
  * Click _Add Variable_ to the right
  * Click _Configure Variables_

Here, press _New_ and create the variable `SML` and point it to where you installed `sml.jar`. This will be in your Soar home as defined in the build procedure. The default location is the `out` folder in the top level of your checkout, in a subfolder `share/java`.

Once this variable is defined, things should build.

== Subclipse ==

Having Subclipse installed is handy when doing dev inside Eclipse.

  * Install Subclipse if you're using Eclipse by visiting the Help -> Install new software  dialog and adding the site `http://subclipse.tigris.org/update_1.6.x`.
    * _Important (Windows only):_ If targeting 64-bit, you may need to install (the 64-bit version of) SlikSVN to get Subclipse to work correctly, available at [http://www.sliksvn.com/en/download/ sliksvn.com]. Eclipse may need to be restarted to see the SlikSVN libraries.