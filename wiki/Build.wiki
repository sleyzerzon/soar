#summary Checkout and build procedure
#labels Phase-Implementation,Phase-Support

<wiki:toc max_depth="2"/>

----

= Windows =

32-bit and 64-bit Windows platforms are supported for Windows XP and Vista. Other versions of 32-bit windows might work but are not officially supported.

== Prerequisites ==

Some of the prerequisites are listed as recommended or optional. Please note that if all are not installed (except Tcl on 64-bit, see below), some ignorable build errors will be encountered as unsupported language interfaces fail to build. Close the related projects to avoid seeing the errors.

Either Microsoft Visual Studio 2008 or Microsoft Visual C++ 2008 Express Edition is required to build Soar. 
  * Install Visual Studio 2008 if you have access to it, or download and install Visual C++ 2008 Express Edition from [http://www.microsoft.com/express/vc/ microsoft.com]. 

SWIG is recommended, or required if any of the language interfaces are used (such as Java, Python, CSharp, or Tcl) since it acts as a bridge between the C++ libraries and the various other languages. CSharp has no other prerequisites.
  * Download the latest version of *swigwin* from [http://www.swig.org/download.html swig.org].
  * Extract anywhere, such as your home folder or `C:\` or `C:\Program Files`.

Java is recommended for most users, as most of the Soar tools and environments are written in Java.
  * Download and install the latest Java SE 6 JDK from [http://java.sun.com/javase/downloads/index.jsp java.sun.com].
    * If targeting 64-bit, download the 64-bit version of the JDK.

The Apache Ant build system is required if using Java applications.
  * Download ant from [http://ant.apache.org/ ant.apache.org].
  * Extract anywhere, such as your home folder or `C:\` or `C:\Program Files`.

Eclipse is recommended if doing Java development.
  * Download the latest version of Eclipse from [http://eclipse.org eclipse.org]
    * If targeting 64-bit, download the 64-bit version of Eclipse, found on [http://download.eclipse.org/eclipse/downloads/ download.eclipse.org].
  * Extract anywhere you have write permissions without authentication, such as your home folder. System folders (such as `C:\Program Files`) are not recommended locations for Eclipse.

A Subversion client is required. The Soar group at U of M mainly uses TortoiseSVN and/or Subclipse (within Eclipse).
  * Download and install TortoiseSVN from [http://tortoisesvn.net/downloads tortoisesvn.net].
  * Install Subclipse if you're using Eclipse by visiting the Help -> Install new software  dialog and adding the site `http://subclipse.tigris.org/update_1.6.x`.
    * If targeting 64-bit, you may need to install (the 64-bit version of) SlikSVN to get Subclipse to work correctly, available at [http://www.sliksvn.com/en/download/ sliksvn.com]. Eclipse may need to be restarted to see the SlikSVN libraries.

Python 2.6 is recommended, or required if the Python SML interface is desired. Other versions of Python will not work "out of the box." 
  * Download and install Python *2.6* from [http://www.python.org/download/releases/2.6/ python.org].

PyDev for Eclipse is optional, it is for Python development inside Eclipse.
  * Inside Eclipse, visit the Help -> Install new software dialog
  * Add the site `http://pydev.sourceforge.net/updates/` and install the components.

Tcl/Tk is optional, or required if the Tcl SML interface is desired. Tcl/Tk is not supported for 64-bit targets.
  * Download and install Tcl/Tk *8.4* from [http://www.activestate.com/activetcl/downloads/ activestate.com]

== Environment ==

Visual Studio looks at the environment variables for a number of program locations, depending on what language interfaces you are building.
  * `ANT_HOME`: Full path to the Apache Ant folder, which will vary depending on the downloaded Ant version and where it was extracted. Example: `C:\apache-ant-1.7.1`
  * `SWIG_HOME`: Full path to the Swig folder, which will vary depending on the downloaded Ant version and where it was extracted. Example: `C:\swigwin-1.3.39`
  * `JAVA_HOME`: Full path to the JDK home folder, which will vary depending on the downloaded version. Example: `C:\Program Files\Java\jdk1.6.0_14`
  * `PYTHON_HOME`: Full path to Python's folder, usually `C:\Python26`
  * `TCL_HOME`: Full path to Tcl's folder, usually `C:\Tcl`

The full path to Ant's bin folder should be manually added to the PATH environment variable to facilitate command line Java builds. Example: `C:\apache-ant-1.7.1\bin`

Eclipse users targeting 64-bit should also add SlikSVN's bin folder to the PATH environment variable, usually `C:\Program Files\SlikSvn\bin`

== Checkout ==

See the [http://code.google.com/p/soar/source/checkout source tab] for instructions on how to check out Soar.

Eclipse users, do not import projects in Eclipse by checking them out there. Instead, check everything out outside of Eclipse and import later with the instructions below.

== Build ==

Open SML9.sln in the project root with Visual Studio and select build options:
  * *Platform*: _win32_, _x64_.
  * *Configuration*: _Debug SCU_, _Release SCU_, _Distribution SCU_. These are listed in order of increasing optimization and decreasing debugging facilities.

If you did not install the Java, Python or Tcl or Swig prerequisites, close related projects now.
  * Java: ClientSMLJava
  * Python: ClientSMLPython
  * Tcl: ClientSMLTcl
  * CSharp: ClientSMLCSharp

Build solution, see the [FAQ] for common solutions to errors.

Next, build the Java apps and associated documentation. This requires Apache Ant to be located in the path (see Environment above) and generates all of the jars necessary to run Soar. Note that this step is required even if Eclipse development is planned.
  * Open up a command prompt (start -> run -> cmd).
  * cd C:\path\to\soar
  * Execute ant: `ant`

== Eclipse Setup ==

If you haven't built the Java apps outside of Eclipse, do so now.

Run Eclipse and either use the default workspace or make a new one next to where you checked out `soar`. Do not have `soar` be inside of the workspace folder.

Import existing projects in to workspace without copying them in to the workspace folder. Point the import wizard to the `soar-java` folder. Import everything except `soar-sps`, which requires third-party software that isn't easily available.

Running projects in Eclipse requires that the `PATH` environment variable be set in the Environment tab of the run configuration settings. The `PATH` should point to `SoarLibrary\bin`, which is usually easy to make relative to `${workspace_loc}` like so: `${workspace_loc}\..\soar\SoarLibrary\bin` 

= Linux =

The only officially supported Linux distribution right now is Ubuntu, though Soar should work on almost all distributions so long as the prerequisites are available.

Install Ubuntu and use the update manager or similar tool to make sure all packages are up-to-date.

Recommended system setting: _disable_ visual effects: system -> preferences -> appearance -> visual effects

Install these packages using your favorite package manager, such as `apt-get` where the command would be `sudo apt-get install` and the following list:
{{{
scons swig sun-java6-jdk subversion libc6-dev g++ ant manpages-dev python-all-dev libsvn-java subversion-tools
}}}

Make sure the Sun JDK is in use: `sudo update-java-alternatives -s java-6-sun`

Eclipse is recommended if doing Java development with Soar. Prefer a manual installation over Eclipse packages.
  * Download Eclipse at [http://eclipse.org eclipse.org] and be sure to get the correct 32- or 64-bit version depending on your system.
  * Extract it somewhere convenient, such as your home directory or Desktop.
  * When running Eclipse, it helps to run it with a copy of your environment. Do this by running it in a terminal using a command like: `./eclipse`

Subclipse is recommended if using Eclipse. 
  * Install Subclipse by visiting the Help -> Install new software  dialog and adding the site `http://subclipse.tigris.org/update_1.6.x`.

PyDev for Eclipse is optional, it is for Python development inside Eclipse.
  * Inside Eclipse, visit the Help -> Install new software dialog
  * Add the site `http://pydev.sourceforge.net/updates/` and install the components.

== Environment ==

Scons needs to be able to find the correct version of Java to build Soar. The discovery process often finds the GNU version of the JDK before the Sun JDK if both are installed on the system. To assist it in finding the correct version, environment `JAVA_HOME` needs to be set.

{{{
export JAVA_HOME=/usr/lib/jvm/java-6-sun
}}}

When Soar is running, it needs to be able to load the relevant dynamic libraries on the fly. Unfortunately, if those libraries are not installed in a system-wide location already on the library path such as `/usr/lib`, Soar will (likely) not be able to find them. The environment variable `LD_LIBRARY_PATH` can be set to point to additional places to look, such as the full path to `SoarLibrary/lib` inside of the checkout folder. Your exact path will vary depending on where you check out Soar.

{{{
export LD_LIBRARY_PATH=/home/username/soar/SoarSuite/SoarLibrary/lib
}}}


== Checkout ==

See the [http://code.google.com/p/soar/source/checkout source tab] for instructions on how to check out Soar.

Eclipse users, do not import projects in Eclipse by checking them out there. Instead, check everything out outside of Eclipse and import later with the instructions below.

== Build ==

Run `scons` in the top-level folder, see the [FAQ] for common solutions to errors.

== Eclipse Setup ==

This is the same as the [#Eclipse_Setup Windows section above], see that. Be sure to use forward slashes for path separators, however.