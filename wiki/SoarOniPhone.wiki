#summary Soar on the iPhone OS

= Introduction =

This page will guide you through the process of having a Soar-enabled application on the iPhone OS. Here are the basic steps, with more detail below:

  # Add Soar includes to the XCode header search path
  # Add static Soar libraries to the XCode project
  # Rename appropriate source files to .mm (to enable C++)
  # Include the appropriate headers in your source

= Soar Includes =

The easiest way to do this is to download a release and point XCode to the "include" directory. The location of this option is... Project menu -> Edit Project Settings -> Build -> Header Search Paths (under Search Paths group).

= Soar Static Libraries =

The basic process is to compile Soar statically for an iPhone-specific architecture and SDK:

  # Checkout Core from SVN
  # Modify Core/SConstruct compilation to match the following compiler/linker flags: '-m32 -arch i386 -isysroot /path/to/sdk -mmacosx-version-min=10.5' (basically what XCode uses for your app)
  # Compile statically: scons --static --platform=32

All lib`*`.a files in the out/lib folder should be added to your project (drag+drop).

To help get folks started, I've uploaded some [http://www.eecs.umich.edu/~soar/sitemaker/misc/iphone-libs.tar.gz sample libraries]. These will likely be out of date by the time you read this. I compiled these on Snow Leopard using Soar 9.3.0 and XCode iPhone SDK 3.2 (works with iPhone and iPad) for the simulator (i.e. arch=i386).

= Rename Source Files =

XCode allows you to use C++ if your source file is named with a .mm (vs. .m) extension. This will make for the easiest transition for non-Objective-C programmers.

= Include Headers =

In addition to the usual SML headers:

  * sml_Connection.h
  * sml_Client.h
  * ElementXML.h

XCode needs one more:

  * portability.h

= Minimalist Example =

In a new XCode iPhone Application project, rename main.m to main.mm and place the following code in the main function just above creating the NSAutoreleasePool (I know, very bad placement):
{{{
sml::Kernel* pKernel = sml::Kernel::CreateKernelInNewThread(sml::Kernel::kDefaultLibraryName, 0);
sml::Agent* pAgent = pKernel->CreateAgent( "iSoar" ) ;
pAgent->ExecuteCommandLine("smem --set learning on");
pAgent->ExecuteCommandLine("sp {create*fb (state <s> ^superstate nil) --> (<s> ^foo.bar barr)}");
pAgent->ExecuteCommandLine("sp {store*fb (state <s> ^smem.command <c> ^foo <f>) --> (<c> ^store <f>)}");
pAgent->ExecuteCommandLine("d");
std::cout << pAgent->ExecuteCommandLine( "p --full" );
std::cout << pAgent->ExecuteCommandLine( "print --depth 100 --tree s1" );
std::cout << pAgent->ExecuteCommandLine( "smem -v" );
delete pKernel;
}}}

Once you complete the steps above (I used 9.3.0), your app will do nothing but print the following to the console (Run menu -> Console):
{{{
sp {store*fb
    (state <s> ^foo <f> ^smem <s*1>)
    (<s*1> ^command <c>)
    -->
    (<c> ^store <f> +)
}


sp {create*fb
    (state <s> ^superstate nil)
    -->
    (<s> ^foo <f*1> +)
    (<f*1> ^bar barr +)
}


(S1 ^epmem E1)
  (E1 ^command C1)
  (E1 ^result R2)
(S1 ^foo @F1)
  (@F1 ^bar barr)
(S1 ^io I1)
  (I1 ^input-link I2)
  (I1 ^output-link I3)
(S1 ^reward-link R1)
(S1 ^smem S2)
  (S2 ^command C2)
    (C2 ^store @F1)
  (S2 ^result R3)
    (R3 ^success @F1)
(S1 ^superstate nil)
(S1 ^type state)

digraph smem {
node [ shape = doublecircle ];
F1 ;
node [ shape = plaintext ];
F1_0 [ label = "barr" ];
F1 -> F1_0 [ label="bar" ];
}
}}}

= Demo Application =

The following link allows you to download a self-contained sample application that works out-of-the-box on the iPhone simulator. Read the included README file for greater detail.

[http://www.eecs.umich.edu/~soar/sitemaker/misc/iphone-tictactoe.tar.gz tictactoe]

You can reference the following presentation for context/sample play:

[http://www.eecs.umich.edu/~nlderbin/platforms_soarworkshop_2010.pdf Soar Workshop 30 Talk]