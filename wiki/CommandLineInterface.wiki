#summary Experimental one-file command line interface help file.

<wiki:toc max_depth="1" />

----
= help =
Provide formatted usage information about Soar commands.

== Synopsis ==
{{{
help [command_name]
}}}

Default aliases: `? h man`

== Description ==
This command prints formatted help for the given command name. Issue alone to see what topics have help available.

----
= memories =
Print memory usage for partial matches.

== Synopsis ==
{{{
memories [options] [number]
memories production_name
}}}

== Options ==
|| `-c, --chunks` || Print memory usage of chunks. ||
|| `-d, --default` || Print memory usage of default productions. ||
|| `-j, --justifications` || Print memory usage of justifications. ||
|| `-u, --user` || Print memory usage of user-defined productions. ||
|| `production_name` || Print memory usage for a specific production. ||
|| `number` || Number of productions to print, sorted by those that use the most memory. ||
|| `-T, --template` || Print memory usage of Soar-RL templates. ||

== Description ==
The `memories` command prints out the internal memory usage for full and partial 
matches of production instantiations, with the productions using the most memory 
printed first. With no arguments, the memories command prints memory usage for all productions. 
If a `production_name` is specified, memory usage will be printed only for that 
production.  If a positive integer `number` is given, only `number` productions will be 
printed: the `number` productions that use the most memory. Output may be restricted to print memory usage for particular types of productions using the command options.

Memory usage is recorded according to the tokens that are allocated in the rete 
network for the given production(s). This number is a function of the number of elements
in working memory that match each production. Therefore, this command will not
provide useful information at the beginning of a Soar run (when working memory
is empty) and should be called in the middle (or at the end) of a Soar run.

The `memories` command is used to find the productions that are using the
most memory and, therefore, may be taking the longest time to match (this is
only a heuristic). By identifying these productions, you may be able to
rewrite your program so that it will run more quickly. Note that memory usage
is just a heuristic measure of the match time: A production might not use much
memory relative to others but may still be time-consuming to match, and
excising a production that uses a large number of tokens may not speed up your
program, because the Rete matcher shares common structure among different
productions.

As a rule of thumb, numbers less than 100 mean that the production is using a
small amount of memory, numbers above 1000 mean that the production is using a
large amount of memory, and numbers above 10,000 mean that the production is
using a *very* large amount of memory.

== See Also ==
[CommandLineInterface#matches matches]

----
= popd =
Pop the current working directory off the stack and change to the next directory on the stack. Can be relative pathname or fully specified path.

== Synopsis ==
{{{
popd
}}}

== Description =
This command pops a directory off of the directory stack and [CommandLineInterface#cd changes to it]. See the [CommandLineInterface#dirs dirs] command for an explanation of the directory stack.

== See Also ==
[CommandLineInterface#cd cd] [CommandLineInterface#dirs dirs] [CommandLineInterface#home home] [CommandLineInterface#ls ls] [CommandLineInterface#pushd pushd] [CommandLineInterface#source source] [CommandLineInterface#pwd pwd]

----
= preferences =
Examine details about the preferences that support the specified _identifier_ and _attribute_.

== Synopsis ==
{{{
preferences [options] [identifier [attribute]]
}}}

== Options ==
|| `-0, -n, --none` || Print just the preferences themselves ||
|| `-1, -N, --names` || Print the preferences and the names of the productions that generated them ||
|| `-2, -t, --timetags` ||  Print the information for the `--names` option above plus the timetags of the wmes matched by the LHS of the indicated productions ||
|| `-3, -w, --wmes` ||  Print the information for the `--timetags` option above plus the entire WME matched on the LHS. ||
|| `-o, --object` ||  Print the support for all the WMEs that comprise the object (the specified _identifier_). ||
|| `identifier` || Must be an existing Soar object _identifier_. ||
|| `attribute` || Must be an existing _attribute_ of the specified _identifier_. ||

== Description ==
The `preferences` command prints all the preferences for the given object identifier and attribute.   If identifier and attribute are not specified, they default to the current state and the current operator. The Soar syntax attribute carat (`^`) is optional when specifying the attribute. The optional arguments indicates the level of detail to print about each preference. 

This command is useful for examining which candidate operators have
been proposed and what relationships, if any, exist among them.
If a preference has O-support, the string, `:O` will also be printed.

When only the identifier is specified on the commandline, if the identifier is a state, Soar uses the default attribute `^operator`.  If the identifier is not a state, Soar prints the support information for all WMEs whose value is the identifier.

When an identifier and the `--object` flag are specified, Soar prints the preferences / WME support for all WMEs comprising the specified identifier.

For the time being, _numeric-indifferent_ preferences are listed under the heading
`binary indifferents:`.

By default, using the `--wmes` option with a WME on the top state will only print the timetags.  To change this, the kernel can be recompiled with `DO_TOP_LEVEL_REF_CTS`, but this has other consequences (see comments in `kernel.h`).

== Examples ==
This example prints the preferences on `(S1 ^operator)` and the production names which created the preferences:
{{{
soar> preferences S1 operator --names
Preferences for S1 ^operator:
acceptables:
 O2 (fill) +
   From waterjug*propose*fill
 O3 (fill) +
   From waterjug*propose*fill
unary indifferents:
 O2 (fill) =
   From waterjug*propose*fill
 O3 (fill) =
   From waterjug*propose*fill
}}}

If the current state is `S1`, then the above syntax is equivalent to:
{{{
preferences -n
}}}

This example shows the support for the WMEs with the ^jug attribute:
{{{
soar> preferences s1 jug
 
Preferences for S1 ^jug:
  
acceptables:
  (S1 ^jug I4)  :O 
  (S1 ^jug J1)  :O 
}}}

This example shows the support for the WMEs with value `J1`, and the productions that generated them:
{{{
soar> pref J1 -1

 Support for (31: O3 ^jug J1)
   (O3 ^jug J1) 
     From water-jug*propose*fill

 Support for (11: S1 ^jug J1)
   (S1 ^jug J1)  :O 
     From water-jug*apply*initialize-water-jug-look-ahead
}}}

This example shows the support for all WMEs that make up the object `S1`:
{{{
soar> pref -o s1

Support for S1 ^problem-space:
  (S1 ^problem-space P1) 
Support for S1 ^name:
  (S1 ^name water-jug)  :O 
Support for S1 ^jug:
  (S1 ^jug I4)  :O 
  (S1 ^jug J1)  :O 
Support for S1 ^desired:
  (S1 ^desired D1)  :O 
Support for S1 ^superstate-set:
  (S1 ^superstate-set nil) 
Preferences for S1 ^operator:
acceptables:
  O2 (fill) +
  O3 (fill) +
Arch-created wmes for S1 :
(2: S1 ^superstate nil)
(1: S1 ^type state)
Input (IO) wmes for S1 :
(3: S1 ^io I1)
}}}

----
= pushd =
Push a directory onto the directory stack, changing to it.

== Synopsis ==
{{{
pushd directory
}}}

== Description ==
Maintain a stack of working directories and push the directory on to the stack. 
Can be relative path name or fully specified.

== See Also ==
[CommandLineInterface#cd cd] [CommandLineInterface#dirs dirs] [CommandLineInterface#home home] [CommandLineInterface#ls ls] [CommandLineInterface#popd popd] [CommandLineInterface#source source] [CommandLineInterface#pwd pwd]

----
= stats =
Print information on Soar's runtime statistics.

== Synopsis ==
{{{
stats [options]
}}}

Default aliases: `st`

== Options ==
|| `-m, --memory` || report usage for Soar's memory pools ||
|| `-r, --rete` || report statistics about the rete structure ||
|| `-s, --system` || report the system (agent) statistics (default) ||

SMem branch only:
|| `-M, --max` || report the per-cycle maximum statistics (decision cycle time, WM changes, production fires) ||
|| `-R, --reset` || zero out the per-cycle maximum statistics reported by `--max` command  ||
|| `-t, --track` || begin tracking the per-cycle maximum statistics reported by `--max` for each cycle (instead of only the max value) ||
|| `-c, --cycle` || print out collected per-cycle maximum statistics saved by `--track` in human-readable form ||
|| `-C, --cycle-csv` || print out collected per-cycle maximum statistics saved by `--track` in comma-separated form ||
|| `-S, --sort N` || sort the tracked cycle stats by column number `N` ||

=== Tracked Cycle Stats Columns ===
For use with `--sort` option. *Negative values sorts descending.*

|| `0` || Use default sort ||
|| `1, -1` || Sort by decision cycle (use negative for descending) ||
|| `2, -2` || Sort by DC time (use negative for descending) ||
|| `3, -3` || Sort by WM changes (use negative for descending) ||
|| `4, -4` || Sort by production firings (use negative for descending) ||

== Description ==

This command prints Soar internal statistics. The argument indicates the component of interest, `--system` is used by default.

With the `--system` flag, the `stats` command lists a summary of run statistics, including the following: 
  * *Version* --- The Soar version number, hostname, and date of the run.
  * *Number of productions* --- The total number of productions loaded in the system, including all chunks built during problem solving and all default productions.
  * *Timing Information* --- Might be quite detailed depending on the flags set at compile time. See note on timers below.
  * *Decision Cycles* ---  The total number of decision cycles in the run and the average time-per-decision-cycle in milliseconds.
  * *Elaboration cycles* --- The total number of elaboration cycles that were executed during the run, the average number of elaboration cycles per decision cycle,  and the average time-per-elaboration-cycle in milliseconds.  This is not the total number of production firings, as productions can fire in parallel.
  * *Production Firings* --- The total number of productions that were fired. 
  * *Working Memory Changes* --- This is the total number of changes to working memory. This includes all additions and deletions from working memory.  Also prints the average match time.
  * *Working Memory Size* --- This gives the current, mean and maximum number of working memory elements. 

The `stats` argument `--memory` provides information about memory usage and Soar's memory pools, which are used to allocate space for the various data structures used in Soar.

The `stats` argument `--rete` provides information about node usage in the Rete net, the large data structure used for efficient matching in Soar.

TODO: Document new SMem branch options.

=== A Note on Timers ===

The current implementation of Soar uses a number of timers to provide time-based statistics for use in the stats command calculations. These timers are:

  * total CPU time
  * total kernel time
  * phase kernel time (per phase)
  * phase callbacks time (per phase)
  * input function time
  * output function time

Total CPU time is calculated from the time a decision cycle (or number
of decision cycles) is initiated until stopped. Kernel time is the
time spent in core Soar functions. In this case, kernel time is
defined as the all functions other than the execution of callbacks and
the input and output functions. The total kernel timer is only stopped
for these functions. The phase timers (for the kernel and callbacks)
track the execution time for individual phases of the decision cycle
(i.e., input phase, preference phase, working memory phase, output
phase, and decision phase). Because there is overhead associated with
turning these timers on and off, the actual kernel time will always be
greater than the derived kernel time (i.e., the sum of all the phase
kernel timers). Similarly, the total CPU time will always be greater
than the derived total (the sum of the other timers) because the
overhead of turning these timers on and off is included in the total
CPU time. In general, the times reported by the single timers should
always be greater than than the corresponding derived time.
Additionally, as execution time increases, the difference between
these two values will also increase. For those concerned about the
performance cost of the timers, all the run time timing calculations
can be compiled out of the code by defining `NO_TIMING_STUFF` (in
`soarkernel.h`) before compilation.

== Examples ==
Track per-cycle stats then print them out using default sort:
{{{
stats --track
run
stop
stats --cycle
}}}

Print out per-cycle stats sorting by decision cycle time
{{{
stats --cycle --sort 2
}}}

Print out per-cycle stats sorting by firing counts, descending
{{{
stats --cycle --sort -4
}}}

Save per-cycle stats to file `stats.csv`
{{{
ctf stats.csv stats --cycle-csv
}}}

== See Also ==
[CommandLineInterface#timers timers]

----
= version =
Returns the version number of the Soar kernel.

== Synopsis ==
{{{
version
}}}

== Description ==
This command gives version information about the current Soar kernel.  It returns the version number and build date which can then be stored by the agent or the application.

----
= warnings =
Enable or disable the printing of warning messages from the Soar kernel.

== Synopsis ==
{{{
warnings [options]
}}}

== Options ==
|| `-e, --enable, --on` || Default.  Print all warning messages from the kernel.||
|| `-d, --disable, --off` || Disable all, except most critical, warning messages.||

== Description ==
Enables and disables the printing of warning messages.  If an argument is  specified, then  the  warnings  are set to that state.  If no argument is given, then the current  warnings  status  is  printed.   At startup,  warnings  are  initially enabled.  If warnings are disabled  using  this  command,  then  some   warnings   may still be printed, since some are considered too important to ignore.

The warnings that are printed apply to the syntax of the productions, to
notify the user when they are not in the correct syntax. When a lefthand side
error is discovered (such as conditions that are not linked to a common state
or impasse object), the production is generally loaded into production memory
anyway, although this production may never match or may seriously slow down
the matching process. In this case, a warning would be printed only if `warnings` were `--on`.
Righthand side errors, such as preferences that are not
linked to the state, usually result in the production not being loaded, and a warning regardless of the `warnings` setting.

----
= watch =
Control the run-time tracing of Soar.

== Synopsis ==
{{{
watch [options]
watch level
}}}

Default aliases: `w`

== Options ==
When appropriate, a specific option may be turned off using the `remove` argument. This argument has a numeric alias; you can use `0` for `remove`.  A mix of formats is acceptable, even in the same command line.

=== Basic Watch Settings ===
|| *Option Flag* || *Argument to Option* || *Description* ||
|| `-l, --level` || `0` to `5` (see _Watch Levels_ below) || This flag is optional but recommended.  Set a specific watch level using an integer `0` to `5`, this is an inclusive operation ||
|| `-N, --none` || No argument || Turns off all printing about Soar's internals, equivalent to `--level 0` ||
|| `-d, --decisions` || `remove` (optional) || Controls whether state and operator decisions are printed as they are made ||
|| `-p, --phases` || `remove` (optional) || Controls whether decisions cycle phase names are printed as Soar executes ||
|| `-P, --productions` || `remove` (optional) || Controls whether the names of productions are printed as they fire and retract, equivalent to `-Dujc` ||
|| `-w, --wmes` || `remove` (optional) || Controls the printing of working memory elements that are added and deleted as productions are fired and retracted.  (Including wme changes to GDS) ||
|| `-r, --preferences` || remove (optional) || Controls whether the preferences generated by the traced productions are printed when those productions fire or retract ||

==== Watch Levels ====
Use of the `--level` (`-l`) flag is optional but recommended.
|| 0 || watch nothing; equivalent to `-N` ||
|| 1 || watch decisions; equivalent to `-d` ||
|| 2 || watch phases and decisions; equivalent to `-dp` ||
|| 3 || watch productions, phases, and decisions; equivalent to `-dpP` ||
|| 4 || watch wmes, productions, phases, and decisions; equivalent to `-dpPw` ||
|| 5 || watch preferences, wmes, productions, phases, and decisions; equivalent to `-dpPwr` ||

It is important to note that watch level `0` turns off ALL watch options, including backtracing, indifferent selection and learning.  However, the other watch levels do not change these settings.  That is, if any of these settings is changed from its default, it will retain its new setting until it is either explicitly changed again or the watch level is set to `0`.

=== Watching Productions ===
By default, the names of the productions are printed as each production
fires and retracts (at `watch` levels `3` and higher).  However,
it may be more helpful to watch only a specific _type_ of production.
The tracing of firings and retractions of productions can be limited
to only certain types by the use of the following flags:
|| *Option Flag* || *Argument to Option* || *Description* ||
|| `-D, --default` || `remove` (optional) ||  Control only default-productions as they fire and retract ||
|| `-u, --user` || `remove` (optional) || Control only user-productions as they fire and retract ||
|| `-c, --chunks` ||  `remove` (optional) || Control only chunks as they fire and retract ||
|| `-j, --justifications` || remove (optional) ||  Control only justifications as they fire and retract ||
|| `-T, --template` || `remote` (optional) || Soar-RL template firing trace ||

*Note:* The [CommandLineInterface#pwatch pwatch] command is used to watch individual productions specified by name rather than watch a type of productions, such as `--user`.

Additionally, when watching productions, users may set the level of
detail to be displayed for WMEs that are added or retracted as
productions fire and retract. Note that detailed information about WMEs will be printed only for productions
that are being watched.
|| ''Option Flag'' || ''Description'' ||
|| `-n, --nowmes` || When watching productions, do not print any information about matching wmes ||
|| `-t, --timetags` || When watching productions, print only the timetags for matching wmes ||
|| `-f, --fullwmes` || When watching productions, print the full matching wmes ||

=== Watching Learning ===
|| *Option Flag* || *Argument to Option* || *Description* ||
|| `-L, --learning` || `noprint`, `print`, or `fullprint` (see table below) || Controls the printing of chunks/justifications as they are created ||

As Soar is running, it may create justifications and chunks which
are added to production memory.  The `watch` command allows 
users to monitor when chunks and justifications are created by
specifying one of the following arguments to the `watch --learning`
command:
|| *Argument* || *Alias* || *Effect* ||
|| `noprint` || `0` || Print nothing about new chunks or justifications (default) ||
|| `print` || `1` || Print the names of new chunks and justifications when created ||
|| `fullprint` || `2` || Print entire chunks and justifications when created ||

=== Watching other Functions ===
|| *Option Flag* || *Argument to Option* || *Description* ||
|| `-b, --backtracing` || remove (optional) ||  Controls the printing of backtracing information when a chunk or justification is created ||
|| `-i, --indifferent-selection` || remove (optional) || Controls the printing of the scores for tied operators in random indifferent selection mode ||
|| `-R, --rl` || remove (optional) || Soar-RL debugging trace ||

== Description ==
The `watch` command controls the amount of information that is printed out as Soar runs. The basic functionality of this command is to trace various `levels` of information about Soar's internal workings.
The higher the `level`, the more information is printed as Soar runs. At the lowest setting, `0` (`--none`), nothing is printed.
The levels are cumulative, so that each successive level prints the information from the previous level as 
well as some additional information.  The default setting for the `level` is `1`, (`--decisions`). 

The numerical arguments _inclusively_ turn on all levels up to the number specified. To use numerical arguments to turn off a level, specify a number which is less than the level to be turned off. For instance, to turn off watching of productions, specify `watch --level 2` (or 1 or 0). Numerical arguments are provided for shorthand convenience. For more detailed control over the watch settings, the named arguments should be used. 

With no arguments, this command prints information about the current `watch` status, i.e., the values of each parameter.

For the named arguments, including the named argument turns on only that setting.  To turn off a specific setting, follow the named argument with `remove` or `0`.  

The named argument `--productions` is shorthand for the four arguments `--default`, `--user`, `--justifications`, and `--chunks`.

== Examples ==

The most common uses of watch are by using the numeric arguments which indicate watch levels.  To turn off all printing of Soar internals, do any one of the following (not all possibilities listed):
{{{
watch --level 0
watch -l 0
watch -N
}}}

Although the `--level` flag is optional, its use is recommended:
{{{
watch --level 5   # OK
watch 5           # OK, avoid
}}}

Be careful of where the level is on the command line, for example, if you want level 2 and preferences:
{{{
watch -r -l 2 # Incorrect: -r flag ignored, level 2 parsed after it and overrides the setting
watch -r 2    # Syntax error: 0 or remove expected as optional argument to -r
watch -r -l 2 # Incorrect: -r flag ignored, level 2 parsed after it and overrides the setting
watch 2 -r    # OK, avoid
watch -l 2 -r # OK
}}}

To turn on printing of decisions, phases and productions, do any one of the following (not all possibilities listed):
{{{
watch --level 3
watch -l 3
watch --decisions --phases --productions
watch -d -p -P
}}}

Individual options can be changed as well.  To turn on printing of decisions and wmes, but not phases and productions, do any one of the following (not all possibilities listed):
{{{
watch --level 1 --wmes
watch -l 1 -w
watch --decisions --wmes
watch -d --wmes
watch -w --decisions
watch -w -d
}}}

To turn on printing of decisions, productions and wmes, and turns phases off, do any one of the following (not all possibilities listed):
{{{
watch --level 4 --phases remove
watch -l 4 -p remove
watch -l 4 -p 0
watch -d -P -w -p remove
}}}

To watch the firing and retraction of decisions and _only_ user productions, do any one of the following (not all possibilities listed):
{{{
watch -l 1 -u
watch -d -u
}}}

To watch decisions, phases and all productions _except_ user productions and justifications, and to see full wmes, do any one of the following (not all possibilities listed):
{{{
watch --decisions --phases --productions --user remove --justifications remove --fullwmes
watch -d -p -P -f -u remove -j 0
watch -f -l 3 -u 0 -j 0
}}}

== See Also ==

[CommandLineInterface#pwatch pwatch] [CommandLineInterface#print print] [CommandLineInterface#run run] [CommandLineInterface#watch-wmes watch-wmes]









