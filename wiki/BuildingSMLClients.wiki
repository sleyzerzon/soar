#summary Instructions for building SML C++ programs

= Introduction =

Getting a C++ program to call the SML API is conceptually simple: all that's required is to include the header file "sml_Client.h" and link to the Soar shared library. In practice, this can still be a pain, mostly because the compiler usually can't find these two things automatically. This page lays out the steps required to compile a C++ SML client program successfully on Linux/OSX/Windows. *These instructions are for the 9.3.2 and later releases.* Previous releases required a slightly more complex compilation process.

If you are using the pre-built release package, the Soar shared library will be in `SoarSuite/bin`, and the header will be in `SoarSuite/bin/include`. If you are building Soar from source, by default the build script will put the shared library in `SoarSuite/out`, and the headers in `SoarSuite/out/include`. Also note that when building from source, you need to build the "kernel" target (built by default) to get the shared library, and the "headers" target (not built by default) to produce the include directory. See [BuildSconsScript this page] for more information. For the rest of this document, we will assume the reader is using the pre-built release package.

For all compilers and operating systems, *please make sure that you link 32-bit programs to the 32-bit version of Soar, and likewise for the 64-bit version.* The error messages compilers produce for mismatched instruction sets tend to be cryptic, and you probably won't realize what the problem is from reading them.

For convenience, here's a Hello World program that you can use to test your compilation process:

{{{
#include <iostream>
#include "sml_Client.h"

using namespace std;
using namespace sml;

int main(int argc, char *argv[]) {
	Kernel *k = Kernel::CreateKernelInNewThread();
	Agent *a = k->CreateAgent("soar");
	cout << a->ExecuteCommandLine("echo Hello World") << endl;
	
	string dummy;
	cin >> dummy;
	return 0;
}
}}}

= Linux / Mac OS X =

It's fairly straightforward to compile an SML client program from a shell using g++ or clang++. Both compilers take the same arguments. Supposing you unpacked the release into `/home/user/SoarSuite`, the compilation command should be:

{{{
g++ -L/home/user/SoarSuite/bin -I/home/user/SoarSuite/bin/include your_program.cpp -lSoar
}}}

`-L` specifies additional library search directories, `-I` specifies additional include search directories, and `-l` specifies libraries to link to. The linker automatically figures out that `-lSoar` refers to the file `libSoar.so` on Linux or `libSoar.dylib` on OSX.

Note that even though the linker can find the Soar shared library at link-time, the OS will still not know where it is at run-time (unless you use the `RPATH` feature). Therefore, you still need to set the environment variables `LD_LIBRARY_PATH` on Linux and `DYLD_LIBRARY_PATH` on OSX to `/home/user/SoarSuite/bin` when running your compiled program. More details can be found on [BuildLibrarySearchPaths this page].

= Windows with Visual Studio =

Compiling an SML program using Visual Studio is a little more tedious because you have to navigate its cryptic configuration GUI. Here we present step-by-step instructions for setting up a new C++ project. These steps were tested using MSVC++ 2010 Express, but should be very similar or identical for other versions of Visual Studio. We assume you extracted the release into `C:\SoarSuite`.

 # In the menu, select File/New/Project...
 # Choose the "Empty Project" template. Enter a name for the project.
 # In the Solution Explorer, under the newly created project, there should be a "Source Files" folder. Right click it, choose Add/New Item... Choose "C++ File" in the template selection window that pops up, and give the file a name. You need to do this now so that the Properties window will show options for compiling C++ programs. I also copied the contents of the above Hello World program into the new file, but you don't have to.
 # Right click on the new project (NOT the solution) in the Solution Explorer, choose Properties.
 # Click on "Configuration Manager" in the upper right corner of the Properties window. Make sure that your project's Platform matches the version of Soar you downloaded/compiled. That means if you have a 32-bit version of Soar.dll, you need to use the "Win32" platform, and if you have a 64-bit version, you need to use the "x64" platform. VC++ Express doesn't include a 64-bit compiler, so if you are using it, you must use the 32-bit Soar. When you are done, close the Configuration Manager.
 # In the "Configuration" drop-down box in the top left corner of the properties window, select "All Configurations" so that the changes you make apply to both debug and release configurations.
 # Under Configuration Properties / Debugging / Environment, enter `PATH=C:\SoarSuite\out`. This will set the `PATH` environment variable to find Soar.dll when you run your program from within the IDE.
 # Under Configuration Properties / C/C++ / General / Additional Include Directories, add the entry `C:\SoarSuite\bin\include`.
 # Under Configuration Properties / Linker / General / Additional Library Directories, add the entry `C:\SoarSuite\bin`.
 # Under Configuration Properties / Linker / Input / Additional Dependencies, add `Soar.lib`.
 # Click "Okay" in the Properties window to save the changes.

Now you should be able to build and run your project. Remember that if you want to run the program outside of the Visual Studio IDE, you need to add `C:\SoarSuite\bin` to your `PATH` environment variable, discussed in more detail [BuildLibrarySearchPaths here].

= Static Linking =

You can compile Soar as a static library, as described [BuildSconsScript here]. To link your program to a static Soar library, the only change you have to make is to define the macro `STATIC_LINKED` before you include `sml_Client.h`. There are macros in the Soar headers that will expand to different values depending on whether `STATIC_LINKED` is defined. Specifically, the prefix `declspec(dllimport)` is prepended to all SML API functions when compiling with MSVC++ (more information [http://support.microsoft.com/kb/132044 here], if you're interested).

 * With g++ and clang++, the easiest way to do this is to pass in the flag `-DSTATIC_LINKED`.
 * In Windows/VC++, go to the Properties window for the project. Then under Configuration Properties / C/C++ / Preprocessor / Preprocessor Definitions, add the text `STATIC_LINKED`. Click "Apply", then look under Configuration Properties / C/C++ / Command Line. You should see `/D "STATIC_LINKED"` somewhere in the command.