#summary Documentation on new simulation/room environment hybrid.

<wiki:toc max_depth="3"/>

----

= I/O =

== Input Link ==

=== Point Data ===

Objects, waypoints, and walls, and gateways share the following structure when described on the input link:

  * *x* (_float_)
  * *y* (_float_)
  * *z* (_float_)
  * *distance* (_float_) (positive): Distance to point.
  * *yaw* (_angle-resolution type_)  (-180 to 180, or -pi to pi): What absolute yaw to turn to to face the point.
  * *relative-bearing* (_angle-resolution type_) (-180 to 180, or -pi to pi): Which way to turn to face the point, positive means turn left. 0 means the point is straight ahead.
  * *abs-relative-bearing* (_angle-resolution type_) (0 to 180 or 0 to pi): Magnitude of relative bearing, represents how far to turn.

=== Time ===
  * _time_
    * *seconds* (_int_) (positive seconds): Use to measure elapsed time only.
    * *microseconds* (_int_) (microseconds 0 to 999999): Fraction of second, use to measure elapsed time only.

Use time.*seconds* and time.*microseconds* to measure elapsed time only--they are not related to any other notion of system or wall-clock time. Real current time is not implemented.

=== Configuration ===

  * _configuration_
    * Reports all current settings of [Sproom#Configure_Commands output-link.configure].
    * _limits_
      * _velocity_
        * _linear_
          * *maximum* Maximum linear velocity in configured units.
          * *minimum* Minimum linear velocity in configured units.
        * _angular_
          * *maximum* Maximum linear velocity in configured units.
          * *minimum* Minimum linear velocity in configured units.
    * _geometry_
      * *length*
      * *width*
      * *height*
      * *wheelbase*

Current interface configuration, configurable using the output link [Sproom#Configure_Commands configure] command. WME formats are identical to the command parameters except that there is no *status* reported here.

Additionally, some non-configurable information is presented on the *configuration* input link.

=== Self ===

  * _self_
    * *name* (_string_): Agent name.
    * *area* (_int_): Unique identifying number for area/room.
    * _pose_
      * *x* (_float_)
      * *y* (_float_)
      * *z* (_float_)
      * *yaw* (_angle-resolution type_) (-180 to 180, or -pi to pi)
      * *x-velocity* (_float_)
      * *y-velocity* (_float_)
      * *z-velocity* (_float_)
      * *yaw-velocity* (_float_) (positive for left turn, negative for right turn)

Self contains data about the robot itself.

*self.pose* gives information about the robot's position and velocity. This information is an aggregate of mapping and navigational subsystems (such as odometry or external localizers) between the interface and the simulation or hardware. The origin can be configured using the [Sproom#Configure_Commands configure command].

=== Waypoints ===

  * _waypoints_
    * _waypoint_: One for each registered and enabled waypoint.
      * *id* (_any type_): User-defined unique identifier in user-defined type.
      * [Sproom#Point_Data Point data, as described above].

The Soar interface allows agents to define arbitrary points in space as named waypoints. Waypoints that are defined and enabled (they are enabled by default when defined) show up under the *waypoints* identifier. Distance to and useful angles are calculated to the waypoint.

=== Received Messages ===

  * _received-messages_
    * _message_: One for each received message.
      * *id* (_int_): Unique identifying number for message.
      * *from* (_string_): Source of message (such as agent name).
      * _first_: Starts linked list.
        * *word* (_string_): The word data.
        * _next_ (_identifier_ *or* _string_ "nil" to end): Under this identifier are more *word* and *next* WMEs, terminated when *next* is "nil".

The messaging system places messages to and from the agent under the *received-messages* identifier. Each message has a unique id number (used with the messaging commands) and a *from* field and a linked list of space-delimited words ended when *next* is set to a string instead of being an identifier pointing to the next *word*. For example:

{{{
# Matching on "go to waypoint alpha" from alice:

(<s> ^io.input-link.received-messages.message <m>)
(<m> ^id 1 ^from alice ^first <w1>)
(<w1> ^word go ^next <w2>)
(<w2> ^word to ^next <w3>)
(<w3> ^word waypoint ^next <w4>)
(<w4> ^word alpha ^next nil)
}}}

=== Lidar ===

  * _lidar_
    * _range_: One per range to be measured (default is 5).
      * *id* (_int_): `-nranges / 2 to nranges / 2`, 0 is straight ahead (so, with 5, -2, -1, 0, 1, 2).
      * *distance* (_float_): Measured distance.
      * *relative-bearing* (_angle-resolution type_): Relative bearing to measured distance.

=== Area Description ===

  * _area-description_
    * *id* (_int_): Unique identifying number for area/room.
    * *type* (_string_) (door, room): Type of room.
    * _gateway_: One for each exit from the room.
      * *id* (_int_): Unique identifying number for gateway.
      * *direction* (_string_) (north, east, south, west): Which wall the gateway is on.
      * *to* (_int_): Area id on one side of gateway.
      * *to* (_int_): Area id on other side of gateway.
      * [Sproom#Point_Data Point data, as described above].
    * _wall_
      * *direction* (_string_) (north, east, south, west): Which wall it is.
      * [Sproom#Point_Data Point data, as described above].

Area descriptions currently assume square rooms with walls and gateways aligned with the x/y axes.

=== Objects ===

  * _object_
    * *type* (_string_) (block, brick, ball, player): Type of object.
    * *id* (_int_): Unique identifying number for objects.
    * *name* (_string_): Unique agent name if other player.
    * *visible* (_string_) (true, false): Object stays on input link briefly after it is not visible. 
    * Optional properties (see below).

Objects in the world are sensed with some of these application-specific properties.

  * *color* (_string_) 
  * *height* (_string_)
  * *smell* (_string_)
  * *shape* (_string_)
  * *weight* (_float_)
  * *diffusible* (_string_) (true, false): Object can be diffused.
  * *diffuse-wire* (_string_) (red, green, blue): Which wire diffuses it.
  * *diffused* (_string_) (true, false): Object (diffusible only) is diffused.

== Output Link ==

A note about status error: most commands that return with status error will have an error message attached for debugging. Example:

{{{
# Parsing failure for set-velocity

(<s> ^io.output-link.set-velocity <sv>)
(<sv> ^status error ^message |set-velocity: Unable to parse linear-velocity| )
}}}

=== Drive Commands ===

Only _one_ of the drive commands can be issued at a time. If more than one command is issued, the system arbitrarily picks one unless one of them is *estop*, which overrides all other drive commands.

All parameters for the command must be on the same identifier of the command. For example:

{{{
# All parameters for the command must be on the same identifier

(<s>  ^io.output-link <ol>)
(<ol> ^set-velocity <sv>)
(<sv> ^linear-velocity 1. ^angular velocity 1.) # Good


(<ol>  ^set-velocity <sv1> ^set-velocity <sv2>)  # BAD: two separate commands
(<sv1> ^linear-velocity 1.)    # BAD: missing angular velocity argument
(<sv2> ^angular velocity 1.)   # BAD: missing linear velocity argument
}}}

For all drive commands:

|| *throttle* || _float_ || A number from -1.0 to 1.0 representing percent throttle (or effort), negative is reverse. ||
|| *linear velocity* || _float_ ||  Velocity, positive for forward or negative for reverse, in units defined by configuration. Subject to limitations defined in configuration. ||
|| *angular velocity* || _float_ || Rotation, degrees or radians (as defined in configuration) per second, subject to limitations defined in configuration. *Positive is left turn.* ||
|| *yaw* || _float_ or _int_ || Absolute yaw. Ranges outside of normal limits (such as 720 degrees or -3*pi) are OK (and will be reduced internally to the usual ranges). ||

  * _motor_
    * *left* (_float_): Throttle, described above.
    * *right* (_float_): Throttle, described above.
    * *status* (_string_) (accepted, executing, complete, error)

  * _set-velocity_
    * *linear-velocity*
    * *angular-velocity*
    * *status* (_string_) (accepted, executing, complete, error)

  * _set-linear-velocity_
    * *linear-velocity*
    * *status* (_string_) (accepted, executing, complete, error)

  * _set-angular-velocity_
    * *angular-velocity*
    * *status* (_string_) (accepted, executing, complete, error)

  * _set-heading_
    * *yaw* (_any number type_)
    * *status* (_string_) (accepted, executing, interrupted, complete, error)

  * _set-heading-linear_
    * *yaw* (_any number type_)
    * *linear-velocity* (_float_)
    * *status* (_string_) (accepted, executing, interrupted, complete, error)

  * _stop_: Graceful stop.
    * *status* (_string_) (accepted, executing, interrupted, complete, error)

  * _estop_: Emergency/all stop.
    * *status* (_string_) (accepted, complete)

=== Effector Commands ===

  * _get-object_: Pick up an object.
    * *id* (_int_): Target object id.
    * *status* (_string_) (accepted, complete, error)

  * _drop-object_: Drop a carried object.
    * *id* (_int_): Target object id.
    * *status* (_string_) (accepted, complete, error)

  * _diffuse-object_: Engage in a domain-specific diffuse task.
    * *id* (_int_): Target object id.
    * *status* (_string_) (accepted, complete, error)

  * _diffuse-object-by-wire_: Engage in a domain-specific diffuse task.
    * *id* (_int_): Target object id.
    * *color* (_string_) (red, green, blue): What wire to cut
    * *status* (_string_) (accepted, complete, error)

=== Waypoint Commands ===

  * _add-waypoint_: Enter a waypoint into the system, enabled.
    * *id* (_any type_): User-defined identifier string, type will be replicated on input-link.
    * *x* (_float_): Optional, default is 0.
    * *y* (_float_): Optional, default is 0.
    * *z* (_float_): Optional, default is 0.
    * *status* (_string_): (accepted, complete, error)

  * _remove-waypoint_: Remove the waypoint from the system.
    * *id* (_any type_)
    * *status* (_string_) (accepted, complete, error)

  * _enable-waypoint_: Enable a previously disabled waypoint.
    * *id* (_any type_)
    * *status* (_string_) (accepted, complete, error)

  * _disable-waypoint_: Disable an enabled waypoint.
    * *id* (_any type_)
    * *status* (_string_) (accepted, complete, error)

=== Communication Commands ===

Messages sent will appear on the input link after a one-decision-cycle delay.

The *destination* parameter for *send-message* is optional. If omitted, message will be broadcast to all listeners, *including the sending agent* (local echo).

The *say* destination is not currently implemented on windows platforms.

The *remove-message* command uses the message id number, available at *io.input-link.self.received-messages.message.id*

  * _send-message_
    * *destination* (_string_): Target of message or omit to broadcast to all available listeners.
    * _first_: See format and example under [Sproom#Self Self] above.
    * *status* (_string_) (accepted, complete, error)

  * _remove-message_: Remove a specific message from the received-messages list.
    * *id* (_int_)
    * *status* (_string_) (accepted, complete, error)

  * _clear-messages_: Remove all messages from received-messages list.
    * *status* (_string_) (accepted, complete)

=== Configure Commands ===

  * _configure_ See *input-link.configuration*.
    * *length-units* (_string_) (meters, feet): Units to use for length in I/O (globally).
    * *angle-units* (_string_) (radians, degrees): Units to use for angle measurement in I/O (globally).
    * *angle-resolution* (_string_) (int, float): Use integers or floating-point types for angle measurements in I/O (globally). Note that radians are always measured in floating-point.
    * *speed-units* (_string_) (meters_per_sec, feet_per_sec, miles_per_hour): Units to use for linear speed measurement (globally).
    * _pose-translation_: Translation to relocate origin of *self.pose*.
      * *x* (_float_)
      * *y* (_float_)
      * *z* (_float_)
    * *status* (_string_) (accepted, complete, error)

Configures the Soar interface. See the input link *configuration* identifier. Since there is only one *status* result, it is best to issue configure commands separately so that any errors will be easily traced.