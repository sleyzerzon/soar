#summary Repository Layout
#labels Phase-Requirements

[http://code.google.com/p/soar/source/browse BROWSE THE REPOSITORY HERE].

[Build Full build instructions here].

<wiki:toc max_depth="1" />

----
= trunk =

The main line of development for Soar projects.

== !SoarSuite ==

!SoarSuite contains many Soar-related components and is not intended to be checked-out recursively. Each subfolder is a separate component and can be checked out independently, depending on what features and programs are necessary.

Checking out this folder is not strictly required but is recommended ([http://svnbook.red-bean.com/en/1.5/svn.advanced.sparsedirs.html with the --depth files switch]) for a couple of convenience files it contains:

  * There is a Makefile in this folder with shortcuts to assist checking out and building components on unix systems.
  * There are batch files to assist building the project using Visual Studio on Windows.

For more information on the build procedure, see the [Build] document.

=== Components ===

  * *Core*: Core contains the Soar kernel, interfaces and build files. Core must be checked out with any other modules because they all depend on it. Core also contains some test programs and other low-level utilites. Special sibling components to Core (such as Java and Python) enable the building of the Soar SWIG language interface for that language. The SCons build file will also build any SConscript in any of these sibling components.
    * *CLI*: Command line interface component of KernelSML. 
    * *ClientSML*: The client-side Soar interface, mirrors a lot of what happens on the Kernel side. This is where SML is implemented from the environment's perspective.
    * *ClientSMLSWIG*: Projects that use SWIG to generate a bridge between ClientSML and various supported languages.
    * *ConnectionSML*: A utility library used on both sides (client and kernel) of SML and in various other places in the code. Originally was only dealing with connections between client and kernel, but also contains many other things that need to be seen by both sides of SML, such as threading and synchronization code, string constants, utility functions, etc. The !SoarKernel itself does not reference ConnectionSML.
    * *ElementXML*: A custom, lightweight XML library tailored for the Soar markup language (SML).
    * *KernelSML*: The kernel side of SML, interfaces with the !SoarKernel directly or via the command line interface. Handles agent scheduling, mapping of client-side identifiers and timetags to kernel-side. Fires many events that don't exist in the kernel.
    * *!SoarKernel*: The core Soar kernel.
    * *Tests*: Unit tests for Core projects, uses CPPUNIT. This could change.
    * *pcre*: A BSD-licensed regular expression library required on Windows.
    * *shared*: Header-only global code intended to be shared by all projects. Portability issues are dealt with here, along with useful header-only library code for everyone, including the Soar kernel.
    * *Documentation*: Sources for much documentation are stored here, along with a pdf rendering of the Soar manual. Much of this is out of date and should be moved online.
  * *CoreTests*: Simple tests for Core.

  * *Java*: Triggers building of the Soar/Java interface via SWIG in Core. Most users will want this since it contains the Soar Java Debugger. Any Soar Java projects (such as Sproom or Soar2D) will also depend on this.

  * *Python*: Triggers building of the Soar/Python interface via SWIG in Core. Also contains a few utility and test scripts that use Soar with Python.

  * *CSharp*: Triggers building of the Soar/CSharp interface vis SWIG in Core. Also contains a test program for running Soar with CSharp.

  * *!JavaMissionaries*: The [http://en.wikipedia.org/wiki/Missionaries_and_cannibals_problem missionaries and cannibals problem] implemented as an external environment for Soar in Java. Depends on the Java component.

  * *JavaTOH*: The [http://en.wikipedia.org/wiki/Tower_of_Hanoi Towers of Hanoi puzzle] implemented as an external environment for Soar in Java. Depends on the Java component.

  * *!LoggerJava*: An example detailing how to hook an external logger to Soar, implemented in Java. When running soar, this can be used to connect to a running kernel, gathering and logging data without any other clients being aware of it.

  * *LoggerWinC*: An example detailing how to hook an external logger to Soar, implemented in C++ on Windows. See !LoggerJava.

  * *!ManualSource*: Source !LaTeX files and other resources for the Soar Manual.

  * *!QuickLink*: TODO

  * *Room*: The room environment. Obsolete, currently all functionality here is being merged with Sps and ported to Sproom, an environment with more realistic robotics and physics.

  * *Soar2D*: Home of Eaters and Tanksoar, external environments for Soar agents implemented in Java.

  * *!Soar2Soar*: A tool to quickly implement external Soar environments using other Soar agents.

  * *SoarTextIO*: TODO

  * *Sproom*: External robotics environment for Soar. Hooks up with actual hardware or runs in simulation. See [AprilSoar].

  * *Sps*: Old Splinter/Soar environment. Obsolete, currently all functionality here is being merged with Room and being ported to Sproom.

  * *TOHSML*: The [http://en.wikipedia.org/wiki/Tower_of_Hanoi Towers of Hanoi puzzle] implemented as an external environment for Soar in C++.

== Folders created by build ==

  * *out*: The default target build directory for executable binaries, dlls, libs, jars, and other resources. Also known as a prefix in GNU installer lingo. This can be changed using SCons switches or by modifying the Visual Studio build files. More build information is available on the [Build] document.

  * *build*: The default directory for intermediate and object files, keeps the source and output trees clean.

== !SoarPre8.6 ==

This is an archive of the 8.5.x kernel. Goes back pretty far.

== !SoarWorkshop ==

Old Soar Workshop web stuff.

== buildbot ==

Holds configuration files for buildbot system, but not current ones. The current config files need to be stored here TODO.

== msr ==

Soar and Microsoft Robotics Studio environment. Old.

----
= branches =

New major features and experimental ideas go here, originally copied from the trunk. Disruptive stuff. Some of it never makes it back to the trunk.

----
= tags =

Milestones such as releases or snapshots before major refactoring get copied here for future reference. 

----
= wiki =

The wiki pages are stored here with extension .wiki. No support for folders is available at the time of writing. More help is [http://code.google.com/p/support/wiki/WikiSyntax here].