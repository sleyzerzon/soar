= Linux =

The only officially supported Linux distribution right now is [http://www.ubuntu.com/ Ubuntu], though Soar should work on almost any distribution so long as things are configured correctly.

== Install the Prerequisites ==

  * Install the following required packages:
    # openjdk-6-jdk (you can also use Sun's Java JDK)
    # swig
    # build-essential
    # python-all-dev
    * To get the above items, you can use your favorite package manager is, such as `apt-get`.  For example:
{{{
sudo apt-get install openjdk-6-jdk swig build-essential python-all-dev
}}}
  * *Python*: Soar uses the SCons build system (scons.org), which requires Python. This should already be installed on Linux.  Just make sure you're running an appropriate version: 2.7.2 is recommended, but anything from 2.5 onward should work. The Python 3.x series WILL NOT WORK.  To check your version, type {{{python --version}}}

== Build Soar ==

Go into the !SoarSuite folder and run: 
{{{
python scons/scons.py all
}}}

All of your resulting binaries will be in the /out folder.  

For more detailed information about the Scons script, see the [BuildSconsScript SCons Script Documentation page]. See the [FAQ] for common solutions to errors.

== Set Up Your Environment Variables ==

While you don't need any environment variables to build Soar, you may need a few set when running or developing for Soar.  To make these changes permanent, edit the `.bashrc` file in your home diretory and put them at the bottom.

Soar binaries are, by default, installed to a prefix `SoarSuite/out`.  Java-based Soar application may need to be able to load relevant dynamic libraries on the fly, so you need to make sure that it can find the libraries it needs. Java will look `LD_LIBRARY_PATH`, so you can use that to tell it where to look.

{{{
# The exact path here will depend on your system settings.
export LD_LIBRARY_PATH=/home/$USER/soar/SoarSuite/out/
}}}

Certain functions in the kernel may also use the SOAR_HOME environment variable to find binaries.  For example, !SpawnDebugger uses it to find the !SoarDebugger.jar.

{{{
# The exact path here will depend on your system settings.
export SOAR_HOME=/home/$USER/soar/SoarSuite/out/
}}}

For more detailed information about library search paths, see our wiki page on [BuildLibrarySearchPaths how library search paths work].