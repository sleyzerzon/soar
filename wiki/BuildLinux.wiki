= Building Soar on Linux =

These instructions are for [http://www.ubuntu.com/ Ubuntu], which is the only officially supported Linux distribution right now. However, we've used Soar on a variety of distributions without any problems.

== Install the Prerequisites ==
  * Install the `build-essential` package to get the GNU compiler tools. This is required.
  * If you want to use the Soar Debugger (recommended) or interface with Soar using Java or Python, you need to install `swig`.
    * You need `openjdk-6-jdk` for the Soar Debugger and the Java interface. The exact version doesn't matter. You can also use Sun's JDK.
    * You need `python-all-dev` for the Python interface. This package installs the development headers that are not included in the default `python` package.
  * You can get all of the above using this command:
{{{
sudo apt-get install build-essential swig openjdk-6-jdk python-all-dev
}}}
  * Python 2 is required to build Soar, and should be installed by default in Ubuntu. Please make sure the installed version is 2.x (where x >= 5), as Python 3 doesn't work. To check your version, type {{{python --version}}}.

== Build Soar ==

Go into the !SoarSuite folder and run: 
{{{
python scons/scons.py all
}}}

All of your resulting binaries will be in the /out folder.  

For more detailed information about the Scons script, see the [BuildSconsScript SCons Script Documentation page]. See the [FAQ] for common solutions to errors.

== Set Environment Variables ==

(The following assumes that you're using the Bash shell)

In order to build and run a program that uses Soar, your system needs to know the locations of the Soar libraries and header files. Specify the library location by setting the `LD_LIBRARY_PATH` environment variable:

{{{
export LD_LIBRARY_PATH=$HOME/SoarSuite/out:$LD_LIBRARY_PATH
}}}

The exact path depends on where you put the Soar distribution. It should contain the file `libSoar.so`. Specify the headers location by setting the `CPATH` environment variable:

{{{
export CPATH=$HOME/SoarSuite/out/include:$CPATH
}}}

Please make sure that the `include` directory actually exists. If it does not, you need to build the `headers` target with SCons.

Certain functions in the kernel may also use the SOAR_HOME environment variable to find binaries.  For example, !SpawnDebugger uses it to find !SoarDebugger.jar. Set it like this:

{{{
export SOAR_HOME=$HOME/SoarSuite/out
}}}

You can add these commands to the `.bashrc` file in your home directory to automatically set these variables each time you start a Bash shell.

For more detailed information about library search paths, see the wiki page on [BuildLibrarySearchPaths how library search paths work].