# Generated automatically from Makefile.in by configure.
#
# Makefile.in for Soar 8.1 Tcl Shell
#
# This makefile template is in two sections.  The first specifies 
# a set of variables whose values are defined by the configure 
# script.  The values found by that script are substituted in the 
# placeholders which are indicated by the @...@ sequences (e.g., 
# gcc for the C compiler).  This template file is used to 
# generate "Makefile" after performing the indicated substitutions.
# [If you are trying to compile this on a non-Unix system, then you
# can make the relevant substitutions without using the configure 
# program.]  The configure script is generated by the GNU autoconf 
# utility.
#
# The second part of this makefile defines the rules for building
# the Soar 8.1 Tcl Shell.
#
#-----------------------------------------------------------------
#
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#
#=================================================================
#
# VARIABLES SET BY CONFIGURE
#
# This section of switches is defined by substitution from the
# configure script.  If you are building Soar on a non-Unix
# platform, then substitute the desired switch settings for the
# @...@ placeholders.
#

# The directory where we should install the actual soar71.so or build
# executables

prefix =		../..
exec_prefix =		${prefix}
LIB_INSTALL_DIR =	${exec_prefix}/lib
BIN_INSTALL_DIR =	${exec_prefix}/bin

# LIB_RUNTIME_DIR is used in the definition of TCL_LD_SEARCH_FLAGS
LIB_RUNTIME_DIR =	/usr/tcl/lib
TCL_LD_SEARCH_FLAGS =	

# The directory where we should install the Soar library scripts
SOAR_LIBRARY =		$(LIB_INSTALL_DIR)/soar8.1

# Set this to your favorite C Compiler that understands ANSI.
#
# CC = gcc
CC =			gcc
RANLIB =		ranlib

# Directories for installation
SRC_DIR =		.
TOP_DIR =		./..

# The location of the Soar kernel library, libsoarkernel.a

KERNEL_DIR =		../kernel
KERNEL_LIB_SPEC =	-L$(KERNEL_DIR) -lsoarkernel
KERNEL_INCLUDE_DIR =	../kernel

TCL_LIB_SPEC =		-L/usr/tcl/lib -ltcl76
TCL_INCLUDE_DIR =	/usr/tcl/include

TK_LIB_SPEC =		-L/usr/tcl/lib -ltk42
TK_LIBS =		

INSTALL =		/bin/install -c
INSTALL_PROGRAM =	${INSTALL}
INSTALL_DATA =		${INSTALL} -m 644

# The X11 include directory for tk.h
X11_INCLUDES =		-I/usr/X11/include

# The X11 library for tk
X11_LIB_SWITCHES =	-L/usr/X11/lib -lX11 -lXt

# Set these to be whatever flags you want to pass to your compiler.
# If the flags define ANSI C behavior, be sure to set them.
#

ANSI_FLAGS =		-ansi -fpcc-struct-return
SHLIB_CFLAGS =		-fPIC
DEFS =			-DUSE_TCL -DTCL_MAN_DIR=\"/usr/tcl/man\" \
                        -DSOAR_LIBRARY=\"$(SOAR_LIBRARY)\"  -DHAVE_UNISTD_H=1 -DTIME_WITH_SYS_TIME=1 -DHAVE_GETHOSTNAME=1 -DHAVE_GETTIMEOFDAY=1 -DHAVE_GETWD=1 
INCLUDE_FLAGS =		-I$(KERNEL_INCLUDE_DIR) -I$(TCL_INCLUDE_DIR) \
                        $(X11_INCLUDES)
CFLAGS =		-g -w $(ANSI_FLAGS) $(SHLIB_CFLAGS) $(DEFS) \
                        $(INCLUDE_FLAGS)

# The symbols below provide support for dynamic loading and shared
# libraries.  See configure.in for a description of what the
# symbols mean.  The values of the symbols are normally set by the
# configure script.  You shouldn't normally need to modify any of
# these definitions by hand.
MATH_LIBS =		-lm
LIBS =			$(KERNEL_LIB_SPEC) $(TCL_LIB_SPEC) -ldl \
                         $(X11_LIB_SWITCHES) $(MATH_LIBS) -lc
LIBSTK =		$(TK_LIB_SPEC) $(LIBS) $(TK_LIBS)
SHLIB_LD =		ld
SHLIB_LD_LIBS =		
SHLIB_SUFFIX =		.so


# The shared library target
SHLIB_TARGET=		libsoar8.1$(SHLIB_SUFFIX)


# The objects
OBJS =	soarAgent.o\
	soarArgv.o\
	soarCommandUtils.o\
	soarCommands.o\
	soarInterp.o\
	soarLog.o\
	soarMain.o\
	soarScheduler.o\
	soarVars.o


all:		dynamic
dynamic:	$(SHLIB_TARGET)
static:		soar
statictk:	soartk

$(SHLIB_TARGET): $(OBJS)
	$(SHLIB_LD) -o $(SHLIB_TARGET) $(OBJS) $(KERNEL_LIB_SPEC) $(SHLIB_LD_LIBS)


soar: tclAppInit.c $(OBJS)
	$(CC) $(CFLAGS) -o soar8.1 tclAppInit.c $(OBJS) $(LIBS) \
              $(TCL_LD_SEARCH_FLAGS)

soartk: tkAppInit.c $(OBJS)
	$(CC) $(CFLAGS) -o soartk8.1 tkAppInit.c $(OBJS) $(LIBSTK) \
              $(TCL_LD_SEARCH_FLAGS)

soarAgent.c:		soar.h
soarArgv.c:		soar.h
soarCommandUtils.c:	soar.h soarCommandUtils.h
soarCommands.c:		soar.h soarCommands.h soarCommandUtils.h soarScheduler.h $(KERNEL_DIR)/soarkernel.h
soarInterp.c:		soar.h soarCommandUtils.h soarScheduler.h
soarLog.c:		soar.h
soarMain.c:		soar.h
soarScheduler.c:	soar.h soarCommands.h soarCommandUtils.h soarScheduler.h
soarVars.c:		soar.h


install: all
	@if [ ! -d $(SOAR_LIBRARY) ] ; then \
                echo "Creating directory $(SOAR_LIBRARY)"; \
                mkdir $(SOAR_LIBRARY); \
                chmod 755 $(SOAR_LIBRARY); \
        fi;
	@for i in $(TOP_DIR)/library/*; \
	    do \
	    echo "Installing $$i"; \
	    $(INSTALL_DATA) $$i $(SOAR_LIBRARY); \
	    done;
	@if [ -f $(SHLIB_TARGET) ]; then \
		echo "Installing $(SHLIB_TARGET)"; \
		$(INSTALL_DATA) $(SHLIB_TARGET) $(LIB_INSTALL_DIR); \
	fi;
	@if [ -f soar ]; then \
		echo "Installing soar"; \
		$(INSTALL_PROGRAM) soar $(BIN_INSTALL_DIR); \
	fi;
	@if [ -f soartk ]; then \
		echo "Installing soartk"; \
		$(INSTALL_PROGRAM) soartk $(BIN_INSTALL_DIR); \
	fi;


clean:
	rm -f *.o $(SHLIB_TARGET) soar soartk core *~ *.exp


distclean:	clean
	rm -f Makefile config.status config.cache

