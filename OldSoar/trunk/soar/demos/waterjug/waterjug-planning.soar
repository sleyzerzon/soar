###
### FILE               : waterjug-planning.soar (Soar 8)
###
### AUTHOR             : John E. Laird
###
### Last Modified:     : September 16, 1999
###
### ABSTRACT.
### These Soar productions implement the waterjug task.
### This set supports planning and chunking - learning of search control
### knowledge.
###
### PROBLEM STATEMENT:
### You are given two empty jugs. One holds five gallons of water and
### the other holds three gallons. There is a well that has unlimited
### water in it that you can use to completely fill the jugs. You can
### also empty a jug or pour water from one jug to another. There are no
### marks for intermediate levels on the jugs. The goal is to fill the
### three-gallon jug with one gallon of water.
###
### A PSYCHOLOGICAL NOTE. The present set of productions could be used
### as a starting point to study models of and issues associated with
### (variant) water jug tasks. Relevant references are listed below.
###
### REFERENCES.
### [1] Atwood, M. E., & Polson, P. G. (1976). A process model for water
### jug problems. Cognitive Psychology, 8, 191-216.
### [2] Ernst, G. W., & Newell, A. (1969). GPS: A case study in
### generality and problem solving. New York: Academic Press.
### [3] Mortensen, U. (1973). Models for some elementary problem solving
### processes. In A. Elithorn & D. Jones (Eds.), Artificial and human
### thinking. San Francisco, CA: Jossey-Bass.
###
### DESCRIPTION.
### The task problem space has three operators: empty, fill, and
### pour. Empty empties a jug into the well. Fill fills up a jug from
### the well. Pour pours some or all of the contents from one jug into
### the other jug. Pour can only pour out the contents of the jug until
### the source is empty or the destination is full.
###
### State Structure:
### The state has augmentations for each jug.
### Each jug has attributes to record its capacity [volume],
###                the amount of water it contains [contents],
###                     and the capacity available [free].
###    (free = the volume minus the contents)
###
### (state s1 ^jug j1)
### (jug j1 ^volume v1 ^contents c1 ^free f1) v1, c1, and f1 are numbers.
###

multi-attributes jug 3

learn -off
pushd ../default
source simple.soar
source selection.soar
popd

###
### WATERJUG NAME 
###

sp {top-state*elaborate*waterjug
   (state <s> ^superstate nil)
   -->
   (<s> ^name waterjug)}

###
### WATERJUG PROBLEM SPACE
###

sp {top-state*elaborate*problem-space
	(state <s> ^name waterjug)
	-->
   (<s> ^problem-space <p>)
   (<p> ^name waterjug 
        ^default-state-copy yes
        ^two-level-attributes jug)}

###
### WATERJUG:
### INITIAL AND DESIRED STATE
###

sp {waterjug*elaborate*state*initial*desired-state
   (state <s> ^superstate nil
              ^name waterjug)
   -->
   (<s> ^desired.jug <k>
        ^jug <i> <j>)
   (<i> ^volume 3
        ^contents 0
        ^free 3) 
   (<j> ^volume 5
        ^contents 0
        ^free 5)
   (<k> ^volume 3 
        ^contents 1)}

###
### WATERJUG TASK OPERATORS:
### FILL, EMPTY, AND POUR
###

sp {waterjug*propose*fill
   (state <s> ^name waterjug
              ^jug <j>)
   (<j> ^free > 0)
   --> 
   (<s> ^operator <o>)
   (<o> ^name fill 
        ^jug <j>)}

sp {waterjug*propose*empty 
   (state <s> ^name waterjug
              ^jug <j>)
   (<j> ^contents > 0)
   -->
   (<s> ^operator <o>) 
   (<o> ^name empty
        ^jug <j>)}

sp {waterjug*propose*pour
   (state <s> ^name waterjug
              ^jug <i> { <> <i> <j> }) 
   (<i> ^contents > 0 )
   (<j> ^free > 0)
   --> 
   (<s> ^operator <o>)
   (<o> ^name pour 
        ^jug <i> 
        ^into <j>)}

###
### WATERJUG:
### OPERATOR APPLICATION
###

sp {apply*fill 
   (state <s> ^operator <o>
              ^jug <i>)
   (<o> ^name fill 
        ^jug <i>)
   (<i> ^volume <volume> 
        ^contents <contents>
        ^free <free>)
   --> 
   (<i> ^contents <volume> <contents> - 
        ^free 0 <free> - )}

sp {apply*empty
   (state <s> ^operator <o>
              ^jug <i>)
   (<o> ^name empty 
        ^jug <i>)
   (<i> ^volume <volume> 
        ^contents <contents> 
        ^free <free>)
   --> 
   (<i> ^contents 0 <contents> - 
        ^free <volume> <free> - )}

 ## Apply pour when contents of source jug i is less than 
 ## or equal to the capacity available of the destination jug j.

sp {apply*pour*not-empty-source
   (state <s> ^operator <o>)
   (<o> ^name pour 
        ^jug <i> 
        ^into <j>)
   (<j> ^volume <jvol> 
        ^contents <jcon> 
        ^free <jfree>)
   (<i> ^volume <ivol> 
        ^contents <icon> <= <jfree> 
        ^free <ifree>)
   --> 
   (<i> ^contents 0 <icon> - 
        ^free <ivol> <ifree> - )
   (<j> ^contents (+ <jcon> <icon>) <jcon> - 
        ^free (- <jfree> <icon>) <jfree> - )}

 ## Implement pour when contents of source jug i is more
 ## than the capacity available of the destination jug j.

sp {apply*pour*empty-source
   (state <s> ^operator <o>)
   (<o> ^name pour 
        ^jug <i> 
        ^into <j>)
   (<i> ^volume <ivol> 
        ^contents <icon> > <jfree> 
        ^free <ifree>)
   (<j> ^volume <jvol> 
        ^contents <jcon> 
        ^free <jfree>)
   --> 
   (<i> ^contents (- <icon> <jfree>) <icon> - 
        ^free (+ <ifree> <jfree>) <ifree> - )
   (<j> ^contents <jvol> <jcon> - 
        ^free 0 <jfree> - )}

###
### WATERJUG: 
### EVALUATION:
### STATE SUCCESS/GOAL TEST
###

sp {waterjug*evaluate*state*success
   (state <s> ^desired <d>
              ^problem-space.name waterjug
              ^jug <j>)
   (<d> ^jug <dj>)
   (<dj> ^volume <v> ^contents <c>)
   (<j> ^volume <v> ^contents <c>)
   --> 
   (<s> ^success <d>)}

sp {waterjug*evaluate*state*failure*duplicate
   (state <s1> ^desired <d>
               ^jug <j1>
               ^jug <j2>)
   (<j1> ^volume 5 ^contents <c1>)
   (<j2> ^volume 3 ^contents <c2>)
   (state { <> <s1> <s2> } ^jug <i1>
          ^jug <i2>
          ^tried-tied-operator)
   (<i1> ^volume 5 ^contents <c1>)
   (<i2> ^volume 3 ^contents <c2>)
  -(state <s3> ^superstate <s2>)
   --> 
   (<s2> ^failure <d>)}

## The following production Soar to evaluate Pour before Fill or Empty.

sp {waterjug*evaluate-object*pour*better
   (state <s> ^superstate.name waterjug
				  ^operator <o> + )
   (<o> ^name evaluate-operator
        ^operator.name pour)
   -->
   (<s> ^operator <o> > )}

###
### WATERJUG: 
### MONITOR STATE AND
### OPERATORS
###

sp {waterjug*monitor*state 
   (state <s> ^jug <j> <i>)
   (<j> ^volume 5 ^contents <jcon>)
   (<i> ^volume 3 ^contents <icon>)
   --> 
   (write (crlf) | 5:| <jcon> | 3:| <icon> )}

sp {waterjug*monitor*operator-application*empty
   (state <s> ^operator <o>)
   (<o> ^name empty
        ^jug.volume <volume>)
   -->
   (write (crlf) |  EMPTY(| <volume> |)|)}

sp {waterjug*monitor*operator-application*fill
   (state <s> ^operator <o>)
   (<o> ^name fill 
        ^jug.volume <volume>)
   -->
   (write (crlf) |  FILL(| <volume> |)|)}

sp {waterjug*monitor*operator-application*pour
   (state <s> ^operator <o>)
   (<o> ^name pour 
        ^jug <i>
        ^into <j>)
   (<i> ^volume <ivol> ^contents <icon>)
   (<j> ^volume <jvol> ^contents <jcon>)
   -->
   (write (crlf) |  POUR(| <ivol> |:| <icon> |,| <jvol> |:| <jcon> |)|)}

###
### Monitoring of Tied operators
###

sp {waterjug*monitor*tied-operator*empty
   (state <s> ^impasse tie 
              ^attribute operator 
              ^item <item>)
   (<item> ^name empty ^jug.volume <volume>)
   -->
   (write (crlf) |  | <item> |: empty(| <volume> |)|)}

sp {waterjug*monitor*tied-operator*fill
   (state <s> ^impasse tie 
              ^attribute operator 
              ^item <item>)
   (<item> ^name fill ^jug.volume <volume>)
   -->
   (write (crlf) |  | <item> |: fill(| <volume> |)|)}

sp {waterjug*monitor*tied-operator*pour
   (state <s> ^impasse tie 
              ^attribute operator 
              ^item <item>)
   (<item> ^name pour ^jug <i> ^into <j>)
   (<i> ^volume <ivol> ^contents <icon>)
   (<j> ^volume <jvol> ^contents <jcon>)
   -->
   (write (crlf) |  | <item> |: pour(| <ivol> |:| <icon> |,| <jvol> |:| <jcon> |)|)}

### eof of waterjug.soar (Version Type: Soar8)


