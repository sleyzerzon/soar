
echo "\nLoading elaborations/mapping.soar "


### maintaining current square
## Uses i-support to maintain pointer.
sp {all*map*current-square
   (state <s> ^name tanksoar
              ^io.input-link <il>
              ^map.square <cs>
              ^status <st>)
   (<il> ^x <x>
         ^y <y>)
   (<cs> ^x <x>
         ^y <y>)
 #  (<cs> ^visit <v>)
-->
   (<st> ^square <cs>)
   #(write (crlf) | Position: (| <x> |, | <y> |)| )
}



## Creates temporary structure off map using i-support…
sp {map*mark-object
   (state <s> ^name tanksoar
              ^map <m>
              ^io.input-link <io>
              ^status.square <cs>
              ^radar-map.<dir> <dirr>)
   (<io> ^radar.{ <type> << health energy obstacle 
                            open missiles tank >> } <ob>
         ^direction <dir>)                   # <dir> = north
   (<ob> ^distance <d>                       # <d>   = 3
         ^position <pos>)                    # <pos> = left
   (<dirr> ^<pos> <pss>
           ^sx <sx>                          # <sx> =  0
           ^sy <sy>)                         # <sy> = -1
   (<pss> ^x <dx>                            # <dx> = -1
          ^y <dy>)                           # <dy> =  0
   (<cs> ^x <x>
         ^y <y>)
-->
   (<m> ^<type> <obs>)
   (<obs> ^x (+ (+ <x> (* <sx> <d>)) <dx>)
          ^y (+ (+ <y> (* <sy> <d>)) <dy>))}




#Records type of object in square if not there already using o-support.
sp {map*record-object
   (state <s> ^name tanksoar
              ^operator.name
              ^map <m>)
   (<m> ^{<type> << obstacle health energy              
                    open tank missiles >>} <obs>
        ^square <sq>)
   (<sq> ^x <x> ^y <y>)
   (<obs> ^x <x> ^y <y>)
  -(<sq> ^<type> yes)
-->
   (<sq> ^<type> yes)
#  (write (crlf) | Recorded | <type> | at (| <x> |,| <y> |)|   )
}




#
#
### Remove outdated values using o-support
#sp {map*clean*missiles*radar
#:o-support
#   (state <s> ^name tanksoar
##              ^operator.name 
#              ^map <m>)
#   (<m> ^square <sq>
#        ^open <obs>)
#   (<sq> ^x <x> 
#         ^y <y>
#         ^missiles yes)
# -{(<m> ^missiles <mi>)
#   (<mi> ^x <x>
#         ^y <y>)}
#   (<obs> ^x <x>
#          ^y <y>)
#-->
#   (<sq> ^missiles yes -)
#   (<s> ^operator <o> + >,=)                  # this operator will remove current map-flooding
#   (<o> ^name remove-missile-flooding)
#   (write (crlf) |radar does not match map - missiles missing|)
#}

## remove all missile-info structs
sp {map*clean*missiles*remove-flooding
:o-support
   (state <s> ^name tanksoar
              ^map.square <sq>
              -^status.need-missiles)   ## will only remove missile-info data after missile pack has been found
   (<sq> ^missiles-info <mi>)
-->
   (<sq> ^missiles-info <mi> -)
#   (write (crlf) |Removing missile info|)
}

### return to normal decision phase
#sp {map*clean*missiles*finished
#   (state <s> ^name remove-missile-flooding)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name explore)
#}

## Remove outdated values using o-support if standing on square that maps says has missiles
##  -- either my tank picked 'em up, or they were never there
sp {map*clean*missiles*on-square
:o-support
   (state <s> ^name tanksoar
#              ^operator.name 
              ^map <m>
              ^io.input-link <il>)
   (<il> ^x <x>
         ^y <y>)
   (<m> ^square <sq>)
   (<sq> ^x <x> 
         ^y <y>
         ^missiles yes)
-->
   (<sq> ^missiles yes -)
#   (write (crlf) |on top of square that map has marked 'missiles'|)
}


