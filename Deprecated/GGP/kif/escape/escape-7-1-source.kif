;; ======================================================================
;; Escape TL Level 7 (Abstraction) Scenario 1 Source 
;;
;; Explorer has to pick up hammer, nails, and logs to make a bridge across
;; the water obstacles to reach the exit
;;
;; here's the level setup:
;;
;; 0|     E|
;; 1|      |
;; 2|WWWWWW|
;; 3|    N |
;; 4|   L  |
;; 5|e L h |
;;   012345
;; where E = exit, W = water, L = log, N = nails, H = hammer, e = explorer
;; ======================================================================

(role explorer)
(exitType exit)

;; declare items
(itemType log1)
(itemType log2)
(itemType hammer1)
(itemType nails1)


; give the items an arbitrary ordering
; this is necessary so we can constrain it to only one legal combine action
; for a given pair of items
(itemOrder log1 1)
(itemOrder log2 2)
(itemOrder hammer1 3)
(itemOrder nails1 4)

;; declare obstacles
(obstacleType water0 water)
(obstacleType water1 water)
(obstacleType water2 water)
(obstacleType water3 water)
(obstacleType water4 water)
(obstacleType water5 water)

(init (blocked west 0 0))
(init (blocked west 0 1))
(init (blocked west 0 2))
(init (blocked west 0 3))
(init (blocked west 0 4))
(init (blocked west 0 5))

(init (blocked east 5 0))
(init (blocked east 5 1))
(init (blocked east 5 2))
(init (blocked east 5 3))
(init (blocked east 5 4))
(init (blocked east 5 5))

(init (blocked north 0 0))
(init (blocked north 1 0))
(init (blocked north 2 0))
(init (blocked north 3 0))
(init (blocked north 4 0))
(init (blocked north 5 0))

(init (blocked south 0 5))
(init (blocked south 1 5))
(init (blocked south 2 5))
(init (blocked south 3 5))
(init (blocked south 4 5))
(init (blocked south 5 5))

(init (location exit     5 0))

(init (location water0   0 2))
(init (location water1   1 2))
(init (location water2   2 2))
(init (location water3   3 2))
(init (location water4   4 2))
(init (location water5   5 2))

(init (location log1    3 4))
(init (location log2    2 5))
(init (location hammer1 4 5))
(init (location nails1  4 3))

(init (location explorer 0 5))

(init (health explorer 1))

;; PROPERTIES
(init (property hammer1 hammer))
(init (property nails1 doesNail))

(init (property log1 buoyant))
(init (property log1 supportsWeight))
(init (property log1 nailable))

(init (property log2 buoyant))
(init (property log2 supportsWeight))
(init (property log2 nailable))


;; how properties combine
;;
;; Note that to simplify matters no properties are carried on automatically.
;; This way we don't need the not-property negations

(propertyCombine tieable        tieable        tieable)
(propertyCombine nailable       nailable       nailable)
(propertyCombine supportsWeight supportsWeight canBridge)

(propertyCombine supportsWeight buoyant        canFloat)

;; inherited properties
(propertyInherit supportsWeight)

;; a list of which properties can compromise which obstacle classes,
;; and if the item is expended in the process
(canCompromise canFloat water yes)
(canCompromise canBridge water yes)

;; legal combinations
(<= (legal explorer (combine ?item1 ?item2 ?nails))
    (itemOrder ?item1 ?order1)
    (itemOrder ?item2 ?order2)
    (lessThan ?order1 ?order2)
    (true (holding ?item))
    (true (holding ?nails))
    (true (holding ?item1))
    (true (holding ?item2))
    (true (property ?item hammer))
    (true (property ?nails doesNail))
    (true (property ?item1 nailable))
    (true (property ?item2 nailable))
    (distinct ?item1 ?item2))

(<= (legal explorer (combine ?item1 ?item2 ?tie))
    (itemOrder ?item1 ?order1)
    (itemOrder ?item2 ?order2)
    (lessThan ?order1 ?order2)
    (true (holding ?item1))
    (true (holding ?item2))
    (true (holding ?tie))
    (true (property ?tie doesTie))
    (true (property ?item1 tieable))
    (true (property ?item2 tieable))
    (distinct ?item1 ?item2))

;; combining properties
(<= (next (property ?comboName ?cprop))
    (true (property ?item1 ?prop1))
    (true (property ?item2 ?prop2))
    (propertyCombine ?prop1 ?prop2 ?cprop)
    (combining ?item1 ?item2 ?comboName))

;; ordering of item in combination doesn't matter
(<= (next (property ?comboName ?cprop))
    (true (property ?item2 ?prop1))
    (true (property ?item1 ?prop2))
    (propertyCombine ?prop1 ?prop2 ?cprop)
    (combining ?item1 ?item2 ?comboName))

;; inherit properties
(<= (next (property ?comboName ?prop))
    (or (true (property ?item1 ?prop)) (true (property ?item2 ?prop)))
    (propertyInherit ?prop)
    (combining ?item1 ?item2 ?comboName))

;; properties stay forever once they are calculated
(<= (next (property ?item ?prop))
    (true (property ?item ?prop)))

(<= (used ?glue)
    (does explorer (combine ?item1 ?item2 ?glue)))

;; a "linked list" of symbol names

(nextSymbol combo1 combo2)
(nextSymbol combo2 combo3)
(nextSymbol combo3 combo4)
(nextSymbol combo4 combo5)
(nextSymbol combo5 combo6)
(nextSymbol combo6 combo7)
(nextSymbol combo7 combo8)
(nextSymbol combo8 combo9)

(init (currSymbol combo1))
    
;; combining items takes a symbol from the symbol list
(<= (next (currSymbol ?ns))
    (true (currSymbol ?cs))
    (nextSymbol ?cs ?ns)
    (does explorer (combine ?item1 ?item2 ?glue)))

;; frame axiom for maintaining the current symbol
(<= (next (currSymbol ?cs))
    (true (currSymbol ?cs))
    (not anyCombine))

;; the combine action
(<= (combining ?item1 ?item2 ?comboName)
    (does explorer (combine ?item1 ?item2 ?glue))
    (true (currSymbol ?comboName)))

(<= anyCombine
    (combining ?item1 ?item2 ?comboName))

(<= (next (comboType ?comboName ?item1 ?item2))
    (combining ?item1 ?item2 ?comboName))

;; once a combination, always a combination
(<= (next (comboType ?comboName ?item1 ?item2))
    (true (comboType ?comboName ?item1 ?item2)))

;; all combinations are items
(<= (itemType ?comboName)
    (true (comboType ?comboName ?item1 ?item2)))

;; the explorer holds the item after he makes it
(<= (next (holding ?comboName))
    (combining ?item1 ?item2 ?comboName))

;; items get used up once they are combined
(<= (used ?item)
    (combining ?item ?item2 ?comboName))

(<= (used ?item)
    (combining ?item1 ?item ?comboName))


;; player is allowed to apply items only in directions that are not
;; blocked, and only when there's an obstacle there
(<= (legal explorer (apply ?item ?dir))
    (true (holding ?item))
    (direction ?dir)
    (true (location explorer ?x ?y))
    (not (true (blocked ?dir ?x ?y)))
    (nextToExplorer ?dir ?x1 ?y1)
    (obstacleType ?obstacle ?class)
    (true (location ?obstacle ?x1 ?y1)))

;; a more general version for destroying things
(<= (doDestroy ?obstacle ?item ?expend)
    (does explorer (apply ?item ?dir))
    (true (location explorer ?ex ?ey))
    (obstacleType ?obstacle ?class)
    (not (true (destroyed ?obstacle)))
    (true (location ?obstacle ?ox ?oy))
    (nextToExplorer ?dir ?ox ?oy)
    (true (property ?item ?property))
    (canDestroy ?property ?class ?expend))

(<= (next (destroyed ?obstacle))
    (doDestroy ?obstacle ?item ?expend))

(<= (used ?item)
    (doDestroy ?obstacle ?item yes))

;; destroyed obstacles remain destroyed
(<= (next (destroyed ?obstacle))
    (true (destroyed ?obstacle)))

;; we can compromise an obstacle with an item with the correct
;; property
(<= (doCompromise ?obstacle ?item ?expend)
    (does explorer (apply ?item ?dir))
    (obstacleType ?obstacle ?class)
    (not (true (destroyed ?obstacle)))
    (true (location ?obstacle ?ox ?oy))
    (nextToExplorer ?dir ?ox ?oy)
    (true (property ?item ?property))
    (canCompromise ?property ?class ?expend))

(<= (next (compromised ?obstacle))
    (doCompromise ?obstacle ?item ?expend))

(<= (used ?item)
    (doCompromise ?obstacle ?item yes))

;; as long as the explorer doesn't move onto the obstacle while it's
;; compromised, the obstacle remains compromised
(<= (next (compromised ?obstacle))
    (true (compromised ?obstacle))
    (true (location ?obstacle ?ox ?oy))
    (not (true (location explorer ?ox ?oy))))

;; once the explorer moves onto the obstacle, the compromise expires.
;; But the explorer doesn't take damage until he gets off of the obstacle and
;; then gets back on.
(<= (next (compromiseExpired ?obstacle))
    (true (compromised ?obstacle))
    (true (location ?obstacle ?ox ?oy))
    (true (location explorer ?ox ?oy)))

(<= (next (compromiseExpired ?obstacle))
    (true (compromiseExpired ?obstacle))
    (true (location ?obstacle ?ox ?oy))
    (true (location explorer ?ox ?oy)))

;; if a player is in a cell with an undestroyed and uncompromised obstacle, 
;; he loses one health
(<= damaged
    (nextExplorerLocation ?x ?y)
    (obstacleType ?obstacle ?class)
    (not (true (compromised ?obstacle)))
    (not (true (compromiseExpired ?obstacle)))
    (not (true (destroyed ?obstacle)))
    (true (location ?obstacle ?x ?y)))

;; obstacles always stay in the same place
(<= (next (location ?obstacle ?x ?y))
    (obstacleType ?obstacle ?class)
    (true (location ?obstacle ?x ?y)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Spatial axioms

;;; An 8x8 set of 2 dimensional coordinates
(2d 0 0) (2d 1 0) (2d 2 0) (2d 3 0) (2d 4 0) (2d 5 0) (2d 6 0) (2d 7 0)
(2d 0 1) (2d 1 1) (2d 2 1) (2d 3 1) (2d 4 1) (2d 5 1) (2d 6 1) (2d 7 1)
(2d 0 2) (2d 1 2) (2d 2 2) (2d 3 2) (2d 4 2) (2d 5 2) (2d 6 2) (2d 7 2)
(2d 0 3) (2d 1 3) (2d 2 3) (2d 3 3) (2d 4 3) (2d 5 3) (2d 6 3) (2d 7 3)
(2d 0 4) (2d 1 4) (2d 2 4) (2d 3 4) (2d 4 4) (2d 5 4) (2d 6 4) (2d 7 4)
(2d 0 5) (2d 1 5) (2d 2 5) (2d 3 5) (2d 4 5) (2d 5 5) (2d 6 5) (2d 7 5)
(2d 0 6) (2d 1 6) (2d 2 6) (2d 3 6) (2d 4 6) (2d 5 6) (2d 6 6) (2d 7 6)
(2d 0 7) (2d 1 7) (2d 2 7) (2d 3 7) (2d 4 7) (2d 5 7) (2d 6 7) (2d 7 7)

;;; The four cardinal directions
(direction north)
(direction south)
(direction east)
(direction west)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Action-derived axioms

;;; (move ?direction) will move the explorer one cell in that direction
;;;  All other actions will leave the explorer in the same location
(<= (nextExplorerLocation ?x2 ?y2)
    (does explorer (move ?dir))
    (nextToExplorer ?dir ?x2 ?y2))
(<= (nextExplorerLocation ?x ?y)
    (true (location explorer ?x ?y))
    (not (does explorer (move north)))
    (not (does explorer (move south)))
    (not (does explorer (move east)))
    (not (does explorer (move west))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Object-interaction axioms

;;; atExit is true if the explorer is at the same location as the exit
(<= atExit 
    (true (location explorer ?x ?y))
    (true (location exit ?x ?y)))

;;; killed is true if the explorer's health has dropped to zero
(<= killed 
    (true (health explorer 0)))

;;; pickedUp is true of an item if the explorer will be standing on top of it
;;;  at the end of the current time-step
(<= (pickedUp ?item)
    (itemType ?item)
    (nextExplorerLocation ?x ?y)
    (true (location ?item ?x ?y)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; The GDL required LEGAL relation - specifies legal moves for players

;;; It is always legal for the explorer to do nothing
; DEBUG (legal explorer noop)

;;; The explorer may move anywhere on the map along the cardinal 
;;;  directions so long as there are no walls in his way
(<= (legal explorer (move ?dir))
    (direction ?dir)
    (true (location explorer ?xOld ?yOld))
    (not (true (blocked ?dir ?xOld ?yOld)))
    (nextToExplorer ?dir ?xNew ?yNew)
    (2d ?xNew ?yNew))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; The GDL required NEXT relation - specifies the dynamics of fluents

;;; Updates to explorer location are based on the nextExplorerLocation rule
(<= (next (location explorer ?x ?y))
    (nextExplorerLocation ?x ?y))

;;; If the explorer is damaged, his health is decreased by 1.  If the explorer
;;;  uses a medKit, his health is increased by 1. 
(<= (next (health explorer ?hpNew))
    (true (health explorer ?hpOld))
    damaged
    (minus 1 ?hpOld ?hpNew))
(<= (next (health explorer ?hp))
    (true (health explorer ?hp))
    (not damaged))

;;; The exit and walls do not move
(<= (next (location exit ?x ?y))
    (true (location exit ?x ?y)))
(<= (next (blocked ?dir ?x ?y))
    (true (blocked ?dir ?x ?y)))

;;; Items remain on the ground until they are picked up
(<= (next (location ?item ?x ?y))
    (itemType ?item)
    (true (location ?item ?x ?y))
    (not (pickedUp ?item)))

;;; Items remain in the explorer's inventory from when they are picked up
;;;  until they are used to perform an action
(<= (next (holding ?item))
    (itemType ?item)
    (pickedUp ?item))
(<= (next (holding ?item))
    (true (holding ?item))
    (not (used ?item)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; The GDL required TERMINAL relation - specifies the conditions under which
;;;  the game has ended

;;; The game is over if time runs out
(<= terminal
    (true (step ?t))
    (maxTime ?t))

;;; The game is over if the explorer is able to reach the exit
(<= terminal
    atExit)

;;; The game is over if the explorer is killed
(<= terminal
    killed)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; The GDL required GOAL relation - specifies player rewards

;;; The explorer receives 0 points if he is killed
(<= (goal explorer 0)
    killed)

;;; The explorer receives 50 points if time runs out and he has neither been
;;;  killed nor reached the exit
(<= (goal explorer 50)
    (true (step ?t))
    (maxTime ?t)
    (not atExit)
    (not killed))

;;; The explorer receives 100 points if he reaches the exit without being 
;;;  killed
(<= (goal explorer 100)
    atExit
    (not killed))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Basic axioms of mathematics (defined over the range [0,7])

;;; The integers between 0 and 7
(int 0)
(int 1)
(int 2)
(int 3)
(int 4)
(int 5)
(int 6)
(int 7)

;;; The plus relationship defined on the integers between 0 and 7
(plus 0 0 0) (plus 1 0 1) (plus 2 0 2) (plus 3 0 3) (plus 4 0 4) (plus 5 0 5) (plus 6 0 6) (plus 7 0 7) 
(plus 0 1 1) (plus 1 1 2) (plus 2 1 3) (plus 3 1 4) (plus 4 1 5) (plus 5 1 6) (plus 6 1 7)
(plus 0 2 2) (plus 1 2 3) (plus 2 2 4) (plus 3 2 5) (plus 4 2 6) (plus 5 2 7)
(plus 0 3 3) (plus 1 3 4) (plus 2 3 5) (plus 3 3 6) (plus 4 3 7)
(plus 0 4 4) (plus 1 4 5) (plus 2 4 6) (plus 3 4 7)
(plus 0 5 5) (plus 1 5 6) (plus 2 5 7)
(plus 0 6 6) (plus 1 6 7)
(plus 0 7 7) 

;;; The minus relationship defined on the integers between 0 and 7
(minus 0 7 7) (minus 1 7 6) (minus 2 7 5) (minus 3 7 4) (minus 4 7 3) (minus 5 7 2) (minus 6 7 1) (minus 7 7 0) 
(minus 0 6 6) (minus 1 6 5) (minus 2 6 4) (minus 3 6 3) (minus 4 6 2) (minus 5 6 1) (minus 6 6 0)
(minus 0 5 5) (minus 1 5 4) (minus 2 5 3) (minus 3 5 2) (minus 4 5 1) (minus 5 5 0)
(minus 0 4 4) (minus 1 4 3) (minus 2 4 2) (minus 3 4 1) (minus 4 4 0)
(minus 0 3 3) (minus 1 3 2) (minus 2 3 1) (minus 3 3 0)
(minus 0 2 2) (minus 1 2 1) (minus 2 2 0)
(minus 0 1 1) (minus 1 1 0)
(minus 0 0 0) 

;;; The less-than relationship on the integers between 0 and 7
(lessThan 0 7) (lessThan 0 6) (lessThan 0 5) (lessThan 0 4) (lessThan 0 3) (lessThan 0 2) (lessThan 0 1)
(lessThan 1 7) (lessThan 1 6) (lessThan 1 5) (lessThan 1 4) (lessThan 1 3) (lessThan 1 2) 
(lessThan 2 7) (lessThan 2 6) (lessThan 2 5) (lessThan 2 4) (lessThan 2 3) 
(lessThan 3 7) (lessThan 3 6) (lessThan 3 5) (lessThan 3 4) 
(lessThan 4 7) (lessThan 4 6) (lessThan 4 5) 
(lessThan 5 7) (lessThan 5 6) 
(lessThan 6 7) 

;;; The greater-than relationship on the integers between 0 and 7
(greaterThan 7 0) (greaterThan 6 0) (greaterThan 5 0) (greaterThan 4 0) (greaterThan 3 0) (greaterThan 2 0) (greaterThan 1 0)
(greaterThan 7 1) (greaterThan 6 1) (greaterThan 5 1) (greaterThan 4 1) (greaterThan 3 1) (greaterThan 2 1) 
(greaterThan 7 2) (greaterThan 6 2) (greaterThan 5 2) (greaterThan 4 2) (greaterThan 3 2) 
(greaterThan 7 3) (greaterThan 6 3) (greaterThan 5 3) (greaterThan 4 3) 
(greaterThan 7 4) (greaterThan 6 4) (greaterThan 5 4) 
(greaterThan 7 5) (greaterThan 6 5) 
(greaterThan 7 6) 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Step counter axioms

;;; The successor relationship defined on the time-steps between 1 and 50
(succ 1 2)
(succ 2 3)
(succ 3 4)
(succ 4 5)
(succ 5 6)
(succ 6 7)
(succ 7 8)
(succ 8 9)
(succ 9 10)
(succ 10 11)
(succ 11 12)
(succ 12 13)
(succ 13 14)
(succ 14 15)
(succ 15 16)
(succ 16 17)
(succ 17 18)
(succ 18 19)
(succ 19 20)
(succ 20 21)
(succ 21 22)
(succ 22 23)
(succ 23 24)
(succ 24 25)
(succ 25 26)
(succ 26 27)
(succ 27 28)
(succ 28 29)
(succ 29 30)
(succ 30 31)
(succ 31 32)
(succ 32 33)
(succ 33 34)
(succ 34 35)
(succ 35 36)
(succ 36 37)
(succ 37 38)
(succ 38 39)
(succ 39 40)
(succ 40 41)
(succ 41 42)
(succ 42 43)
(succ 43 44)
(succ 44 45)
(succ 45 46)
(succ 46 47)
(succ 47 48)
(succ 48 49)
(succ 49 50)


;;; The maximum defined time-step, t = 50
(maxTime 50)

;;; Time begins at t = 1
(init (step 1))

;;; Time advances in one second increments
(<= (next (step ?next))
	(true (step ?current))
	(succ ?current ?next))

(<= (nextToExplorer north ?x ?y2)
    (int ?x)
    (true (location explorer ?x ?y1))
    (minus 1 ?y1 ?y2))
(<= (nextToExplorer south ?x ?y2)
    (int ?x)
    (true (location explorer ?x ?y1))
    (plus 1 ?y1 ?y2))
(<= (nextToExplorer east ?x2 ?y)
    (int ?y)
    (true (location explorer ?x1 ?y))
    (plus 1 ?x1 ?x2))
(<= (nextToExplorer west ?x2 ?y)
    (int ?y)
    (true (location explorer ?x1 ?y))
    (minus 1 ?x1 ?x2))

