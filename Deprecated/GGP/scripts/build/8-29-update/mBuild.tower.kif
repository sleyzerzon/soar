;;;; -*-Lisp-*-
;;;; **************************************************************************
;;;; * mini-Build Game Instance: Simple Tower                                 *
;;;; * Transfer Learning in Integrated Cognitive Systems Project              *
;;;; *                                                                        *
;;;; * David J. Stracuzzi                                                     *
;;;; * Arizona State University                                               *
;;;; * Completed: August 16, 2007                                             *
;;;; * Revised:   August 17, 2007                                             *
;;;; **************************************************************************
;;;;
;;;; This file contains rules, facts and persistants for a specific game
;;;; instance of BUILD. The file build.core.kif contains the core description
;;;; for the BUILD domain. Appending this file to build.core.kif will produce
;;;; a complete, playable game description.
;;;;
;;;; Goal:
;;;;   Construct a tower by stacking five blocks of uniform size on top of 
;;;;   each other. The objects must be stacked in order: concrete on the 
;;;;   bottom, steel in the middle, wood on top.
;;;;
;;;; Solution Sequence (several are possible):
;;;;   (reinforce c1 rebar)
;;;;   (place-adjacent c1 c2 top)
;;;;   (place-adjacent c2 s1 top)
;;;;   (place-adjacent s1 s2 top)
;;;;   (place-adjacent s2 w1 top)

;;; ---------------------------------------------------------------------------
;;; PARAMETERS: Game-instance-specific relations that define the state.
;;;             These will not change during the game.

(max-movable-weight 100)
(max-time 10)

;;; (material-type ?type)
(material-type ground)
(material-type concrete)
(material-type steel)
(material-type wood)

;;; (reinforcement-type ?reinforcement-material ?reinforcable-material)
(reinforcement-type rebar concrete)

;;; (reinforcement-properties ?reinforcement-material ?strength ?weight)
(reinforcement-properties rebar 2 2)

;;; ---------------------------------------------------------------------------
;;; PERSISTANTS: Relations that define the state. These may be added and
;;;              removed during the game.

(init (time 0))

(init (count rebar 2))

(init (object-type g1 ground))
(init (object-type c1 concrete))
(init (object-type c2 concrete))
(init (object-type s1 steel))
(init (object-type s2 steel))
(init (object-type w1 wood))

(init (object-dimensions g1 10 1))
(init (object-dimensions c1 2 2))
(init (object-dimensions c2 2 2))
(init (object-dimensions s1 2 2))
(init (object-dimensions s2 2 2))
(init (object-dimensions w1 2 2))

(init (object-location g1 0 0))
(init (object-location c1 0 1))
(init (object-location c2 2 1))
(init (object-location s1 4 1))
(init (object-location s2 6 1))
(init (object-location w1 8 1))

(init (object-load g1 68))
(init (object-load c1 0))
(init (object-load c2 0))
(init (object-load s1 0))
(init (object-load s2 0))
(init (object-load w1 0))

(init (object-strength g1 1000))
(init (object-strength c1 30))
(init (object-strength c2 30))
(init (object-strength s1 20))
(init (object-strength s2 20))
(init (object-strength w1 10))

(init (object-weight g1 1000))
(init (object-weight c1 20))
(init (object-weight c2 20))
(init (object-weight s1 12))
(init (object-weight s2 12))
(init (object-weight w1 4))

;;; ---------------------------------------------------------------------------
;;; GOAL STATES
;;; 1) WIN:  Building meets success conditions
;;; 2) LOSE: Building collapsed
;;; 3) DRAW: Maximum time-step reached

(<= (goal agent 100)
    (true (tower ?object ?height))
    (> ?height 9)
    (not structural-failure))

(<= (goal agent 0)
    (collapsed ?object))

(<= (goal agent 50)
    (true (time ?t))
    (max-time ?t))


;;; ---------------------------------------------------------------------------
;;; TERMINAL STATES
;;; 1) Building meets success conditions
;;; 2) Building collapsed
;;; 3) Maximum time-step reached

(<= terminal
    (true (tower ?object ?height))
    (> ?height 9))

(<= terminal
    (collapsed ?object))

(<= terminal
    (true (time ?t))
    (max-time ?t))
