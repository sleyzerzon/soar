#
# Makefile.in for Soar kernel of Soar 7
#
# This makefile template is in two sections.  The first specifies 
# a set of variables whose values are defined by the configure 
# script.  The values found by that script are substituted in the 
# placeholders which are indicated by the @...@ sequences (e.g., 
# @CC@ for the C compiler).  This template file is used to 
# generate "Makefile" after performing the indicated substitutions.
# [If you are trying to compile this on a non-Unix system, then you
# can make the relevant substitutions without using the configure 
# program.]  The configure script is generated by the GNU autoconf 
# utility.
#
# The second part of this makefile defines the rules for building
# the Soar kernel.
#
#-----------------------------------------------------------------
#
# Things you can change to personalize the Makefile for your own
# site (you can make these changes in either Makefile.in or
# Makefile, but changes to Makefile will get lost if you re-run
# the configuration script).
#
#=================================================================
#
# VARIABLES SET BY CONFIGURE
#
# This section of switches is defined by substitution from the
# configure script.  If you are building Soar on a non-Unix
# platform, then substitute the desired switch settings for the
# @...@ placeholders.
#
# The comments for each switch are retained here to clarify their 
# meanings. The example switch settings are for a sun4 w/ gcc 
# compiler.

# Set this to your favorite C Compiler that understands ANSI.
#
# CC = gcc

CC = @CC@

# Set these to be whatever flags you want to pass to your compiler.
# If the flags define ANSI C behavior, be sure to set them.
CFLAGS = @CFLAGS@ -g @TCL_SHLIB_CFLAGS@ @ANSI_FLAGS@

# Select desired debugging and option flags.  These include:
#
# -DUSE_TCL             -- build Tcl/Tk version.
# -DUNIX                -- compiling on UNIX system.
# -DUSE_X_DISPLAY       -- use X interface to multiple agents.  Use
#                          only if -DMULTI_AGENT_ENABLED selected
#                          and -DUSE_TCL NOT selected.
#
# If you don't select USE_X_DISPLAY then standard I/O will be used.
# in the soar6 binary.
#
# DFLAGS = -DUSE_TCL -DUNIX

DFLAGS = -DUNIX -DUSE_TCL @DEFS@
#DFLAGS = -DUNIX -DUSE_TCL @DEFS@

# Library entry randomizer.  Not needed if using certain new 
# versions of ar.
#
# RANLIB = ranlib 

RANLIB = @RANLIB@

#=================================================================
#
# OTHER VARIABLES
#
# SGI's make, among others, use the SHELL variable to decide
# what shell to use when executing commands in a Makefile.  The
# commands below assume the Bourne shell, sh.

SHELL = /bin/sh

# set this to the AR flags as appropriate for your system

AR       = ar
ARFLAGS  = r


# This contains the list of all object files in the soar library



#=================================================================
#
# LIBRARIES
#

OBJS =	agent.o\
	backtrace.o\
	callback.o\
	chunk.o\
	consistency.o\
	decide.o\
	explain.o\
	init_soar.o\
	interface.o\
	io.o\
	lexer.o\
	ma_interface.o\
	mem.o\
	osupport.o\
	parser.o\
	prefmem.o\
	print.o\
	production.o\
	recmem.o\
	reorder.o\
	rete.o\
	rhsfun.o\
	rhsfun_math.o\
	scheduler.o\
	symtab.o\
	tempmem.o\
	tilde.o\
	trace.o\
	wmem.o

#=================================================================
#
# PRIMARY TARGETS:
#
# Pick the latter option if you wish to link with soar code via a library.

#all: soar
all:  lib

lib: libsoarkernel.a 

# The IBM RS/6000 C compiler doesn't handle the -o switch properly:
# it ignores the path and uses only the filename component.  Hence,
# to make compiles portable across a wider set of platforms, we
# compile in the current directory and move the resulting object
# or executable file to its intended destination.


libsoarkernel.a: ${OBJS}
	${AR} ${ARFLAGS} libsoarkernel.a ${OBJS}
	${RANLIB} libsoarkernel.a



#=================================================================
#
# C FILES
#
# How we compile a file:

### HAVE TO CHANGE THIS BECAUSE IT DEPENDS ON GNU MAKE..COMPILE.c
### doesn't work for other makes RMJ
#COMPILE.c = ${CC} ${CFLAGS} ${DFLAGS} ${IFLAGS} -c
COMPILE.c = ${CC} ${CFLAGS} ${DFLAGS} -c

# The dependencies of objects on sources/headers:
# (The targets were explicitly listed because make was broken
# under CMU's Mach OS.  However, since users should be using
# GNU gmake under Mach, perhaps this can be shorted using
# file extension rules now?  We need to check if other makes
# are broken in this way before converting to the more
# consise method.)

agent.o:	agent.c scheduler.h soarkernel.h
backtrace.o:	backtrace.c explain.h soarkernel.h
callback.o:	callback.c callback.h soarkernel.h
chunk.o:	chunk.c explain.h soarkernel.h
consistency.o:  consistency.c soarkernel.h
decide.o:	decide.c soarkernel.h
explain.o:	explain.c explain.h soarkernel.h
init_soar.o:	init_soar.c  soarkernel.h
interface.o:	interface.c scheduler.h soarkernel.h
io.o:		io.c soarkernel.h
lexer.o:	lexer.c soarkernel.h
main.o:		main.c soarkernel.h
ma_interface.o:	ma_interface.c scheduler.h soarkernel.h
mem.o:		mem.c soarkernel.h
osupport.o:	osupport.c soarkernel.h
parser.o:	parser.c soarkernel.h
prefmem.o:	prefmem.c soarkernel.h
print.o:	print.c soarkernel.h
production.o:	production.c soarkernel.h
recmem.o:	recmem.c soarkernel.h
reorder.o:	reorder.c soarkernel.h
rete.o:		rete.c soarkernel.h
rhsfun.o:	rhsfun.c rhsfun_math.h soarkernel.h
rhsfun_math.o:	rhsfun_math.c  soarkernel.h
scheduler.o:	scheduler.c soarkernel.h
symtab.o:	symtab.c soarkernel.h
tempmem.o:	tempmem.c soarkernel.h
tilde.o:	tilde.c soarkernel.h
trace.o:	trace.c soarkernel.h
wmem.o:		wmem.c soarkernel.h


#=================================================================
#
# CLEANUP
#


clean:
	rm -rf *.o *.a core *~

distclean: clean
	rm -rf Makefile config.cache config.log config.status

