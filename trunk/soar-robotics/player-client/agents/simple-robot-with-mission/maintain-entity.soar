# to test:
# see entity, entity goes away, entity comes back, ...
# get message about entity, get another message about entity, ...
# get message about entity, then see entity, ...
# see entity, entity goes away, get message about entity
# multiple entities?

#
# if we've never seen the entity before, then make an "entry" for it in the entities structure
#

#input version

sp {simple-robot*propose*maintain-entity*create-entry-from-input
   (state <s> ^name simple-robot
              ^io.input-link.entities.entity <e>
              ^entities <es>)
   (<e> ^id <id>)
  -(<es> ^entity.id <id>) 
-->
   (<s> ^operator <op> +)
   (<op> ^name maintain-entity
         ^create-entry true
         ^id <id>)
}

# message version

sp {simple-robot*propose*maintain-entity*create-entry-from-message
   (state <s> ^name simple-robot
              ^io.input-link.self.received-messages.message <m>
              ^entities <es>)
   (<m> -^status processed
         ^first <w1>)
   (<w1> ^word entity-report
         ^next <w2>)
   (<w2> ^word position-update
         ^next <w3>)
   (<w3> ^word <id>)
  -(<es> ^entity.id <id>) 
-->
   (<s> ^operator <op> +)
   (<op> ^name maintain-entity
         ^create-entry true
         ^id <id>)
}

sp {apply*maintain-entity*create-entry
   (state <s> ^operator <op>
              ^entities <es>)
   (<op> ^name maintain-entity
         ^create-entry true
         ^id <id>)
-->
   (<es> ^entity <e>)
   (<e> ^id <id>
        ^last-update-message-time -1000) #force message to be sent immediately (if agent decides to send at all)
   (write (crlf) |Creating new entry for entity | <id>)
}

#
# if we have a visible entity it has an entry, just link to the input-link version
#
sp {simple-robot*elaborate*visible-entity
   (state <s> ^name simple-robot
              ^entities.entity <es>
              ^io.input-link.entities.entity <e>)
   (<e> ^visible true
        ^id <id>)
   (<es> ^id <id>)
-->
   (<es> ^data <e>)
}

#
# if we have a non-visible entity (but still on the input-link) then make a persisent copy
#

# input version

sp {simple-robot*propose*maintain-entity*make-persistent-copy-from-input
   (state <s> ^name simple-robot
              ^io.input-link <il>
              ^entities.entity <es>)
   (<il> ^entities.entity <e>
         ^time.seconds <time>)
   (<e> ^visible false
        ^id <id>)
   (<es> ^id <id>
        -^data)
-->
   (<s> ^operator <op> +)
   (<op> ^name maintain-entity
         ^input-entity <e>
         ^state-entity <es>
         ^last-contact-time <time>)
}

# message version

sp {simple-robot*elaborate*message-with-entity-structure
   (state <s> ^name simple-robot
              ^io.input-link.self.received-messages.message <m>)
   (<m> -^status processed
         ^first <w1>)
   (<w1> ^word entity-report
         ^next <w2>)
   (<w2> ^word position-update
         ^next <w3>)
   (<w3> ^word <id>
         ^next <w4>)
   (<w4> ^word <x>
         ^next <w5>)
   (<w5> ^word <y>
         ^next <w6>)
   (<w6> ^word <friendly>
         ^next <nil>)
-->
   (<m> ^entity <e>)
   (<e> ^id <id>
        ^friendly <friendly>
        ^current-absolute-location <cal>)
   (<cal> ^x <x>
          ^y <y>)
}

sp {simple-robot*propose*maintain-entity*make-persistent-copy-from-message
   (state <s> ^name simple-robot
              ^io.input-link <il>
              ^entities.entity <es>)
   (<il> ^self.received-messages.message <m>
         ^time.seconds <time>
         ^entities.entity <e>)
   (<m> -^status processed
         ^entity <e>)
   (<e> ^visible false
        ^id <id>)
   (<es> ^id <id>)
-->
   (<s> ^operator <op> +)
   (<op> ^name maintain-entity
         ^input-entity <e>
         ^state-entity <es>
         ^last-contact-time <time>)
}

sp {apply*maintain-entity*make-persistent-copy
   (state <s> ^operator <op>)
   (<op> ^name maintain-entity
         ^input-entity <e>
         ^state-entity <es>
         ^last-contact-time <time>)
   (<e> ^id <id>
        ^current-absolute-location <cal>
        ^friendly <friendly>)
   (<cal> ^x <x> ^y <y>)
-->
   (<es> ^data <d>
         ^last-contact-time <time>
         ^persistent-copy <d>)
   (<d> ^visible false
        ^id <id>
        ^current-absolute-location <calc>
        ^friendly <friendly>)
   (<calc> ^x <x> ^y <y>)
   (write (crlf) |Made persistent copy of entity | <id>)
}

sp {apply*maintain-entity*remove-old-persistent-copy
   (state <s> ^operator <op>)
   (<op> ^name maintain-entity
         ^state-entity <es>
         ^last-contact-time <time>)
   (<es> ^last-contact-time < <time>
         ^data <d>)
-->
   (<es> ^data <d> -)
   (write (crlf) |Removed old persistent copy of entity | <id>)
}

#
# if we have an entry and it's visible and we have a persistent copy, remove the persistent copy
#

sp {simple-robot*propose*maintain-entity*remove-persistent-copy
   (state <s> ^name simple-robot
              ^io.input-link <il>
              ^entities.entity <es>)
   (<il> ^entities.entity <e>)
   (<e> ^visible true
        ^id <id>)
   (<es> ^id <id>
         ^persistent-copy <d>)
-->
   (<s> ^operator <op> +)
   (<op> ^name maintain-entity
         ^state-entity <es>
         ^remove-persistent-copy true)
}

sp {apply*maintain-entity*remove-persistent-copy
   (state <s> ^operator <op>)
   (<op> ^name maintain-entity
         ^state-entity <e>)
   (<e> ^persistent-copy <d>
        ^data <d>
        ^last-contact-time <time>
        ^id <id>)
-->
   (<e> ^data <d> -
        ^persistent-copy <d> -
        ^last-contact-time <time> -
        ^last-update-message-time -1000) #force message to be sent immediately (if agent decides to send at all)
   (write (crlf) |Removed persisent copy of entity | <id>)
}

sp {simple-robot*compare*maintain-entity
   (state <s> ^name simple-robot
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name maintain-entity)
   (<op2> ^name << execute-mission process-message >>)
-->
   (<s> ^operator <op1> > <op2>)
}

# when to send the next message
sp {simple-robot*elaborate*entity-next-message-time
   (state <s> ^name simple-robot
              ^entities.entity <e>
              ^message-update-time <mut>)
   (<e> ^last-update-message-time <t>)
-->
   (<e> ^next-update-message-time (+ <t> <mut>))
}