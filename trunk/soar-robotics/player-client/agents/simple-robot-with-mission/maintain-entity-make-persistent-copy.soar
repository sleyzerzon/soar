#
# if we have a non-visible entity (but still on the input-link) then make a persisent copy
#

sp {simple-robot*propose*maintain-entity-make-persistent-copy
   (state <s> ^name simple-robot
              ^io.input-link <il>
              ^entities.entity <es>)
   (<il> ^entities.entity <e>
         ^time.seconds <time>)
   (<e> ^visible false
        ^id <id>)
   (<es> ^id <id>
        -^data)
-->
   (<s> ^operator <op> +)
   (<op> ^name maintain-entity-make-persistent-copy
         ^input-entity <e>
         ^state-entity <es>
         ^last-contact-time <time>)
}

# make a copy if there isn't a current one already
sp {apply*maintain-entity-make-persistent-copy
   (state <s> ^operator <op>)
   (<op> ^name maintain-entity-make-persistent-copy
         ^input-entity <e>
         ^state-entity <es>
         ^last-contact-time <time>)
   (<e> ^id <id>
        ^absolute-location <al>
        ^friendly <friendly>)
   (<al> ^x <x> ^y <y>)
  -(<es> ^last-contact-time >= <time>)
-->
   (<es> ^data <d>
         ^last-contact-time <time>
         ^persistent-copy <d>)
   (<d> ^visible false
        ^id <id>
        ^absolute-location <alc>
        ^friendly <friendly>)
   (<alc> ^x <x> ^y <y>)
   (write (crlf) |Made persistent copy of entity | <id>)
}

# remove any old data (fires in parallel with above)
sp {apply*maintain-entity-make-persistent-copy*remove-old-persistent-copy
   (state <s> ^operator <op>)
   (<op> ^name maintain-entity-make-persistent-copy
         ^state-entity <es>
         ^last-contact-time <time>)
   (<es> ^last-contact-time < <time>
         ^id <id>
         ^data <d>)
-->
   (<es> ^data <d> -)
   (write (crlf) |Removed old persistent copy of entity | <id>)
}