# If you see one of your own groups, and you haven't memorized it, then
# remember it.
#
# Other players' group ids change whenever they disappear and then
# reappear, so if we wanted to memorize those, we'd have to do some
# kind of probabilistic reasoning involving space, possible change, and
# likeness (which is too hard)
#
# At this point there's no way to do the opposite operation, ie forget a
# group that was killed

sp {propose*remember-my-group
   (state <s> ^name sorts
              ^io.input-link <in>
              ^me <me>)
   (<in> ^groups.me.group <see-group>
         ^view-frame <f>)
   (<see-group> ^id <gid>)
   (<me> -^group.id <gid>)
-->
   (<s> ^operator <o> +)
   (<o> ^name remember-my-group
        ^group <see-group>
        ^view-frame <f>)}

sp {apply*remember-my-group
   (state <s> ^name sorts
              ^operator <o>
              ^me <me>)
   (<o> ^name remember-my-group
        ^group <see-group>
        ^view-frame <f>)
   (<see-group> ^id <gid>
                ^x <x>
                ^y <y>
                ^type <t>
                ^num-members <n>)
-->
   (<me> ^group <new-group>)
   (<new-group> ^id <gid>
                ^last-x <x>
                ^last-y <y>
                ^type <t>
                ^num-members <n>)}


# These rules update what you remember about your own groups with what
# you are currently seeing. This only applies to your own groups because
# those are the only ones you can equate identities for over time.

sp {propose*refresh-my-group-memory
   (state <s> ^name sorts
              ^io.input-link <in>
              ^me.group <mem-group>)
   (<in> ^groups.me.group <see-group>
         ^view-frame <f>)
   (<see-group> ^id <gid>)
   (<mem-group> ^id <gid>
                ^last-frame < <f>)
-->
   (<s> ^operator <o> +)
   (<o> ^name refresh-my-group-memory
        ^group <see-group>
        ^view-frame <f>)}

sp {apply*refresh-my-group-memory
   (state <s> ^name sorts
              ^operator <o>
              ^me <me>)
   (<o> ^name refresh-my-group-memory
        ^group <see-group>
        ^view-frame <f>)
   (<me> ^group <mem-group>)
   (<see-group> ^id <gid>
                ^x <x>
                ^y <y>
                ^type <t>
                ^num-members <n>)
   (<mem-group> ^id <gid>)
-->
   (<me> ^group <mem-group> -)
   (<me> ^group <new-mem-group>)
   (<new-mem-group> ^last-x <x>
                    ^last-y <y>
                    ^type <t>
                    ^num-members <n>
                    ^last-frame <f>)}


# However, you CAN memorize certain groups owned by the world that
# are immobile, such as trees and minerals (although minerals will
# eventually disappear if they get mined out)
#
# We might not want to remember everything, but for now just do it

sp {propose*remember-immobile-world-group
   (state <s> ^name sorts
              ^io.input-link <in>
              ^world <world>)
   (<in> ^groups.world.group <see-group>
         ^view-frame <f>)
   (<see-group> ^id <gid>
                ^mobile 0)
   (<world> -^group.id <gid>)
-->
   (<s> ^operator <o> +)
   (<o> ^name remember-immobile-world-group
        ^group <see-group>
        ^view-frame <f>)}

sp {apply*remember-immobile-world-group
   (state <s> ^name sorts
              ^operator <o>
              ^world <world>)
   (<o> ^name remember-immobile-world-group
        ^group <see-group>
        ^view-frame <f>)
   (<see-group> ^id <gid>
                ^x <x>
                ^y <y>
                ^type <t>
                ^num-members <n>)
-->
   (<world> ^group <new-group>)
   (<new-group> ^id <gid>
                ^last-x <x>
                ^last-y <y>
                ^type <t>
                ^num-members <n>)}

sp {propose*refresh-immobile-world-group-memory
   (state <s> ^name sorts
              ^io.input-link <in>
              ^world.group <mem-group>)
   (<in> ^groups.world.group <see-group>
         ^view-frame <f>)
   (<see-group> ^id <gid>
                ^x <x>
                ^y <y>
                ^type <t>
                ^mobile 0)
   (<mem-group> ^last-x <x>
                ^last-y <y>
                ^type <t>
                ^last-frame < <f>)
-->
   (<s> ^operator <o> +)
   (<o> ^name refresh-immobile-world-group-memory
        ^group <see-group>
        ^view-frame <f>)}

sp {apply*refresh-immobile-world-group-memory
   (state <s> ^name sorts
              ^operator <o>
              ^world <world>)
   (<o> ^name refresh-immobile-world-group-memory
        ^group <see-group>
        ^view-frame <f>)
   (<world> ^group <mem-group>)
   (<see-group> ^id <gid>
                ^x <x>
                ^y <y>
                ^type <t>
                ^num-members <n>)
   (<mem-group> ^last-x <x>
                ^last-y <y>
                ^type <t>)
-->
   (<world> ^group <mem-group> -)
   (<world> ^group <new-mem-group>)
   (<new-mem-group> ^last-x <x>
                    ^last-y <y>
                    ^type <t>
                    ^num-members <n>
                    ^last-frame <f>)}

