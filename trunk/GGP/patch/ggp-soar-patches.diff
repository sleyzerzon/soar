Index: Core/SoarKernel/include/agent.h
===================================================================
--- Core/SoarKernel/include/agent.h	(revision 7506)
+++ Core/SoarKernel/include/agent.h	(working copy)
@@ -30,7 +30,9 @@
 #include "lexer.h"
 #include "chunk.h"
 #include "callback.h"
-
+// YJ 2007-08-06
+// For parsing strcutre into unique string, used for TL project
+#include <map>
 /* JC ADDED: Included to allow gski callbacks */
 #include "gski_event_system_data.h"
 
@@ -122,6 +124,9 @@
 typedef char * test;
 
 typedef struct agent_struct {
+	// YJ 2007-08-06
+		// For parsing strcutre into unique string, used for TL project
+	std::map<std::string, int>* gs_to_int;
   /* After v8.6.1, all conditional compilations were removed
    * from struct definitions, including the agent struct below
    */
@@ -260,6 +265,8 @@
   Symbol            * type_symbol;
   Symbol            * wait_symbol;   /* REW:  10.24.97 */
 
+  Symbol            * item_count_symbol; // SBW 5/07
+
   /* RPM 9/06 begin */
   Symbol			* input_link_symbol;
   Symbol			* output_link_symbol;
Index: Core/SoarKernel/include/decide.h
===================================================================
--- Core/SoarKernel/include/decide.h	(revision 7506)
+++ Core/SoarKernel/include/decide.h	(working copy)
@@ -103,6 +103,9 @@
 /* These prototypes moved here from chunk.cpp -ajc (5/3/02) */
 extern byte type_of_existing_impasse (agent* thisAgent, Symbol *goal);
 
+// SBW 5/07 added prototype
+unsigned int count_candidates(preference * candidates);
+
 #ifdef __cplusplus
 }
 #endif
Index: Core/SoarKernel/include/xmlTraceNames.h
===================================================================
--- Core/SoarKernel/include/xmlTraceNames.h	(revision 7506)
+++ Core/SoarKernel/include/xmlTraceNames.h	(working copy)
@@ -158,6 +158,8 @@
 	static char const* const kBacktracedAlready         = "already-backtraced";
 	static char const* const kBacktraceSymbol1          = "symbol1";
 	static char const* const kBacktraceSymbol2          = "symbol2";
+	
+  static char const* const kTagLocalNegation          = "local-negation" ; // SBW 5/07
 
 	// numeric indifference stuff
 	static char const* const kTagCandidate      = "candidate";
Index: Core/SoarKernel/src/chunk.cpp
===================================================================
--- Core/SoarKernel/src/chunk.cpp	(revision 7506)
+++ Core/SoarKernel/src/chunk.cpp	(working copy)
@@ -472,6 +472,17 @@
       prev_cc = cc;
     } else {
       /* --- not in TC, so discard the condition --- */
+
+      // this chunk will be overgeneral! don't create it
+      
+      // SBW 5/07
+      // report what local negations are preventing the chunk,
+      // and set flags like we saw a ^quiescence t so it won't be created
+      //report_local_negation (thisAgent, cc->cond); // in backtrace.cpp turned
+      //off to save log i/o FIXME
+      thisAgent->quiescence_t_flag = TRUE;
+      thisAgent->variablize_this_chunk = FALSE;
+
       free_with_pool (&thisAgent->chunk_cond_pool, cc);
     }
   }
Index: Core/SoarKernel/src/backtrace.h
===================================================================
--- Core/SoarKernel/src/backtrace.h	(revision 7506)
+++ Core/SoarKernel/src/backtrace.h	(working copy)
@@ -53,6 +53,8 @@
                                              condition *trace_cond,
                                              int indent);
 
+void report_local_negation (agent* thisAgent, condition* c);
+
 #ifdef __cplusplus
 }
 #endif
Index: Core/SoarKernel/src/agent.cpp
===================================================================
--- Core/SoarKernel/src/agent.cpp	(revision 7506)
+++ Core/SoarKernel/src/agent.cpp	(working copy)
@@ -20,6 +20,7 @@
  */
 
 #include <stdlib.h>
+#include <string> // SBW 8/10/07: needed for YJ's TL string parser
 
 #include "agent.h"
 #include "kernel.h"
@@ -258,7 +259,10 @@
   newAgent->lexeme.float_val = 0.0;
   newAgent->lexeme.id_letter = 'A';
   newAgent->lexeme.id_number = 0;
-
+ 
+  // YJ 2007-08-06
+// For parsing strcutre into unique string, used for TL project
+  newAgent->gs_to_int = new std::map<std::string,int>;
   /* Initializing all the timer structures */
   reset_timer(&(newAgent->start_total_tv));
   reset_timer(&(newAgent->total_cpu_time));
@@ -375,6 +379,10 @@
   }
 
   /* Free structures stored in agent structure */
+  // YJ 2007-08-06
+// For parsing strcutre into unique string, used for TL project
+  free(delete_agent->gs_to_int);
+  //
   free(delete_agent->name);
   free(delete_agent->top_dir_stack->directory);
   free(delete_agent->top_dir_stack);
Index: Core/SoarKernel/src/symtab.cpp
===================================================================
--- Core/SoarKernel/src/symtab.cpp	(revision 7506)
+++ Core/SoarKernel/src/symtab.cpp	(working copy)
@@ -573,6 +573,10 @@
   thisAgent->constraint_failure_symbol = make_sym_constant (thisAgent, "constraint-failure");
   thisAgent->no_change_symbol = make_sym_constant (thisAgent, "no-change");
   thisAgent->multiple_symbol = make_sym_constant (thisAgent, "multiple");
+  
+  // SBW 5/07
+  thisAgent->item_count_symbol = make_sym_constant (thisAgent, "item-count");
+
   thisAgent->conflict_symbol = make_sym_constant (thisAgent, "conflict");
   thisAgent->tie_symbol = make_sym_constant (thisAgent, "tie");
   thisAgent->item_symbol = make_sym_constant (thisAgent, "item");
@@ -640,6 +644,9 @@
   release_helper(thisAgent,&(thisAgent->s_context_variable));
   release_helper(thisAgent,&(thisAgent->o_context_variable));
 
+  // SBW 5/07
+  release_helper(thisAgent,&(thisAgent->item_count_symbol));
+
   /* REW: begin 10.24.97 */
   release_helper(thisAgent,&(thisAgent->wait_symbol));
   /* REW: end   10.24.97 */
Index: Core/SoarKernel/src/decide.cpp
===================================================================
--- Core/SoarKernel/src/decide.cpp	(revision 7506)
+++ Core/SoarKernel/src/decide.cpp	(working copy)
@@ -1858,6 +1858,7 @@
   wme *w, *next_w;
   preference *cand;
   preference *bt_pref;
+  unsigned int item_count = count_candidates(items); // SBW 5/07
 
   /* --- reset flags on existing items to "NOTHING" --- */
   for (w=id->id.impasse_wmes; w!=NIL; w=w->next)
@@ -1884,6 +1885,15 @@
         remove_wme_from_wm (thisAgent, w);
       }
     }
+
+    // SBW 5/07
+    // remove item-count WME if it exists
+    else if (w->attr==thisAgent->item_count_symbol) {
+      remove_from_dll (id->id.impasse_wmes, w, next, prev);
+      symbol_remove_ref (thisAgent, w->value); // remove the reference to the integer constant
+      remove_wme_from_wm (thisAgent, w);
+    }
+
     w = next_w;
   }
 
@@ -1901,6 +1911,17 @@
       add_impasse_wme (thisAgent, id, thisAgent->item_symbol, cand->value, bt_pref);
     }
   }
+
+  // SBW 5/07
+  // update the item-count WME
+  // detect relevant impasses by having more than one item
+  if (item_count > 0) {
+    add_impasse_wme (thisAgent, id, thisAgent->item_count_symbol, 
+                     make_int_constant(thisAgent, item_count), NIL);
+  }
+  // TODO does the int constant get its reference removed when the impasse goes
+  // away?
+
 }
 
 /* ------------------------------------------------------------------
Index: Core/SoarKernel/src/backtrace.cpp
===================================================================
--- Core/SoarKernel/src/backtrace.cpp	(revision 7506)
+++ Core/SoarKernel/src/backtrace.cpp	(working copy)
@@ -689,3 +689,21 @@
 
   return TRUE;
 }
+
+// sbw 5/4/07
+// fuction to report negated conditions that are overgeneral
+// this is here (as opposed to chunk.cpp) since this file has all the right
+// includes for correct output
+
+void report_local_negation (agent* thisAgent, condition* c) {
+    // use the same code as the backtracing above
+    list* negated_to_print = NIL;
+	  push (thisAgent, c, negated_to_print);
+    
+    print_string (thisAgent, "\nLocal negation found:\n");
+    gSKI_MakeAgentCallbackXML(thisAgent, kFunctionBeginTag, kTagLocalNegation);
+    print_consed_list_of_conditions (thisAgent, negated_to_print, 2);
+    gSKI_MakeAgentCallbackXML(thisAgent, kFunctionEndTag, kTagLocalNegation);
+  
+    free_list (thisAgent, negated_to_print);
+}
Index: Core/CLI/include/cli_CommandLineInterface.h
===================================================================
--- Core/CLI/include/cli_CommandLineInterface.h	(revision 7506)
+++ Core/CLI/include/cli_CommandLineInterface.h	(working copy)
@@ -704,6 +704,9 @@
 	* @param pAgent The pointer to the gSKI agent interface
 	*************************************************************/
 	bool DoWatchWMEs(gSKI::Agent* pAgent, const eWatchWMEsMode mode, WatchWMEsTypeBitset type, const std::string* pIdString = 0, const std::string* pAttributeString = 0, const std::string* pValueString = 0);
+	// YJ 2007-08-06
+	// For parsing strcutre into unique string, used for TL project
+	bool ParseStructToString(gSKI::Agent* pAgent, std::vector<std::string>& argv);
 
 	// Print callback events go here
 	virtual void HandleEvent(egSKIPrintEventId, gSKI::Agent*, const char* msg);
Index: Core/CLI/include/cli_Commands.h
===================================================================
--- Core/CLI/include/cli_Commands.h	(revision 7506)
+++ Core/CLI/include/cli_Commands.h	(working copy)
@@ -76,6 +76,9 @@
 		static char const* kCLIWarnings;
 		static char const* kCLIWatch;
 		static char const* kCLIWatchWMEs;
+		// YJ 2007-08-06
+		// For parsing strcutre into unique string, used for TL project
+		static char const* kCLIStructToString; //YJ
 	}; // struct
 } // namespace cli
 
Index: Core/CLI/src/cli_CommandLineInterface.cpp
===================================================================
--- Core/CLI/src/cli_CommandLineInterface.cpp	(revision 7506)
+++ Core/CLI/src/cli_CommandLineInterface.cpp	(working copy)
@@ -102,6 +102,9 @@
 	m_CommandMap[Commands::kCLIWarnings]					= &cli::CommandLineInterface::ParseWarnings;
 	m_CommandMap[Commands::kCLIWatch]						= &cli::CommandLineInterface::ParseWatch;
 	m_CommandMap[Commands::kCLIWatchWMEs]					= &cli::CommandLineInterface::ParseWatchWMEs;
+	// YJ 2007-08-06
+	// For parsing strcutre into unique string, used for TL project
+	m_CommandMap[Commands::kCLIStructToString]			= &cli::CommandLineInterface::ParseStructToString; // YJ
 
 	// Indicate which commands should be echoed so that all users can see them when doing a shared debugging session
 	m_EchoMap[Commands::kCLIAddWME]						= true ;
Index: Core/CLI/src/cli_stopsoar.cpp
===================================================================
--- Core/CLI/src/cli_stopsoar.cpp	(revision 7506)
+++ Core/CLI/src/cli_stopsoar.cpp	(working copy)
@@ -82,3 +82,75 @@
 	}
 }
 
+// YJ 2007-08-06
+// For parsing strcutre into unique string, used for TL project
+// This function is just randomly attached to this file
+#include <string>
+#include "gSKI_DoNotTouch.h"
+using namespace sml;
+using namespace std;
+using namespace gSKI;
+bool StringToInt(std::string str, int& n){
+	std::istringstream str2int(str);
+	if (str2int >> n) {
+		return true;
+	}
+	else{
+		return false;
+	}
+}
+
+bool CommandLineInterface::ParseStructToString(gSKI::Agent* pAgent, std::vector<std::string>& argv) {
+
+  if(argv.size() < 2){
+    m_Result << "No input identifier";
+  }
+  string struct_id = argv.at(1);
+  string additional_feature = "";
+  string excluded_feature = "";
+  string equivalent_symbols_id = "";
+
+  int current_index = 2;
+  while(argv.size() > current_index + 1){
+    string option = argv[current_index];
+    string value = argv[current_index+1];
+
+    if(option == "-e"){
+      excluded_feature = value;
+    }
+    else if(option == "-a"){
+      additional_feature = value;
+    }
+    else if(option == "-i"){
+      equivalent_symbols_id = value;
+    }
+    current_index += 2;
+  }
+
+
+  // Attain the evil back door of doom, even though we aren't the TgD
+  gSKI::EvilBackDoor::TgDWorkArounds* pKernelHack = m_pKernel->getWorkaroundObject();
+  for(std::vector<string>::iterator itr = argv.begin(); itr != argv.end(); ++itr){
+    //cout << *itr << endl;
+  }
+  if(struct_id.length() >= 3 && struct_id[0] =='|' && struct_id[struct_id.length() - 1] == '|'){
+    struct_id = struct_id.substr(1, struct_id.length() - 2);
+  }
+  if(equivalent_symbols_id.length() >= 3 && equivalent_symbols_id[0] =='|' && equivalent_symbols_id[equivalent_symbols_id.length() - 1] == '|'){
+    equivalent_symbols_id = equivalent_symbols_id.substr(1, equivalent_symbols_id.length() - 2);
+  }
+  int input_int;
+
+  if(StringToInt(struct_id, input_int)){
+//    string gs_str = pKernelHack->IdToStruct(pAgent, input_int);
+    //m_Result << struct_id << endl;
+  //  m_Result << gs_str;
+  }
+  else{
+    string hash_str = pKernelHack->StructToString(pAgent, struct_id, additional_feature, excluded_feature, equivalent_symbols_id);
+    m_Result << hash_str;
+  }
+
+  return true;
+}
+
Index: Core/CLI/src/cli_Commands.cpp
===================================================================
--- Core/CLI/src/cli_Commands.cpp	(revision 7506)
+++ Core/CLI/src/cli_Commands.cpp	(working copy)
@@ -77,3 +77,6 @@
 char const* Commands::kCLIWarnings					= "warnings";
 char const* Commands::kCLIWatch						= "watch";
 char const* Commands::kCLIWatchWMEs					= "watch-wmes";
+// YJ 2007-08-06
+// For parsing strcutre into unique string, used for TL project
+char const* Commands::kCLIStructToString			= "struct-to-string"; // YJ
\ No newline at end of file
Index: Core/ClientSML/include/sml_ClientTraceXML.h
===================================================================
--- Core/ClientSML/include/sml_ClientTraceXML.h	(revision 7506)
+++ Core/ClientSML/include/sml_ClientTraceXML.h	(working copy)
@@ -124,6 +124,8 @@
 	bool IsTagAddToPotentials() const ;
 	bool IsTagProhibitPreference() const ;
 	bool IsTagBacktraceResult() const ;
+	
+  bool IsTagLocalNegation() const	; // SBW 5/07
 
 	char const* GetBacktraceAlreadyBacktraced() const ;
 	char const* GetBacktraceSymbol1() const	;
Index: Core/ClientSML/src/sml_ClientTraceXML.cpp
===================================================================
--- Core/ClientSML/src/sml_ClientTraceXML.cpp	(revision 7506)
+++ Core/ClientSML/src/sml_ClientTraceXML.cpp	(working copy)
@@ -216,6 +216,8 @@
 bool ClientTraceXML::IsTagProhibitPreference() const	{ return IsTag(sml_Names::kTagProhibitPreference) ; }
 bool ClientTraceXML::IsTagBacktraceResult() const		{ return IsTag(sml_Names::kTagBacktraceResult) ; }
 
+bool ClientTraceXML::IsTagLocalNegation() const				{ return IsTag(sml_Names::kTagLocalNegation) ; }
+
 char const* ClientTraceXML::GetBacktraceAlreadyBacktraced() const { return GetAttribute(sml_Names::kBacktracedAlready) ; }
 char const* ClientTraceXML::GetBacktraceSymbol1() const			  { return GetAttribute(sml_Names::kBacktraceSymbol1) ; }
 char const* ClientTraceXML::GetBacktraceSymbol2() const			  { return GetAttribute(sml_Names::kBacktraceSymbol2) ; }
Index: Core/ConnectionSML/include/sml_Names.h
===================================================================
--- Core/ConnectionSML/include/sml_Names.h	(revision 7506)
+++ Core/ConnectionSML/include/sml_Names.h	(working copy)
@@ -201,6 +201,8 @@
     static char const* const kBacktracedAlready;
     static char const* const kBacktraceSymbol1;
     static char const* const kBacktraceSymbol2;
+    
+    static char const* const kTagLocalNegation; // SBW 5/07
 
     // numeric indifference stuff
     static char const* const kTagCandidate;
Index: Core/ConnectionSML/src/sml_Names.cpp
===================================================================
--- Core/ConnectionSML/src/sml_Names.cpp	(revision 7506)
+++ Core/ConnectionSML/src/sml_Names.cpp	(working copy)
@@ -201,6 +201,8 @@
 char const* const sml_Names::kBacktraceSymbol1          = "symbol1";
 char const* const sml_Names::kBacktraceSymbol2          = "symbol2";
 
+char const* const sml_Names::kTagLocalNegation          = "local-negation"; // SBW 5/07
+
 // numeric indifference stuff
 char const* const sml_Names::kTagCandidate      = "candidate";
 char const* const sml_Names::kCandidateName     = "name";
Index: Core/gSKI/src/gSKI_DoNotTouch.cpp
===================================================================
--- Core/gSKI/src/gSKI_DoNotTouch.cpp	(revision 7506)
+++ Core/gSKI/src/gSKI_DoNotTouch.cpp	(working copy)
@@ -30,6 +30,9 @@
 #include "soar_rand.h"
 #include "xmlTraceNames.h" // for constants for XML function types, tags and attributes
 #include "gski_event_system_functions.h" // support for triggering XML events
+// YJ 2007-08-06
+// For parsing strcutre into unique string, used for TL project
+#include <set>
 
 extern Bool print_sym (agent* thisAgent, void *item, FILE* f);
 
@@ -2652,5 +2655,230 @@
 			}
 			SoarSeedRNG();
 		}
+		// YJ 2007-08-06
+		// For parsing strcutre into unique string, used for TL project
+		// copy symbol into string
+		std::string symbol_constant_to_string(agent* thisAgent, Symbol* s){
+
+			char sym_char[1000];
+			symbol_to_string (thisAgent, s, TRUE, sym_char, 1000);
+			return std::string(sym_char);
+		}
+		
+		#include <sstream>
+		int StringToInt(std::string str){
+			int n = 0;
+			std::istringstream str2int(str);
+			if (str2int.good()) {
+				str2int >> n;
+			}
+			return n;
+		}
+
+		std::string IntToString(int n){
+			std::stringstream ss;
+			std::string str;
+			ss << n;
+			ss >> str;
+
+			return str;
+		}
+		// YJ 2007-08-06
+		// For parsing strcutre into unique string, used for TL project
+std::string TgDWorkArounds::StructToString(Agent* pIAgent, std::string id, std::string additional_feature, std::string excluded_feature, std::string equivalent_symbols_id){
+
+      std::string returned_str = "";
+
+      Agent* pAgent2 = (Agent*)(pIAgent);
+
+      agent* thisAgent = pAgent2->GetSoarAgent();
+
+      std::map<std::string, std::string> equivalent_symbol_map;
+
+      if(equivalent_symbols_id != ""){
+
+        Symbol* equivalent_symbols_identifier = find_identifier(thisAgent, equivalent_symbols_id.at(0), StringToInt(equivalent_symbols_id.substr(1)) );
+
+        if(equivalent_symbols_identifier != NIL){
+
+
+
+          for (slot* s = equivalent_symbols_identifier->id.slots; s != NIL; s = s->next){
+
+            std::string attr = symbol_constant_to_string(thisAgent, s->attr);
+
+            std::vector<std::string> equivalent_symbols;
+
+            for (wme* w= s->wmes; w != NIL; w = w->next){
+
+              std::string val = symbol_constant_to_string(thisAgent, w->value);
+
+              equivalent_symbols.push_back(val);
+
+            }
+
+            
+
+            if(equivalent_symbols.size() >= 2){
+
+              sort(equivalent_symbols.begin(), equivalent_symbols.end());
+
+              std::string mapped_val =  equivalent_symbols.at(0);
+
+              for(int i=1; i<equivalent_symbols.size(); ++i){
+
+                std::string val =  equivalent_symbols.at(i);
+
+                equivalent_symbol_map.insert(std::pair<std::string, std::string>(attr+" "+val, mapped_val));
+
+              }
+
+            }
+
+          }
+
+        }
+
+      }
+
+
+
+      Symbol* identifier = find_identifier(thisAgent, id.at(0), StringToInt(id.substr(1)) );
+
+      if (identifier == NIL){
+
+        return returned_str;
+
+      }
+
+      std::vector<std::string> gs_features_array = std::vector<std::string>();
+
+      std::set<std::string> unique_gs_features = std::set<std::string>();
+
+
+
+      for (slot* s = identifier->id.slots; s != NIL; s = s->next){
+
+        std::string attr = symbol_constant_to_string(thisAgent, s->attr);
+
+        if(attr == excluded_feature || attr == "action-counter" || attr == "action-sequence"){
+
+            continue;
+
+        }
+
+        for (wme* w= s->wmes; w != NIL; w = w->next){
+
+          std::string attr = symbol_constant_to_string(thisAgent, w->attr);
+
+          std::string val = symbol_constant_to_string(thisAgent, w->value);
+
+          
+
+          // GS features must has two levels, the first level value is of identifier type
+
+          if(w->value->common.symbol_type == IDENTIFIER_SYMBOL_TYPE){
+
+            std::string gs_feature = attr + " ";
+
+            
+
+            for(slot* feature_slot = w->value->id.slots; feature_slot != NIL; feature_slot = feature_slot->next){
+
+              for (wme* feature_w= feature_slot->wmes; feature_w != NIL; feature_w = feature_w->next){
+
+                std::string feature_attr = symbol_constant_to_string(thisAgent, feature_w->attr);
+
+                std::string feature_val = symbol_constant_to_string(thisAgent, feature_w->value);
+
+                // GS features must has two levels, the second level value is of constant types
+
+                if(feature_w->value->common.symbol_type == SYM_CONSTANT_SYMBOL_TYPE ||
+
+                  feature_w->value->common.symbol_type == INT_CONSTANT_SYMBOL_TYPE ||
+
+                  feature_w->value->common.symbol_type == FLOAT_CONSTANT_SYMBOL_TYPE){
+
+                    std::map<std::string, std::string>::iterator itr = equivalent_symbol_map.find(feature_attr+" "+feature_val);
+
+                    if(itr != equivalent_symbol_map.end()){ // map the feature value to the same equivalent value
+
+                      feature_val = itr->second;
+
+                    }
+
+                    gs_feature = gs_feature + "^" + feature_attr + " " + feature_val+" ";
+
+                }
+
+              }
+
+            }
+
+            
+
+            if(unique_gs_features.find(gs_feature) == unique_gs_features.end()){ // avoid duplicated features
+
+              unique_gs_features.insert(gs_feature);
+
+              gs_features_array.push_back(gs_feature);
+
+            }
+
+          }
+
+          
+
+        }
+
+      }
+
+
+
+      sort(gs_features_array.begin(), gs_features_array.end()); // get canonical ordering for all unique features
+
+      
+
+      std::string gs_str = additional_feature;
+
+      for(int i=0; i<gs_features_array.size(); ++i){
+
+        gs_str += "(" + gs_features_array[i] + ")";
+
+      }
+
+
+
+      unsigned gs_hash_value;
+
+      std::map<std::string, int>::iterator itr = thisAgent->gs_to_int->find(gs_str);
+
+      if(itr != thisAgent->gs_to_int->end()){
+
+        gs_hash_value = itr->second;
+
+      }
+
+      else{
+
+        //thisAgent->int_to_gs->push_back(gs_str);
+
+        //gs_hash_value = thisAgent->int_to_gs->size() - 1;
+
+        //thisAgent->gs_to_int->insert(std::pair<std::string, int>(gs_str, gs_hash_value));
+
+        
+
+      }
+
+
+
+      returned_str = IntToString(gs_hash_value);
+
+
+
+      return returned_str;
+
+    }
 	}// class
 }// namespace
Index: Core/gSKI/src/gSKI_DoNotTouch.h
===================================================================
--- Core/gSKI/src/gSKI_DoNotTouch.h	(revision 7506)
+++ Core/gSKI/src/gSKI_DoNotTouch.h	(working copy)
@@ -118,6 +118,10 @@
 		 void SetChunkCount(Agent* pIAgent, unsigned long count);
 
 		 void SeedRandomNumberGenerator(unsigned long int* pSeed);
+		 // YJ 2007-08-06
+		 // For parsing strcutre into unique string, used for TL project
+     std::string StructToString(Agent* pIAgent, std::string id, std::string additional_feature = "",  std::string excluded_feature = "", std::string identical_symbols_id = "");
+
 	  };
    }
 }
Index: Tools/SoarJavaDebugger/src/helpers/XmlOutput.java
===================================================================
--- Tools/SoarJavaDebugger/src/helpers/XmlOutput.java	(revision 7506)
+++ Tools/SoarJavaDebugger/src/helpers/XmlOutput.java	(working copy)
@@ -435,6 +435,16 @@
 		return text.toString() ;
 	}
 	
+  // SBW 5/07
+	public static String getLocalNegationText(Agent agent, ClientTraceXML xml, String parentTagName) {
+		StringBuffer text = new StringBuffer() ;
+	  text.append("*** Chunk won't be formed due to local negation in backtrace ***") ;
+    String output = getConditionsText(agent, xml) ;
+	  text.append(output) ;
+	  text.append(kLineSeparator) ;
+		return text.toString() ;
+  }
+	
 	public static String getActionText(Agent agent, ClientTraceXML action)
 	{
 		StringBuffer text = new StringBuffer() ;
Index: Tools/SoarJavaDebugger/src/doc/Document.java
===================================================================
--- Tools/SoarJavaDebugger/src/doc/Document.java	(revision 7506)
+++ Tools/SoarJavaDebugger/src/doc/Document.java	(working copy)
@@ -144,7 +144,7 @@
 		Module phase 	 = new Module("Phase Diagram", "A view that shows Soar's phases of execution", modules.PhaseView.class) ;
 		Module edit 	 = new Module("Edit Production Window", "A window used to edit a production and then load it into Soar", modules.EditorView.class) ;
 		Module fold 	 = new Module("Tree Trace Window", "Output from commands and trace output from runs is shown in a tree window.", FoldingTextView.class) ;
-
+    Module canvas = new Module("Canvas Window", "Canvas Window", CanvasView.class);
 		m_ModuleList.add(fold) ;
 		m_ModuleList.add(textTrace) ;
 		m_ModuleList.add(update) ;
@@ -152,6 +152,7 @@
 		m_ModuleList.add(button) ;
 		m_ModuleList.add(phase) ;
 		m_ModuleList.add(edit) ;
+    m_ModuleList.add(canvas);
 	}
 	
 	/** Gives us a frame to work with */
Index: Tools/SoarJavaDebugger/src/modules/FoldingTextView.java
===================================================================
--- Tools/SoarJavaDebugger/src/modules/FoldingTextView.java	(revision 7506)
+++ Tools/SoarJavaDebugger/src/modules/FoldingTextView.java	(working copy)
@@ -863,6 +863,14 @@
 				if (output.length() != 0)
 					this.appendSubText(output, TraceType.kFullLearning) ;
 			}
+      // SBW 5/07
+			else if (xmlTrace.IsTagLocalNegation())
+			{
+				String output = XmlOutput.getLocalNegationText(agent, xmlTrace, xmlTrace.GetTagName()) ;
+				
+				if (output.length() != 0)
+					this.appendSubText(output, TraceType.kFullLearning) ;
+			}
 			else if (xmlTrace.IsTagMessage() || xmlTrace.IsTagWarning() || xmlTrace.IsTagError() || xmlTrace.IsTagVerbose())
 			{
 				StringBuffer text = new StringBuffer() ;
Index: SoarSCons.py
===================================================================
--- SoarSCons.py	(revision 7506)
+++ SoarSCons.py	(working copy)
@@ -67,11 +67,11 @@
 		
 	try:
 		if sys.platform == 'darwin':
-			urllib.urlretrieve('http://winter.eecs.umich.edu/jars/osx/swt.jar', 'SoarLibrary/bin/swt.jar')
+			urllib.urlretrieve('http://ai.eecs.umich.edu/~soar/sitemaker/misc/jars/osx/swt.jar', 'SoarLibrary/bin/swt.jar')
 		elif sys.platform == 'cygwin':
-			urllib.urlretrieve('http://winter.eecs.umich.edu/jars/windows/swt.jar', 'SoarLibrary/bin/swt.jar')
+			urllib.urlretrieve('http://ai.eecs.umich.edu/~soar/sitemaker/misc/jars/windows/swt.jar', 'SoarLibrary/bin/swt.jar')
 		else:
-			urllib.urlretrieve('http://winter.eecs.umich.edu/jars/gtk/swt.jar', 'SoarLibrary/bin/swt.jar')
+			urllib.urlretrieve('http://ai.eecs.umich.edu/~soar/sitemaker/misc/jars/gtk/swt.jar', 'SoarLibrary/bin/swt.jar')
 	except IOError:
 		print "Error downloading swt.jar to SoarLibrary/bin: IOError"
 		return False
Index: SConstruct
===================================================================
--- SConstruct	(revision 7506)
+++ SConstruct	(working copy)
@@ -33,7 +33,7 @@
 
 opts = Options()
 opts.AddOptions(
-	BoolOption('java', 'Build the Soar Java interface (required for debugger)', 'yes'), 
+	BoolOption('java', 'Build the Soar Java interface (required for debugger)', 'no'), 
 	BoolOption('swt', 'Build Java SWT projects (required for debugger)', 'yes'), 
 	BoolOption('python', 'Build the Soar Python interface', pythonDefault), 
 	BoolOption('csharp', 'Build the Soar CSharp interface', 'no'), 
@@ -87,7 +87,7 @@
 	# This checks for the swt.jar and attempts to download it if it doesn't exist
 	if env['swt'] and not SoarSCons.CheckForSWTJar(conf.env):
 		print "Could not find swt.jar. You can obtain the jar here:"
-		print "\thttp://winter.eecs.umich.edu/jars"
+		print "\thttp://ai.eecs.umich.edu/~soar/sitemaker/misc/jars"
 		print "Place swt.jar in SoarLibrary/bin"
 		print "You may disable swt, see help (scons -h)"
 		print "swt.jar required... Exiting"
