## Soar productions to output game status in escape

sp {monitor*holding
  (state <s> ^gs <gs>)
  (<gs> ^holding.p1 <item>)
  -->
  (write (crlf) |Explorer is holding | <item>)
}

sp {monitor*carrying
  (state <s> ^gs <gs>)
  (<gs> ^carrying.p1 <item>)
  -->
  (write (crlf) |Explorer is carrying | <item>)
}


sp {monitor*destroyed
  (state <s> ^gs <gs>)
  (<gs> ^destroyed.p1 <obs>
        ^location <loc>)
  (<loc> ^p1 <obs>
         ^p2 <x>
         ^p3 <y>)
  -->
  (write (crlf) |Obstacle | <obs> | at | <x> |,| <y> | is destroyed.|)
}

sp {monitor*health
  (state <s> ^gs.health <h>
             ^gs.role <role>)
  (<h> ^p1 <role> ^p2 <val>) 
-->
  (write (crlf) |Explorer has health of | <val>)
}

sp {print*actions*1
   (state <s> ^name <gname>
              ^desired <d>
              ^{ <fail> << partial-failure failure prohibit-failure >>} <d>
              ^gs.action-sequence <as>)
   (<as> ^action <action> ^count <c>)# the last action on state <s-old>
   (<action> ^name <action-name> ^params.p1 <action-param1>)
-->
   (write (crlf) |FAILED | <fail> | involving action  # | <c> | | <action-name> | P1 | <action-param1>)
}
sp {print*actions*no-att
   (state <s> ^name <gname>
              ^desired <d>
              ^{ <fail> << partial-failure failure prohibit-failure >>} <d>
              ^gs.action-sequence <as>)
   (<as> ^action <action> ^count <c>)# the last action on state <s-old>
   (<action> ^name <action-name> << noop sleep wait >>)
-->
   (write (crlf) |FAILED | <fail> | involving action  # | <c> | | <action-name>)
}
