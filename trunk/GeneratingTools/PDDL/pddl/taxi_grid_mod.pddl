(define (domain taxi_grid_mod)
  (:requirements :strips :typing :conditional-effects)

  (:types  taxi location person fuel position)


  (:predicates
    (tlocation ?taxi1 - taxi ?x ?y - position)
    (plocation ?person1 - person ?x ?y - position)
    (insidetaxi ?person1 - person ?taxi1 - taxi)
    (outsidetaxi ?person1 - person ?taxi1 - taxi)
    (eastwall ?x ?y - position)
    (northwall ?x ?y - position)
    (usefuel ?fuel1 - fuel ?fuel2 - fuel)
    (fillupfuel ?fuel1 ?fuel - fuel)
    (tfuel ?taxi1 - taxi ?fuel1 - fuel)
    (inc ?a ?b - position)
    (dest ?p1 - person ?x ?y - position)
    ;(edge ?p - position)
  )

  (:action 
   getout
   :parameters (?omf - taxi ?person - person)
   :precondition (and (insidetaxi ?person ?omf)
		      (exists (?x ?y - position)
			      (and (plocation ?person ?x ?y)
				   (dest ?person ?x ?y))))
   :effect (and (not (insidetaxi ?person ?omf))
		(outsidetaxi ?person ?omf))
   )

  (:action
   getin
   :parameters (?omf - taxi ?person - person)
   :precondition (and (outsidetaxi ?person ?omf)
		      (exists (?x ?y - position)
			      (and (plocation ?person ?x ?y)
				   (tlocation ?omf ?x ?y))))
   :effect (and (not (outsidetaxi ?person ?omf))
		(insidetaxi ?person ?omf))
   )
  
  (:action 
   north
    :parameters (?omf - taxi)
    :precondition (and (exists (?x ?y ?yn - position)
			       (and (tlocation ?omf ?x ?y)
				    (inc ?yn ?y)))
		       (exists (?currfuel ?nextfuel - fuel)
			       (and (tfuel ?omf ?currfuel)
				    (usefuel ?currfuel ?nextfuel)))
		       )
    :effect (and
	     (forall (?x ?y ?yn - position)
		     (when (and (tlocation ?omf ?x ?y)
				(inc ?yn ?y)
				(not (northwall ?x ?y)))
		       (and (not (tlocation ?omf ?x ?y))
			    (tlocation ?omf ?x ?yn)
			    (forall (?person - person)
				    (when (insidetaxi ?person ?omf)
				      (and (not (plocation ?person ?x ?y))
					   (plocation ?person ?x ?yn)))
				    )
			    )
		       )
		     )
	     (forall (?oldfuel ?newfuel - fuel)
		     (when (and (tfuel ?omf ?oldfuel)
				(usefuel ?oldfuel ?newfuel))
		       (and (not (tfuel ?omf ?oldfuel))
			    (tfuel ?omf ?newfuel))
		       )
		     )
	     )
    )


  (:action 
    south
    :parameters (?omf - taxi)
    :precondition (and (exists (?x ?y ?yn - position)
			       (and (tlocation ?omf ?x ?y)
				    (inc ?y ?yn)))
		       (exists (?currfuel ?nextfuel - fuel)
			       (and (tfuel ?omf ?currfuel)
				    (usefuel ?currfuel ?nextfuel)))
		       )
    :effect (and
	     (forall (?x ?y ?yn - position)
		     (when (and (tlocation ?omf ?x ?y)
				(inc ?y ?yn)
				(not (northwall ?x ?yn)))
		       (and (not (tlocation ?omf ?x ?y))
			    (tlocation ?omf ?x ?yn)
			    (forall (?person - person)
				    (when (insidetaxi ?person ?omf)
				      (and (not (plocation ?person ?x ?y))
					   (plocation ?person ?x ?yn)))
				    )
			    )
		       )
		     )
	     (forall (?oldfuel ?newfuel - fuel)
		     (when (and (tfuel ?omf ?oldfuel)
				(usefuel ?oldfuel ?newfuel))
		       (and (not (tfuel ?omf ?oldfuel))
			    (tfuel ?omf ?newfuel))
		       )
		     )
	     )
    )

  (:action 
    east
    :parameters (?omf - taxi)
    :precondition (and (exists (?x ?y ?xn - position)
			       (and (tlocation ?omf ?x ?y)
				    (inc ?x ?xn)))
		       (exists (?currfuel ?nextfuel - fuel)
			       (and (tfuel ?omf ?currfuel)
				    (usefuel ?currfuel ?nextfuel)))
		       )
    :effect (and
	     (forall (?x ?y ?xn - position)
		     (when (and (tlocation ?omf ?x ?y)
				(inc ?x ?xn)
				(not (eastwall ?x ?y)))
		       (and (not (tlocation ?omf ?x ?y))
			    (tlocation ?omf ?xn ?y)
			    (forall (?person - person)
				    (when (insidetaxi ?person ?omf)
				      (and (not (plocation ?person ?x ?y))
					   (plocation ?person ?xn ?y)))
				    )
			    )
		       )
		     )
	     (forall (?oldfuel ?newfuel - fuel)
		     (when (and (tfuel ?omf ?oldfuel)
				(usefuel ?oldfuel ?newfuel))
		       (and (not (tfuel ?omf ?oldfuel))
			    (tfuel ?omf ?newfuel))
		       )
		     )
	     )
    )

  (:action 
    west
    :parameters (?omf - taxi)
    :precondition (and (exists (?x ?y ?xn - position)
			       (and (tlocation ?omf ?x ?y)
				    (inc ?xn ?x)))
		       (exists (?currfuel ?nextfuel - fuel)
			       (and (tfuel ?omf ?currfuel)
				    (usefuel ?currfuel ?nextfuel)))
		       )
    :effect (and
	     (forall (?x ?y ?xn - position)
		     (when (and (tlocation ?omf ?x ?y)
				(inc ?xn ?x)
				(not (eastwall ?xn ?y)))
		       (and (not (tlocation ?omf ?x ?y))
			    (tlocation ?omf ?xn ?y)
			    (forall (?person - person)
				    (when (insidetaxi ?person ?omf)
				      (and (not (plocation ?person ?x ?y))
					   (plocation ?person ?xn ?y)))
				    )
			    )
		       )
		     )
	     (forall (?oldfuel ?newfuel - fuel)
		     (when (and (tfuel ?omf ?oldfuel)
				(usefuel ?oldfuel ?newfuel))
		       (and (not (tfuel ?omf ?oldfuel))
			    (tfuel ?omf ?newfuel))
		       )
		     )
	     )
    )

  (:action fillfuel
       :parameters ( ?omf - taxi ?fuela ?fuelb - fuel)
       :precondition (and (tfuel ?omf ?fuela)
			  (fillupfuel ?fuela ?fuelb))
       :effect (and (not (tfuel ?omf ?fuela))
		    (tfuel ?omf ?fuelb))
       )
  
  )