#       Autoconf configuration file for soar kernel

AC_INIT(soarkernel.h)

#--------------------------------------------------------------------
#	Set up the compiler & other programs
#--------------------------------------------------------------------

#  The autoconf documentation leads me to believe this has to be here
#  (rather than in Makefile.in), or AC_PROG_CC will change it.
CFLAGS="-O -w"

AC_PROG_CC
AC_PROG_RANLIB

#--------------------------------------------------------------------
#	Checks for header files.
#--------------------------------------------------------------------

AC_PATH_X
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/time.h unistd.h limits.h)


#--------------------------------------------------------------------
#	Checks for typedefs, structures, and compiler characteristics.
#--------------------------------------------------------------------

AC_C_CONST
AC_TYPE_SIZE_T
AC_HEADER_TIME
AC_STRUCT_TM


#--------------------------------------------------------------------
#	Disable the creation of position-independent code if
#	instructed to do so.
#--------------------------------------------------------------------

AC_ARG_ENABLE(pic, [  --disable-pic           disable generation of position-independent code],
	[soar_ok=$enableval], [soar_ok=yes])

if test "$soar_ok" = "yes"; then
    AC_MSG_CHECKING("for tcl lib")

    AC_ARG_WITH(tcl-lib-dir, [  --with-tcl-lib-dir=DIR  location of tclConfig.sh and libtcl],
                TCL_LIB_DIR=$withval, TCL_LIB_DIR="NONE")

    if test "$TCL_LIB_DIR" = "NONE"; then
        dirs="../../../lib $exec_prefix/lib $prefix/lib /usr/lib /usr/local/lib /usr/tcl/lib"
        for i in $dirs ; do
            if test -r $i/tclConfig.sh; then
                AC_MSG_RESULT($i)
                TCL_LIB_DIR=$i
                break
            fi
        done
    fi

    if test "$TCL_LIB_DIR" = "NONE"; then
    AC_MSG_ERROR(Cannot find directory containing tclConfig.sh.  It should be in the same directory as libtcl)
    fi

    file=${TCL_LIB_DIR}/tclConfig.sh
    . $file

    #--------------------------------------------------------------------
    #       Of course, if we're using GCC, all the above goes out the
    #       window.
    #--------------------------------------------------------------------

    if test "$ac_cv_prog_gcc" = yes; then
            TCL_SHLIB_CFLAGS="-fPIC"
    fi

else
	TCL_SHLIB_CFLAGS=""
fi


#--------------------------------------------------------------------
#	Figure out how to make the compiler compile ANSI code.
#--------------------------------------------------------------------


# The setting of ANSI_FLAGS is the only real kludge here.  Rumor has
# it that the GNU m4 macros has a ANSI test macro.  Until we find a
# cleaner way of determining how to turn on ANSI compilation, we'll
# try this hack.

### RMJ: Will this work without first doing AC_CANONICAL_HOST?

ANSI_FLAGS=""

if test "$ac_cv_prog_gcc" = yes; then
	ANSI_FLAGS="-ansi -fpcc-struct-return"
else
	# No gcc.  Test vendor and select native cc ANSI compilation option.
	if test "$host_vendor" = hp; then
		ANSI_FLAGS="-Aa -D_INCLUDE_POSIX_SOURCE"
	fi
fi


#--------------------------------------------------------------------
#	Checks for library functions.
#--------------------------------------------------------------------

AC_TYPE_SIGNAL
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(gethostname gettimeofday getwd strtol)


#--------------------------------------------------------------------
#	Create the Makefile
#--------------------------------------------------------------------

AC_SUBST(ANSI_FLAGS)
AC_SUBST(TCL_SHLIB_CFLAGS)

AC_OUTPUT(Makefile)
