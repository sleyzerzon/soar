#multi-attributes for build, the numbers are relative, seems not interfere with the above

#not really multi-attributes, p1 is the unique object id, should be tested first always
multi-attributes p1 1
multi-attributes p7 1
multi-attributes p8 1
multi-attributes p9 1
multi-attributes p2 2
multi-attributes p3 2
multi-attributes p4 2
multi-attributes p5 2
multi-attributes p6 2



multi-attributes support-for-place 200 #this is more constraining in that particular rule
multi-attributes tower 60 #cannot believe tower can ause so big trouble
multi-attributes left-of-object 60#
multi-attributes adjacent-to-object-count 50
multi-attributes delta-load-recursive 50
multi-attributes coordinates-after-place 200
multi-attributes adjacent 250
multi-attributes adjacent-to-region 250
multi-attributes adjacent-to-object 250
multi-attributes adjacent-to-other-object 250
multi-attributes leftmost-adjacent-to-object 250

multi-attributes clear 250
multi-attributes movable 300 #movable doesn't help much

# gs features are unconstrained
multi-attributes object-location 350
multi-attributes object-size 350
multi-attributes object-type 350
multi-attributes object-weight 350
multi-attributes object-dimensions 350
multi-attributes object-coordinates 350 #this should always go before any maths

#less constraining than gs features
multi-attributes redundant-support-for-place 400

# math should go last
multi-attributes result-link 1000