;;;; -*-Lisp-*-
;;;; **************************************************************************
;;;; * Build Game: Core Rules                                                 *
;;;; * Transfer Learning in Integrated Cognitive Systems Project              *
;;;; *                                                                        *
;;;; * David J. Stracuzzi                                                     *
;;;; * Arizona State University                                               *
;;;; * Completed: June 20, 2007                                               *
;;;; * Revised:   July 20, 2007                                               *
;;;; **************************************************************************
;;;;
;;;; This file contains the core game description for BUILD.  Rules, facts and 
;;;; persistants for specific game instances appear in other files. Appending
;;;; the file for a game instance to this file will produce a complete, 
;;;; playable game description.
;;;;
;;;; Basic Assumptions and Rules:
;;;; 1)  Environment is two dimensional, with origin in lower left corner.
;;;;
;;;; 2)  All primitive objects are rectangular or square. 
;;;;
;;;; 3)  The weight and strength (ability to support weight) of a primitive
;;;;     depends on its size and material. To assure consistancy, the initial
;;;;     weight of primitives should be set by selecting a "weight factor" for
;;;;     for each material, and then multiplying that factor by the area of
;;;;     the primitive.  Likewise, the strength of a primitive is determined
;;;;     by multiplying the specified "strength factor" by the width of the
;;;;     primitive.
;;;;
;;;; 4)  Braces and reinforcements increase object weight additively, and
;;;;     increase object strength multiplicitively. An object may be braced
;;;;     multiple times, but reinforced only once. There is only one type of
;;;;     brace available for any given material, but there may be multiple
;;;;     types of reinforcement available.
;;;;
;;;; 5)  Braces and reinforcements are not manipulable objects. The agent
;;;;     has a fixed number of each available at the start of the game.
;;;;
;;;; 6)  Any primitive object bearing weight > strength causes collapse.
;;;;
;;;; 7)  The weight of a primitive, P1, and the objects supported by P1 is 
;;;;     distributed evenly among the primitives that support P1.
;;;;
;;;; 8)  Compound objects are formed from sets of connected objects.
;;;;
;;;; 9)  Compounds form strict heirarchies. Only objects (primitive or 
;;;;     compound) that are not already a members of another compound may
;;;;     be added to, or used to start, a compound.
;;;;
;;;; 10) Compounds are permanent (cannot be broken).
;;;;
;;;; 11) Any primitive object (including members of compounds) not directly 
;;;;     supported by another object will cause collapse.
;;;;
;;;; Actions:
;;;; * (add-to-compound ?compound ?object)
;;;;     Effects: 
;;;;     * A new object ?compound is created if none already exists
;;;;     * ?object becomes a member of ?compound
;;;;     * The object-location and object-size of ?compound may change 
;;;;     Requirements:
;;;;     * ?compound already exists or is the current identifier
;;;;     * ?compound is not a member of ?object's compound hierarchy
;;;;     * ?object is not a member of any other compound
;;;;     * Some member of ?object (or ?object itself if primitive) is
;;;;       touching some member of ?compound, or ?compound is the current
;;;;       identifier
;;;;
;;;; * (brace ?object1 ?object2 ?brace-type)
;;;;     Effects: 
;;;;     * The joint between ?object1 and ?object2 is braced by ?brace-type
;;;;     * The object-size (weight) of ?object1 and ?object2 each increase
;;;;       by 1/2 the weight of ?brace-type
;;;;     * The weight of any compound above ?object1 and ?object2 in the 
;;;;       hierarchy increases by the weight of ?brace-type
;;;;     * The number of ?brace-type available is decreased by one
;;;;     * The strength of ?object1 and ?object2 are multiplied by the 
;;;;       strength of ?brace-type
;;;;     Requirements:
;;;;     * ?object1 and ?object are members of the same compound
;;;;     * ?object1 and ?object2 are primitives of the same material
;;;;     * ?brace-type is an appropriate material for bracing ?object1
;;;;       and ?object2
;;;;     * ?brace-type has count greater than 0
;;;;     * ?object1 and ?object2 form a joint (L-shaped or T-shaped)
;;;;     * ?object1 and ?object2 have not already been braced
;;;;
;;;; * (nudge ?object ?side)
;;;;     Effects:
;;;;     * ?object moves one unit toward ?side
;;;;     Requirements
;;;;     * ?object must weigh less than "max-movable-weight"
;;;;     * Nothing is stacked on top of ?object
;;;;     * ?object is not a member of any compound
;;;;     * ?object does not intersect any other primitive object once moved
;;;;     * ?side must be "left" or "right"
;;;;
;;;; * (place-adjacent ?object1 ?object2 ?side)
;;;;     Effects:
;;;;     * ?object2 is placed adjacent to (touching) ?object1's ?side.
;;;;       If ?side=top, then ?object2's left side is aligned with the 
;;;;       left side of ?object1.  If ?side=left or right, then the lowest
;;;;       available support is selected such that ?object1 and ?object2
;;;;       touch (failure if none exists). ?side=bottom is not allowed.
;;;;     * ?object2's location is changed
;;;;     * If ?object2 is compound, the locations of all members of the 
;;;;       compound hierarchy are appropriately updated
;;;;     Requirements:
;;;;     * ?object1 and ?object2 are not members of any compound
;;;;     * Nothing is stacked on top of ?object1 (?side=top only)
;;;;     * Nothing is stacked on top of ?object2
;;;;     * ?object2 must weigh less than "max-movable-weight"
;;;;     * There is some object available to support ?object2
;;;;     * ?object2's new location is different from the old
;;;;     * ?object2 does not intersect any other primitive once moved
;;;;
;;;; * (reinforce ?object ?reinforcement-type)
;;;;     Effects:
;;;;     * ?object is reinforced with ?reinforcement-type
;;;;     * ?object's weight increases by weight of ?reinforcement-type
;;;;     * The weight of any compound above ?object in the hierarchy
;;;;       increases by the weight of ?reinforcement-type
;;;;     * ?object's strength is multiplied by that of ?reinforcement-type
;;;;     Requirements:
;;;;     * ?reinforcement-type is an appropriate material for ?object
;;;;     * ?object has not already been reinforced
;;;;     * ?reinforcement-type has count greater than 0
;;;;
;;;; * (rotate ?object)
;;;;     Effects:
;;;;     * The width and height dimensions of ?object are exchanged
;;;;     Requirements:
;;;;     * ?object is primitive
;;;;     * ?object is not of type "ground"
;;;;     * ?object is not a member of any compound
;;;;     * ?object does not intersect any primitive after rotation
;;;;
;;;; Persistants:
;;;;   (braced ?object1 ?object2 ?brace-type)
;;;;   (current-identifier ?id)
;;;;   (member ?compound ?object)
;;;;   (object ?object ?type)
;;;;   (object-location ?object ?x ?y)
;;;;   (object-size ?object ?width ?height ?weight)
;;;;   (reinforced ?object ?reinforcement-type)

;;; ---------------------------------------------------------------------------
;;; FACTS: Domain facts. These remain fixed across all game instances.

(role agent)

(next-identifier id1 id2)
(next-identifier id2 id3)
(next-identifier id3 id4)
(next-identifier id4 id5)
(next-identifier id5 id6)
(next-identifier id6 id7)
(next-identifier id7 id8)
(next-identifier id8 id9)
(next-identifier id9 id10)
(next-identifier id10 id11)
(next-identifier id11 id12)
(next-identifier id12 id13)
(next-identifier id13 id14)
(next-identifier id14 id15)
(next-identifier id15 id16)
(next-identifier id16 id17)
(next-identifier id17 id18)
(next-identifier id18 id19)
(next-identifier id19 id20)

(orientation horizontal)
(orientation vertical)

(power 2 0 1)
(power 2 1 2)
(power 2 2 4)
(power 2 3 8)
(power 2 4 16)
(power 2 5 32)

(power 3 0 1)
(power 3 1 3)
(power 3 2 9)
(power 3 3 27)
(power 3 4 81)
(power 3 5 243)

(power 4 0 1)
(power 4 1 4)
(power 4 2 16)
(power 4 3 64)
(power 4 4 256)
(power 4 5 768)

(side bottom)
(side left)
(side right)
(side top)

;;; ---------------------------------------------------------------------------
;;; ENTAILMENTS: Relations that must be logically derived from persistants.

;;; Action predicates: these are true if ?agent performed the given action
;;; in the current time step (i.e. (does agent ...) is true).   Some of
;;; these have several cases, including versions that apply when the object
;;; acted upon is a member of a larger compound that must be updated in some
;;; manner.
(<= (action-add-to-compound agent ?compound)
    (does agent (add-to-compound ?compound ?object)))

(<= (action-brace agent ?brace-type)
    (does agent (brace ?object1 ?object2 ?brace-type)))

(<= (action-brace agent ?object1)
    (does agent (brace ?object1 ?object2 ?brace-type)))

(<= (action-brace agent ?object2)
    (does agent (brace ?object1 ?object2 ?brace-type)))

(<= (action-brace agent ?compound)
    (does agent (brace ?object1 ?object2 ?brace-type))
    (is-recursive-member-of-compound ?compound ?object1))

(<= (action-brace agent ?compound)
    (does agent (brace ?object1 ?object2 ?brace-type))
    (is-recursive-member-of-compound ?compound ?object2))

(<= (action-nudge agent ?object)
    (does agent (nudge ?object ?side)))

(<= (action-nudge agent ?object)
    (does agent (nudge ?compound ?side))
    (is-recursive-member-of-compound ?compound ?object))

(<= (action-place-adjacent agent ?object2)
    (does agent (place-adjacent ?object1 ?object2 ?side)))

(<= (action-place-adjacent agent ?object)
    (does agent (place-adjacent ?object1 ?compound ?side))
    (is-recursive-member-of-compound ?compound ?object))

(<= (action-reinforce agent ?reinforcement-type)
    (does agent (reinforce ?object ?reinforcement-type)))

(<= (action-reinforce agent ?object)
    (does agent (reinforce ?object ?reinforcement-type)))

(<= (action-reinforce agent ?object)
    (does agent (reinforce ?member ?reinforcement-type))
    (is-recursive-member-of-compound ?object ?member))

(<= (action-rotate agent ?object)
    (does agent (rotate ?object)))

;;; Compute whether two objects are adjacent (touching) on ?object1's ?side.
;;; Cases:
;;; 1) ?object1 and ?object2 are both compound. Find a member primitive from
;;;    one that touches a member primitive from the other.
;;; 2) ?object1 is primitve, ?object2 is compound, and ?object1 is not in 
;;;    ?object2's hierarchy. Find one member primitive of ?object2 that is 
;;;    touching ?object1.
;;; 3) ?object1 is compound, ?object2 is primitive. Similar to 2).
;;; 4) ?object1 and ?object2 both primitive, ?object2 below ?object1.
;;; 5) ?object1 and ?object2 both primitive, ?object2 left of ?object1.
;;; 6) ?object1 and ?object2 both primitive, ?object2 right of ?object1.
;;; 7) ?object1 and ?object2 both primitive, ?object2 on top of ?object1.
(<= (adjacent ?object1 ?object2 ?side)
    (true (object ?object1 compound))
    (true (object ?object2 compound))
    (not (is-recursive-member-of-compound ?object1 ?object2))
    (is-recursive-member-of-compound ?object1 ?primitive1)
    (primitive-object ?primitive1)
    (adjacent ?primitive1 ?object2 ?side))

(<= (adjacent ?primitive1 ?object2 ?side)
    (true (object ?object2 compound))
    (primitive-object ?primitive1)
    (not (is-recursive-member-of-compound ?object2 ?primitive1))
    (is-recursive-member-of-compound ?object2 ?primitive2)
    (primitive-object ?primitive2)
    (adjacent ?primitive1 ?primitive2 ?side))

(<= (adjacent ?object1 ?primitive2 ?side)
    (true (object ?object1 compound))
    (primitive-object ?primitive2)    
    (not (is-recursive-member-of-compound ?object1 ?primitive2))
    (is-recursive-member-of-compound ?object1 ?primitive1)
    (primitive-object ?primitive1)
    (adjacent ?primitive1 ?primitive2 ?side))

(<= (adjacent ?primitive1 ?primitive2 bottom)
    (primitive-object ?primitive1)
    (primitive-object ?primitive2)
    (object-coordinates ?primitive1 ?x11 ?shared ?x12 ?y12)
    (object-coordinates ?primitive2 ?x21 ?y21 ?x22 ?shared)
    (> ?x12 ?x21)
    (> ?x22 ?x11))

(<= (adjacent ?primitive1 ?primitive2 left)
    (primitive-object ?primitive1)
    (primitive-object ?primitive2)
    (object-coordinates ?primitive1 ?shared ?y11 ?x12 ?y12)
    (object-coordinates ?primitive2 ?x21 ?y21 ?shared ?y22)
    (> ?y12 ?y21)
    (> ?y22 ?y11))

(<= (adjacent ?primitive1 ?primitive2 right)
    (primitive-object ?primitive1)
    (primitive-object ?primitive2)
    (object-coordinates ?primitive1 ?x11 ?y11 ?shared ?y12)
    (object-coordinates ?primitive2 ?shared ?y21 ?x22 ?y22)
    (> ?y12 ?y21)
    (> ?y22 ?y11))

(<= (adjacent ?primitive1 ?primitive2 top)
    (primitive-object ?primitive1)
    (primitive-object ?primitive2)
    (object-coordinates ?primitive1 ?x11 ?y11 ?x12 ?shared)
    (object-coordinates ?primitive2 ?x21 ?shared ?x22 ?y22)
    (> ?x12 ?x21)
    (> ?x22 ?x11))

;;; Compute whether two objects are adjacent on any side.
;;(<= (adjacent-on-any-side ?object1 ?object2)
;;    (true (object ?object1 ?type1))
;;    (true (object ?object2 ?type2))
;;    (side ?side)
;;    (adjacent ?object1 ?object2 ?side)
	;; manual mod
	;; used in can add
;;    (distinct ?object1 ?object2)
;;    (distinct ?type2 ground)
;;    (not (material-is-brace-type ?type2))
;;    (not (material-is-reinforcement-type ?type2))
    ;;(not (is-member-of-any-compound ?object2))
;;	(not (true (member ?anycompound ?object2)))
 ;;   (not (is-recursive-member-of-compound ?object2 ?object1))
;;	)

;;; Determine the number of objects adjacent to primitive ?object's ?side.
(<= (adjacent-primitive-count ?object ?side ?number)
    (leftmost-adjacent-primitive ?object ?leftmost ?side)
    (adjacent-primitive-count-recursive ?object ?leftmost ?side ?number))

;;; Determine the number of primitive objects adjacent to ?object's ?side
;;;  that are located right of ?left (including ?left).
;;manual mod
;;(<= (adjacent-primitive-count-recursive ?object ?left ?side ?number)
(<= (adjacent-primitive-count-recursive ?object ?left bottom ?number)
	(leftmost-adjacent-primitive-to-right ?object ?left ?next bottom)
	(adjacent-primitive-count-recursive ?object ?next bottom ?n)
    (+ ?n 1 ?number)
	;; manual mod
	(distinct ?object ?left)
	(adjacent ?object ?left bottom)
	)
;; manual mod
;;(<= (adjacent-primitive-count-recursive ?object ?left ?side 1)
(<= (adjacent-primitive-count-recursive ?object ?left bottom 1)
    (primitive-object ?object)
    (primitive-object ?left)
    ;;(side ?side)
	(not (adjacent-primitive-to-right ?object ?left bottom))
	;; manual mod
    (distinct ?object ?left)
	(adjacent ?object ?left bottom)
	)

;;; Determine if any primitive is adjacent to ?object's ?side to the 
;;; right of ?left
(<= (adjacent-primitive-to-right ?object ?left ?side)
    (adjacent ?object ?left ?side)
    (adjacent ?object ?right ?side)
    (true (object-location ?left ?left-x ?left-y))
    (true (object-location ?right ?right-x ?right-y))
    (> ?right-x ?left-x)
	)

;;; Compute whether any object is adjacent to ?object1's ?side
(<= (adjacent-to-any-object ?object1 ?side)
    (true (object ?object1 ?type1))
    (true (object ?object2 ?type2))
    (adjacent ?object1 ?object2 ?side))

;;; Compute whether any member of ?compound is adjacent to ?object1's ?side
(<= (adjacent-to-any-member-object ?compound ?object1 ?side)
    (true (member ?compound ?object1))
    (true (member ?compound ?object2))
    (adjacent ?object1 ?object2 ?side))

;;; Compute whether two objects are aligned on one side
;;; (e.g. left sides have the same x-coordinate)
(<= (aligned ?object1 ?object2 bottom)
    (true (object-location ?object1 ?x1 ?y))
    (true (object-location ?object2 ?x2 ?y))
	;; manual mod
    (adjacent ?object1 ?object2 bottom)
	)

(<= (aligned ?object1 ?object2 left)
    (true (object-location ?object1 ?x ?y1))
    (true (object-location ?object2 ?x ?y2))
	;; manual mod
    (adjacent ?object1 ?object2 bottom)
	)

(<= (aligned ?object1 ?object2 right)
    (object-coordinates ?object1 ?x11 ?y11 ?right ?y12)
    (object-coordinates ?object2 ?x21 ?y21 ?right ?y22)
	;; manual mod
    (adjacent ?object1 ?object2 bottom)
	)

(<= (aligned ?object1 ?object2 top)
    (object-coordinates ?object1 ?x11 ?y11 ?x12 ?top)
    (object-coordinates ?object2 ?x21 ?y21 ?x22 ?top)
	;; manual mod
    (adjacent ?object1 ?object2 bottom)
	)

;;; Determine if any action is available to the agent.
(<= (available-action)
    (can-add-to-compound ?compound ?object))

(<= (available-action)
    (can-brace ?object1 ?object2 ?brace-type))

(<= (available-action)
    (can-nudge ?object ?side))

(<= (available-action)
    (can-place-adjacent ?object1 ?object2 ?side))

(<= (available-action)
    (can-reinforce ?object ?reinforcement-type))

(<= (available-action)
    (can-rotate ?object))

;;; Determine the number of objects to which ?object is braced. Cases:
;;; 1) ?object not braced
;;; 2) ?object vertically oriented, and has one brace 
;;; 3) ?object vertically oriented, and has two braces (>2 impossible for vert)
;;; 4) ?object horizontally oriented, and has at least one brace
(<= (brace-count ?object 0)
    (true (object ?object ?type))
    (not (braced-object ?object)))

(<= (brace-count ?object 1)
    (object-orientation ?object vertical)
    (braced-object ?object)
    (not (braced-twice ?object)))

(<= (brace-count ?object 2)
    (object-orientation ?object vertical)
    (braced-twice ?object))

(<= (brace-count ?object ?number)
    (object-orientation ?object horizontal)
    (leftmost-brace ?object ?leftmost)
    (brace-count-recursive ?object ?leftmost ?number))

;;; Determine the number of objects to which ?object is braced 
;;; to the right of ?left (including ?left)
(<= (brace-count-recursive ?object ?left 1)
    (braced-joint ?object ?left)
    (not (brace-to-right ?object ?left)))

(<= (brace-count-recursive ?object ?left ?number)
    (leftmost-brace-to-right ?object ?left ?next)
    (brace-count-recursive ?object ?next ?n)
    (+ ?n 1 ?number))

;;; Determine the strength multiplier for a braced object. Cases:
;;; 1) ?object is braceable
;;; 2) ?object is not braceable
(<= (brace-strength-factor ?object ?factor)
    (true (object ?object ?obj-type))
    (brace-properties ?brace-type ?brace-strength ?brace-weight)
    (brace-count ?object ?n)
    (power ?brace-strength ?n ?factor))

(<= (brace-strength-factor ?object 1)
    (true (object ?object ?obj-type))
    (not (material-is-braceable ?obj-type)))

;;; Determine if there exists an object braced to ?object to the right of ?left
(<= (brace-to-right ?object ?left)
    (braced-joint ?object ?left)
    (braced-joint ?object ?right)
    (true (object-location ?left ?left-x ?left-y))
    (true (object-location ?right ?right-x ?right-y))
    (> ?right-x ?left-x))

;;; Compute whether ?object1 and ?object2 have been braced (any type).
(<= (braced-joint ?object1 ?object2)
    (true (braced ?object1 ?object2 ?brace-type)))

(<= (braced-joint ?object1 ?object2)
    (true (braced ?object2 ?object1 ?brace-type)))

;;; Determine whether ?object has been braced
(<= (braced-object ?object)
    (true (braced ?object ?object2 ?brace-type)))

(<= (braced-object ?object)
    (true (braced ?object1 ?object ?brace-type)))

;;; Determine whether ?object has been braced twice
(<= (braced-twice ?object)
    (braced-joint ?object ?object2)
    (braced-joint ?object ?object3)
    (distinct ?object2 ?object3))

;;; Determine if ?bridge extends across the open space between the objects
;;; ?left and ?right. Requirements include:
;;; 1) The top of ?left and ?right is at the same height
;;; 2) ?left is to the left of ?right and there is space between the two
;;; 3) Every cell between ?left and ?right at the same height as their tops
;;;    has a support that is a member of ?bridge (the bridge deck)
(<= (bridge ?bridge ?left ?right)
    (object-coordinates ?left ?x11 ?y11 ?x12 ?y)
    (object-coordinates ?right ?x21 ?y21 ?x22 ?y)
    (> ?x21 ?x12)
    (bridge-segment ?bridge ?x12 ?x21 ?y)
	;;manual mod
	;; bridge is supposed for ground only, otherwise, it annoyes learning the concept bridge
	(object ?left ground)
	(object ?right ground)
	)

;;; Determine if, for every cell between ?start-x and ?end-x at height ?y, 
;;; there is a support that is a member of ?bridge.
;;; 1) Base: A single primitive ?support has top at ?y, is clear on top,
;;;    and spans entire remaining distance
;;; 2) General: A primitive object ?support has top at ?y, is clear on top, 
;;;    and spans part of distance 
(<= (bridge-segment ?bridge ?start-x ?end-x ?y)
    (is-recursive-member-of-compound ?bridge ?support)
    (primitive-object ?support)
    (object-coordinates ?support ?start-x ?y1 ?end-x ?y)
    (clear ?support top))

(<= (bridge-segment ?bridge ?start-x ?end-x ?y)
    (is-recursive-member-of-compound ?bridge ?support)
    (primitive-object ?support)
    (object-coordinates ?support ?start-x ?y1 ?x2 ?y)
    (clear ?support top)
    (bridge-segment ?bridge ?x2 ?end-x ?y))

;;; Determine if ?object may be added to ?compound. Legal if
;;; Case 1 - create new compound:
;;;   1) ?compound is the current identifier (not an existing compound)
;;;   2) ?object is not a member of an existing compound
;;;   3) ?object is not of type "ground"
;;; Case 2 - add to existing compound:
;;;   1) ?compound is an existing compound
;;;   2) ?compound and ?object are different
;;;   3) ?object is not of type "ground"
;;;   4) ?object is not a member of any other compound
;;;   5) ?compound is not a recursive sub-compound of ?object
;;;   6) ?object is adjacent to (touching) some primitive member of ?compound
(<= (can-add-to-compound ?compound ?object)
    (true (current-identifier ?compound))
    (true (object ?object ?type))
    (distinct ?type ground)
    (not (is-member-of-any-compound ?object))
	;;manual mod - bug??? don't need to make a compound from a compound, do we? it can go infinitely
	(distinct ?type compound)
	)

(<= (can-add-to-compound ?compound ?object)
    (true (object ?compound compound))
    (true (object ?object ?type))
    (distinct ?compound ?object)
    (distinct ?type ground)
    (not (is-member-of-any-compound ?object))
    (not (is-recursive-member-of-compound ?object ?compound))
    ;; manual mod
	;;(adjacent-on-any-side ?compound ?object)
	(adjacent ?compound ?object ?side)
	)

;;; Determine if the joint between ?object1 and ?object2 may be braced 
;;; with ?brace. Legal if:
;;; 1) ?object1 and ?object2 are in the same compound
;;; 2) ?object1 and ?object2 are primitives of same material
;;; 3) ?brace-type is an appropriate material for bracing given objects
;;; 4) There is at least one ?brace-type available
;;; 5) ?object1 and ?object2 form a joint (L-shape or T-shape)
;;; 6) ?object1 and ?object2 have not already been braced
(<= (can-brace ?object1 ?object2 ?brace-type)
    (same-compound ?compound ?object1 ?object2)
    (same-primitive-material ?material ?object1 ?object2)
    (brace-type ?brace-type ?material)
    (true (count ?brace-type ?count))
    (> ?count 0)
    (joint ?object1 ?object2)
    (not (braced-joint ?object1 ?object2)))

;;; Determine if ?object can be nudged toward ?side. Legal if:
;;; 1) ?object weighs less than WMAX
;;; 2) nothing is stacked on top of ?object
;;; 3) ?object is not in any compound
;;; 4) ?object does not intersect any other object once moved
;;; 5) ?object is supported once moved
(<= (can-nudge ?object ?side)
    (movable ?object)
    (clear ?object top)
    (not (is-member-of-any-compound ?object))
    (coordinates-after-nudge ?object ?side ?x1 ?y1 ?x2 ?y2)
    (not (region-intersected-by-object ?object ?x1 ?y1 ?x2 ?y2))
    (support-for-nudge ?object ?support ?side))

;;; Move ?object2 adjacent to (touching) ?object1's ?side. Legal if:
;;; 1) ?object1 and ?object2 are different
;;; 2) ?object1 and ?object2 are not in any compound
;;; 3) nothing is stacked on top of ?object1 (?side=top only)
;;; 4) nothing is stacked on top of ?object2
;;; 4) ?object2 weighs less than WMAX
;;; 5) there is some object available to support ?object2
;;; 6) ?object2's new location is different from the old location
;;; 7) ?object2 does not intersect any other object once moved
(<= (can-place-adjacent ?object1 ?object2 ?side)
    (true (object ?object1 ?object1-type))
    (true (object ?object2 ?object2-type))
    (distinct ?object1 ?object2)
    (not (is-member-of-any-compound ?object1))
    (not (is-member-of-any-compound ?object2))
    (clear ?object2 top)
    (movable ?object2)
    (coordinates-after-place ?object1 ?object2 ?side ?x1 ?y1 ?x2 ?y2)
    (not (object-coordinates ?object2 ?x1 ?y1 ?x2 ?y2))
    (not (region-intersected-by-object ?object2 ?x1 ?y1 ?x2 ?y2)))

;;; Reinforce ?object with ?reinforcement. Legal if:
;;; 1) ?reinforcement-type can be used on ?object
;;; 2) ?object has not already been reinforced
;;; 3) There is at least 1 ?reinforcement-type available
(<= (can-reinforce ?object ?reinforcement-type)
    (true (object ?object ?object-type))
    (reinforcement-type ?reinforcement-type ?object-type)
    (not (reinforced-object ?object))
    (true (count ?reinforcement-type ?count))
    (> ?count 0))

;;; Determine if an object may be rotated. True if:
;;; 1) ?object is primitive
;;; 2) ?object is not of type "ground"
;;; 3) Nothing is on top of ?object
;;; 4) ?object is not a member of any compound
;;; 5) ?object does not intersect any primitive after rotation
(<= (can-rotate ?object)
    (coordinates-after-rotate ?object ?x1 ?y1 ?x2 ?y2)
    (not (region-intersected-by-object ?object ?x1 ?y1 ?x2 ?y2)))

;;manual mod
(<= (coordinates-after-rotate ?object ?x1 ?y1 ?x2 ?y2)
	(true (object ?object ?type))
    (true (object-location ?object ?x1 ?y1))
    (true (object-size ?object ?width ?height ?weight))
    (material-type ?type ?strength)
    (distinct ?type ground)
    (clear ?object top)
    (+ ?x1 ?height ?x2)
    (+ ?y1 ?width ?y2)
    (not (is-member-of-any-compound ?object))
	;; manual mod
    (distinct ?width ?height)
	(distinct ?type compound);;(material-type ?type ?strength) is not intuitive, maybe there is some reason
)


;;; Determine if ?object is clear of other objects on ?side 
(<= (clear ?object ?side)
    (true (object ?object ?type))
    (side ?side)
    (not (adjacent-to-any-object ?object ?side)))

;;; Determine if any ?object causes the current structure to collapse. Cases:
;;; 1) ?object is supporting too much weight and is crushed
;;; 2) ?object is not supported by any other object, and falls
(<= collapsed
    (crushed ?object))

(<= collapsed
    (unsupported ?object))

;;; Determine whether the members of ?compound form a column. Requirements
;;; (note that some requirements tested by column-recursive):
;;; 1) ?compound is vertically oriented
;;; 2) ?compound has one member at top, spanning full width of ?compound
;;; 3) All members of ?compound are aligned on left and right sides 
;;; 4) ?compound has one member at bottom, spanning full width of ?compound
(<= (column ?compound)
    (object-orientation ?compound vertical)
    (true (member ?compound ?top))
    (object-coordinates ?compound ?x1 ?cy1 ?x2 ?y2)
    (object-coordinates ?top ?x1 ?ty1 ?x2 ?y2)
    (column-recursive ?compound ?top))

(<= (column-recursive ?compound ?top)
    (true (member ?compound ?top))
    (object-coordinates ?compound ?x1 ?y1 ?x2 ?cy2)
    (object-coordinates ?top ?x1 ?y1 ?x2 ?ty2))

(<= (column-recursive ?compound ?top)
    (true (member ?compound ?support))
    (adjacent ?top ?support bottom)
    (aligned ?top ?support left)
    (aligned ?top ?support right)
    (column-recursive ?compound ?support))

;;; Determine new coordinates for ?compound when ?object is added.
(<= (coordinates-after-add ?compound ?object ?x1 ?y1 ?x2 ?y2)
    (object-coordinates ?compound ?cx1 ?cy1 ?cx2 ?cy2)
    (object-coordinates ?object ?ox1 ?oy1 ?ox2 ?oy2)
    (- ?cx1 ?ox1 ?test-x1)
    (- ?cx2 ?ox2 ?test-x2)
    (- ?cy1 ?oy1 ?test-y1)
    (- ?cy2 ?oy2 ?test-y2)
	;;manual mod
   ;; (if-gt0-then-else ?test-x1 ?ox1 ?cx1 ?x1)
   ;; (if-gt0-then-else ?test-x2 ?cx2 ?ox2 ?x2)
   ;; (if-gt0-then-else ?test-y1 ?oy1 ?cy1 ?y1)
   ;; (if-gt0-then-else ?test-y2 ?cy2 ?oy2 ?y2)
   (does agent (add-to-compound ?compound ?object))
   (if-gt0-then-else-x1 ?test-x1 ?ox1 ?cx1 ?x1)
   (if-gt0-then-else-x2 ?test-x2 ?cx2 ?ox2 ?x2)
   (if-gt0-then-else-y1 ?test-y1 ?oy1 ?cy1 ?y1)
   (if-gt0-then-else-y2 ?test-y2 ?cy2 ?oy2 ?y2)
   )

;;; Determines new coordinates for ?object when pushed toward ?side. Cases:
;;; 1) ?side = left
;;; 2) ?side = right
(<= (coordinates-after-nudge ?object left ?x1 ?y1 ?x2 ?y2)
    (object-coordinates ?object ?ox1 ?y1 ?ox2 ?y2)
    (- ?ox1 1 ?x1)
    (- ?ox2 1 ?x2)
	;; manual mod
	(true (object ?object ?type))
	(distinct ?type ground)
	(movable ?object)
	;; manual mod
	(not (adjacent ?object ?anyobj left))
	(not (adjacent ?object ?anyobj top))
	(not (member ?anycompund ?object))
	)

(<= (coordinates-after-nudge ?object right ?x1 ?y1 ?x2 ?y2)
    (object-coordinates ?object ?ox1 ?y1 ?ox2 ?y2)
    (+ ?ox1 1 ?x1)
    (+ ?ox2 1 ?x2)
	;; manual mod
	(true (object ?object ?type))
	(distinct ?type ground)
	(movable ?object)
	;; manual mod
	(not (adjacent ?object ?anyobj right))
	(not (adjacent ?object ?anyobj top))
	(not (member ?anycompund ?object))
	)

;;; Determines potential coordinates for ?object2 on ?object1's ?side. Cases:
;;; 1) ?side = left
;;; 2) ?side = right
;;; 3) ?side = top (includes test for ?object1 is clear)
(<= (coordinates-after-place ?object1 ?object2 left ?x1 ?y1 ?x2 ?y2)
    (true (object-location ?object1 ?x2 ?oy1))
    (true (object-size ?object2 ?width2 ?height2 ?weight2))
    (support-for-place ?object1 ?object2 ?support left)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?y1)
    (- ?x2 ?width2 ?x1)
    (+ ?y1 ?height2 ?y2)
	;;manual mod
    (movable ?object2)
	(true (object ?object2 ?type2))
	(distinct ?type2 ground)
    (clear ?object2 top)
    (distinct ?object1 ?object2)
	(not (is-recursive-member-of-compound ?object2 ?object1))
	;;(not (is-member-of-any-compound ?object2))
	(not (true (member ?anycompound ?object2)))
    (distinct ?object1 ?support)
    (distinct ?object2 ?support)
	;; different support can result in same new location
	(not (true (member ?anycompound2 ?support))) ;; otherwise coordinates-after-place may be duplicated, it can still be duplicated and result in duplicated locations
	)

(<= (coordinates-after-place ?object1 ?object2 right ?x1 ?y1 ?x2 ?y2)
    (primitive-object ?support)
    (support-for-place ?object1 ?object2 ?support right)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?y1)
    (object-coordinates ?object1 ?ox1 ?oy1 ?x1 ?oy2)
    (true (object-size ?object2 ?width2 ?height2 ?weight2))
    (+ ?x1 ?width2 ?x2)
    (+ ?y1 ?height2 ?y2)
	;; manual mod
    (movable ?object2)
	(true (object ?object2 ?type2))
	(distinct ?type2 ground)
    (clear ?object2 top)
    (distinct ?object1 ?object2)
	(not (is-recursive-member-of-compound ?object2 ?object1))
	;;(not (is-member-of-any-compound ?object2))
	(not (true (member ?anycompound ?object2)))
    (distinct ?object1 ?support)
    (distinct ?object2 ?support)
	(not (true (member ?anycompound2 ?support))) ;; otherwise coordinates-after-place may be duplicated
	)

(<= (coordinates-after-place ?object1 ?object2 top ?x21 ?y21 ?x22 ?y22)
    (clear ?object1 top)
    (true (object-size ?object2 ?width2 ?height2 ?weight2))
    (object-coordinates ?object1 ?x21 ?y11 ?x12 ?y21)
    (+ ?x21 ?width2 ?x22)
    (+ ?y21 ?height2 ?y22)
	;; manual mod
    (movable ?object2)
	(true (object ?object2 ?type2))
	(distinct ?type2 ground)
	(not (is-recursive-member-of-compound ?object2 ?object1))
	;;(not (is-member-of-any-compound ?object2))
	(not (true (member ?anycompound ?object2)))
    (clear ?object1 top)
    (clear ?object2 top)
    (distinct ?object1 ?object2)
	)

;;; Determine if ?object is crushed by the objects resting on it.
(<= (crushed ?object)
    (strength ?object ?strength)
    (supported-weight ?object ?weight)
    (> ?weight ?strength))

;;; Calculate the distance ?object moved along X and Y axes via place-adjacent
(<= (distance-object-moved ?object ?x-dist ?y-dist)
    (does agent (place-adjacent ?target ?object ?side))
    (true (object-location ?object ?old-x ?old-y))
    (coordinates-after-place ?target ?object ?side ?new-x ?new-y ?x2 ?y2)
    (not (region-intersected-by-object ?object ?new-x ?new-y ?x2 ?y2))
    (- ?new-x ?old-x ?x-dist)
    (- ?new-y ?old-y ?y-dist))    

;;; A simple terinary operator: determine if ?test is greater than 0, 
;;; if so, then ?result (4th arg) takes value of ?then, otherwise ?result
;;; takes value of ?else.  
;; manual mod
;;(<= (if-gt0-then-else ?test ?then ?else ?then)
;;    (number ?then)
;;    (number ?else)
;;    (> ?test 0))

;;(<= (if-gt0-then-else ?test ?then ?else ?else)
;;    (number ?then)
;;    (number ?else)
;;    (>= 0 ?test))

;; 1-1
(<= (if-gt0-then-else-x1 ?test-x1 ?ox1 ?cx1 ?ox1)
    ;;(can-add-to-compound ?compound ?object)
    (does agent (add-to-compound ?compound ?object))
    (object-coordinates ?compound ?cx1 ?cy1 ?cx2 ?cy2)
    (object-coordinates ?object ?ox1 ?oy1 ?ox2 ?oy2)
    (- ?cx1 ?ox1 ?test-x1)
    (> ?test-x1 0))
;; 1-2
(<= (if-gt0-then-else-x1 ?test-x1 ?ox1 ?cx1 ?cx1)
    ;;(can-add-to-compound ?compound ?object)
    (does agent (add-to-compound ?compound ?object))
    (object-coordinates ?compound ?cx1 ?cy1 ?cx2 ?cy2)
    (object-coordinates ?object ?ox1 ?oy1 ?ox2 ?oy2)
    (- ?cx1 ?ox1 ?test-x1)
    (>= 0 ?test-x1))

;; 2-1
(<= (if-gt0-then-else-x2 ?test-x2 ?cx2 ?ox2 ?cx2)
    ;;(can-add-to-compound ?compound ?object)
    (does agent (add-to-compound ?compound ?object))
    (object-coordinates ?compound ?cx1 ?cy1 ?cx2 ?cy2)
    (object-coordinates ?object ?ox1 ?oy1 ?ox2 ?oy2)
    (- ?cx2 ?ox2 ?test-x2)
    (> ?test-x2 0))
;; 2-2
(<= (if-gt0-then-else-x2 ?test-x2 ?cx2 ?ox2 ?ox2)
    ;;(can-add-to-compound ?compound ?object)
    (does agent (add-to-compound ?compound ?object))
    (object-coordinates ?compound ?cx1 ?cy1 ?cx2 ?cy2)
    (object-coordinates ?object ?ox1 ?oy1 ?ox2 ?oy2)
    (- ?cx2 ?ox2 ?test-x2)
    (>= 0 ?test-x2))
;; 3-1
(<= (if-gt0-then-else-y1 ?test-y1 ?oy1 ?cy1 ?oy1)
    ;;(can-add-to-compound ?compound ?object)
    (does agent (add-to-compound ?compound ?object))
    (object-coordinates ?compound ?cx1 ?cy1 ?cx2 ?cy2)
    (object-coordinates ?object ?ox1 ?oy1 ?ox2 ?oy2)
    (- ?cy1 ?oy1 ?test-y1)
    (> ?test-y1 0))
;; 3-2
(<= (if-gt0-then-else-y1 ?test-y1 ?oy1 ?cy1 ?cy1)
    ;;(can-add-to-compound ?compound ?object)
    (does agent (add-to-compound ?compound ?object))
    (object-coordinates ?compound ?cx1 ?cy1 ?cx2 ?cy2)
    (object-coordinates ?object ?ox1 ?oy1 ?ox2 ?oy2)
    (- ?cy1 ?oy1 ?test-y1)
    (>= 0 ?test-y1))

;; 4-1
(<= (if-gt0-then-else-y2 ?test-y2 ?cy2 ?oy2 ?cy2)
    ;;(can-add-to-compound ?compound ?object)
    (does agent (add-to-compound ?compound ?object))
    (object-coordinates ?compound ?cx1 ?cy1 ?cx2 ?cy2)
    (object-coordinates ?object ?ox1 ?oy1 ?ox2 ?oy2)
    (- ?cy2 ?oy2 ?test-y2)
    (> ?test-y2 0))
;;4-2
(<= (if-gt0-then-else-y2 ?test-y2 ?cy2 ?oy2 ?oy2)
    ;;(can-add-to-compound ?compound ?object)
    (does agent (add-to-compound ?compound ?object))
    (object-coordinates ?compound ?cx1 ?cy1 ?cx2 ?cy2)
    (object-coordinates ?object ?ox1 ?oy1 ?ox2 ?oy2)
    (- ?cy2 ?oy2 ?test-y2)
    (>= 0 ?test-y2))

;;; Determine if ?object is a member of any compound
(<= (is-member-of-any-compound ?object)
    (true (member ?compound ?object)))

;;; Determine if ?object is a member of ?compound.  Strictly speaking, this
;;; should be unnecessary, but GDL requires that any variable used as an 
;;; argument in a recursive predicate must also be used in a non-recursive
;;; predicate, where (true ...) does not satisfy the requirement. This 
;;; rule is used to satisfy that requirement.
(<= (is-member-of-compound ?compound ?object)
    (true (member ?compound ?object)))

;;; Determine if ?object is a nested member of ?compound. Cases:
;;; 1) ?object is a direct member of ?compound
;;; 2) ?object is a nested member of ?compound
(<= (is-recursive-member-of-compound ?compound ?object)
    (true (member ?compound ?object)))

(<= (is-recursive-member-of-compound ?compound ?object)
    (is-member-of-compound ?compound ?intermediate)
    (is-recursive-member-of-compound ?intermediate ?object))

;;; Determine if ?object1 and ?object2 form an L- or T-shaped joint. 
(<= (joint ?object1 ?object2)
    (L-joint ?object1 ?object2))

(<= (joint ?object1 ?object2)
    (T-joint ?object1 ?object2))

;;; L-joint case 1:
;;; * ?object1 has same left x-coordinate as ?object2
;;; * ?object1 has vertical orientation (height > width)
;;; * ?object2 has horizontal orientation (width > height) 
;;; * ?object1 is on ?object2
;;; * ?object2 is wider than ?object1
(<= (L-joint ?object1 ?object2)
    (aligned ?object1 ?object2 left)
    (object-orientation ?object1 vertical)
    (object-orientation ?object2 horizontal)
    (adjacent ?object1 ?object2 bottom)
    (wider ?object2 ?object1))

;;; L-joint case 2:
;;; * ?object1 has same right x-coordinate as ?object2
;;; * ?object1 has vertical orientation (height > width)
;;; * ?object2 has horizontal orientation (width > height) 
;;; * ?object1 is on ?object2
;;; * ?object2 is wider than ?object1
(<= (L-joint ?object1 ?object2)
    (aligned ?object1 ?object2 right)
    (object-orientation ?object1 vertical)
    (object-orientation ?object2 horizontal)
    (adjacent ?object1 ?object2 bottom)
    (wider ?object2 ?object1))

;;; L-joint case 3:
;;; * ?object1 has same left x-coordinate as ?object2
;;; * ?object1 has horizontal orientation (width > height) 
;;; * ?object2 has vertical orientation (height > width)
;;; * ?object1 is on ?object2
;;; * ?object1 is wider than ?object2
(<= (L-joint ?object1 ?object2)
    (aligned ?object1 ?object2 left)
    (object-orientation ?object1 horizontal)
    (object-orientation ?object2 vertical)
    (adjacent ?object1 ?object2 bottom)
    (wider ?object1 ?object2))

;;; L-joint case 4:
;;; * ?object1 has same right x-coordinate as ?object2
;;; * ?object1 has horizontal orientation (width > height) 
;;; * ?object2 has vertical orientation (height > width)
;;; * ?object1 is on ?object2
;;; * ?object2 is wider than ?object1
(<= (L-joint ?object1 ?object2)
    (aligned ?object1 ?object2 right)
    (object-orientation ?object1 horizontal)
    (object-orientation ?object2 vertical)
    (adjacent ?object1 ?object2 bottom)
    (wider ?object1 ?object2))

;;; T-joint case 1:
;;; * ?object2 left x-coordinate is greater than ?object1 left x-coordinate
;;; * ?object2 right x-coordinate is less than ?object1 right x-coordinate
;;; * ?object1 has horizontal orientation (width > height)
;;; * ?object2 has vertical orientation (height > width)
;;; * ?object1 is on ?object2
(<= (T-joint ?object1 ?object2)
    (object-coordinates ?object1 ?x11 ?y11 ?x12 ?y12)
    (object-coordinates ?object2 ?x21 ?y21 ?x22 ?y22)
    (> ?x21 ?x11)
    (> ?x12 ?x22)
    (object-orientation ?object1 horizontal)
    (object-orientation ?object2 vertical)
    (adjacent ?object1 ?object2 bottom))

;;; T-joint case 2:
;;; * ?object1 left x-coordinate is greater than ?object2 left x-coordinate
;;; * ?object1 right x-coordinate is less than ?object2 right x-coordinate
;;; * ?object1 has vertical orientation (height > width)
;;; * ?object2 has horizontal orientation (width > height)
;;; * ?object1 is on ?object2
(<= (T-joint ?object1 ?object2)
    (object-coordinates ?object1 ?x11 ?y11 ?x12 ?y12)
    (object-coordinates ?object2 ?x21 ?y21 ?x22 ?y22)
    (> ?x11 ?x21)
    (> ?x22 ?x12)
    (object-orientation ?object1 vertical)
    (object-orientation ?object2 horizontal)
    (adjacent ?object1 ?object2 bottom))

;;; Determine if there exists some primitive object adjacent to 
;;; ?object1's ?side that is further left than ?object2
(<= (left-further-adjacent-primitive ?object1 ?object2 ?side)
    (adjacent ?object1 ?other ?side)
    (true (object-location ?object2 ?obj2-x ?obj2-y))
    (true (object-location ?other ?other-x ?other-y))
    (> ?obj2-x ?other-x)
	;;manual mod - important !!!
	(adjacent ?object1 ?object2 ?side)
	;; constraint coming from bottom in soar, change all ?side to top
	;; leftmost-adjacent-primitive only take top
	(distinct ?side left)
	(distinct ?side right)
	)

;;; Determine if there exists some object braced to ?object1 that is further
;;; left than ?object2
(<= (left-further-brace ?object1 ?object2)
    (braced-joint ?object1 ?other)
    (true (object-location ?object2 ?obj2-x ?obj2-y))
    (true (object-location ?other ?other-x ?other-y))
    (> ?obj2-x ?other-x))

;;; Determine if there exists some primitive object adjacent to 
;;; ?object1's ?side that is left of ?right and right of ?object2
(<= (left-further-adjacent-primitive-to-right ?object1 ?object2 ?right ?side)
    (adjacent ?object1 ?other ?side)
    (true (object-location ?object2 ?obj2-x ?obj2-y))
    (true (object-location ?right ?right-x ?right-y))
    (true (object-location ?other ?other-x ?other-y))
    (> ?other-x ?obj2-x)
    (> ?right-x ?other-x)
	;;manual mod - important !!!
	(adjacent ?object1 ?object2 ?side)
	;; constraint coming from bottom in soar, change all ?side to top
	(distinct ?side left)
	(distinct ?side right)
	(distinct ?object2 ?other)
	)

;;; Determine if there exists some object braced to ?object1 that is
;;; left of ?right and right of ?object2
(<= (left-further-brace-to-right ?object1 ?object2 ?right)
    (braced-joint ?object1 ?other)
    (true (object-location ?object2 ?obj2-x ?obj2-y))
    (true (object-location ?right ?right-x ?right-y))
    (true (object-location ?other ?other-x ?other-y))
    (> ?other-x ?obj2-x)
    (> ?right-x ?other-x))

;;; Determine if ?leftmost is the leftmost primitive adjacent to 
;;; ?object's ?side.
(<= (leftmost-adjacent-primitive ?object ?leftmost ?side)
    (adjacent ?object ?leftmost ?side)
    (primitive-object ?leftmost)
    (not (left-further-adjacent-primitive ?object ?leftmost ?side))
	;; constraint coming from bottom in soar, change all ?side to top
	;; weight contribution us bottom
	;; supported-weight use top
	(distinct ?side left)
	(distinct ?side right)
	)

;;; Determine if ?leftmost is adjacent to ?object1's ?side and is
;;; the leftmost object to the right of ?object2.
(<= (leftmost-adjacent-primitive-to-right ?object1 ?object2 ?leftmost ?side)
    (adjacent ?object1 ?object2 ?side)
    (adjacent ?object1 ?leftmost ?side)
    (primitive-object ?leftmost)
    (true (object-location ?object2 ?obj2-x ?obj2-y))
    (true (object-location ?leftmost ?left-x ?left-y))
    (> ?left-x ?obj2-x)
    (not (left-further-adjacent-primitive-to-right ?object1 ?object2
						   ?leftmost ?side))
	;; constraint coming from bottom in soar, change all ?side to top
	;; weight contribution us bottom
	;; supported-weight use top
	(distinct ?side left)
	(distinct ?side right)
	(distinct ?object2 ?leftmost)
	)

;;; Determine if ?leftmost is the leftmost object to which ?object is braced
(<= (leftmost-brace ?object ?leftmost)
    (braced-joint ?object ?leftmost)
    (not (left-further-brace ?object ?leftmost)))

;;; Determine if ?leftmost is braced to ?object1 and is the leftmost 
;;; braced object to the right of ?object2
(<= (leftmost-brace-to-right ?object1 ?object2 ?leftmost)
    (braced-joint ?object1 ?object2)
    (braced-joint ?object1 ?leftmost)
    (true (object-location ?object2 ?obj2-x ?obj2-y))
    (true (object-location ?leftmost ?left-x ?left-y))
    (> ?left-x ?obj2-x)
    (not (left-further-brace-to-right ?object1 ?object2 ?leftmost)))


;;; Determine if ?material is braceable
(<= (material-is-braceable ?material)
    (brace-type ?brace-type ?material))

;;; Determine if an object is movable (weight < WMAX).
(<= (movable ?object)
    (true (object-size ?object ?width ?height ?weight))
    (max-movable-weight ?max)
    (> ?max ?weight))

;; manual remove
;;; Determine if ?var is numeric.
;;(<= (number ?var)
;;    (+ ?var 0 ?var))

;;; Compute the base (excluding braces/reinforcement) strength of an object
(<= (object-base-strength ?object ?strength)
    (true (object ?object ?type))
    (true (object-size ?object ?width ?height ?weight))
    (distinct ?type compound)
    (material-type ?type ?material-strength)
    (* ?width ?material-strength ?strength))

;;; Determine the location of the lower-left and upper-right corners of ?object
(<= (object-coordinates ?object ?x1 ?y1 ?x2 ?y2)
    (true (object-location ?object ?x1 ?y1))
    (true (object-size ?object ?width ?height ?weight))
    (+ ?x1 ?width ?x2)
    (+ ?y1 ?height ?y2))

;;; Compute whether ?object intersects the region (?x11 ?y11 ?x12 ?y12).
;;; Cases:
;;; 1) ?object is primitive
;;; 2) ?object is compound
(<= (object-intersects-region ?object ?x11 ?y11 ?x12 ?y12)
    (primitive-object ?object)
    (object-coordinates ?object ?x21 ?y21 ?x22 ?y22)
	;;manual mod
	(soar-hack-regions-to-check-for-intersection ?x11 ?y11 ?x12 ?y12)
    (> ?x22 ?x11)
    (> ?x12 ?x21)
    (> ?y22 ?y11)
    (> ?y12 ?y21)
	)

;; don't need this at all, since it's only used in negative condition, primitive objects is enough
(<= (object-intersects-region ?object ?x11 ?y11 ?x12 ?y12)
    (true (object ?object compound))
    (is-member-of-compound ?object ?member)
	(object-intersects-region ?member ?x11 ?y11 ?x12 ?y12)
	;;manual mod
	(soar-hack-regions-to-check-for-intersection ?x11 ?y11 ?x12 ?y12)
	)
;; manual add
(<= (soar-hack-regions-to-check-for-intersection ?x1 ?y1 ?x2 ?y2)
    (coordinates-after-place ?object1 ?object2 ?side ?x1 ?y1 ?x2 ?y2))

;; manual add
(<= (soar-hack-regions-to-check-for-intersection ?x1 ?y1 ?x2 ?y2)
    (coordinates-after-nudge ?object ?side ?x1 ?y1 ?x2 ?y2)
	;; there are recursive nudge, only need to check for the outermost compound
	(not (is-member-of-compound ?anycompound ?object2))
	)

;; manual add
(<= (soar-hack-regions-to-check-for-intersection ?x1 ?y1 ?x2 ?y2)
    (coordinates-after-rotate ?object ?x1 ?y1 ?x2 ?y2))

;; manual add
;; The above are manually added restricted conditions for object-intersects-region with bound variables.
;; they may be duplicate, and causes exploding trouble!

;;; Determine the orientation of ?object
(<= (object-orientation ?object horizontal)
    (true (object-size ?object ?width ?height ?weight))
    (> ?width ?height))

(<= (object-orientation ?object vertical)
    (true (object-size ?object ?width ?height ?weight))
    (> ?height ?width))

;;; Determine if some member of ?compound, other than ?top, has no object
;;; on top of it that is in ?compound
(<= (other-member-at-top ?compound ?top)
    (true (member ?compound ?top))
    (true (member ?compound ?other))
    (distinct ?top ?other)
    (not (adjacent-to-any-member-object ?compound ?other top)))

;;; Determine whether ?object is a primitive
(<= (primitive-object ?object)
    (true (object ?object ?type))
    (material-type ?type ?strength))

;;; Determine if the members of ?compound form a pyramid. Requirements
;;; (some requirements tested by pyramid-recursive):
;;; 1) Exactly one member at top of compound (supports no other member object)
;;; 2) Pyramid must be at least two member-objects high
;;; 3) Each member (other than the bottom) has two supports that are members
;;;    of ?compound
;;; 4) The two supports in 3) are adjacent to each other
;;; 5) Both supports have the same width and height as the supported object
;;; 6) The objects at the bottom have the same y-coordinate as the bottom 
;;;    of ?compound
(<= (pyramid ?compound)
    (true (member ?compound ?top))
    (object-coordinates ?compound ?cx1 ?cy1 ?cx2 ?y2)
    (object-coordinates ?top ?tx1 ?ty1 ?tx2 ?y2)
    (not (other-member-at-top ?compound ?top))
    (adjacent ?top ?other bottom)
    (true (member ?compound ?other))
    (pyramid-recursive ?compound ?top))

(<= (pyramid-recursive ?compound ?top)
    (true (member ?compound ?top))
    (true (object-location ?compound ?cx ?y))
    (true (object-location ?top ?tx ?y)))

(<= (pyramid-recursive ?compound ?top)
    (true (member ?compound ?support1))
    (adjacent ?top ?support1 bottom)
    (true (member ?compound ?support2))
    (adjacent ?top ?support2 bottom)
    ;;(adjacent ?support1 ?support2 ?side) ;; this should prevent same objects
	(adjacent ?support1 ?support2 left) ;; manual mod to make sure unique ordering for bottom-up elaboration
    (true (object-size ?top ?width ?height ?t-weight))
    (true (object-size ?support1 ?width ?height ?s1-weight))
    (true (object-size ?support2 ?width ?height ?s2-weight))
    (pyramid-recursive ?compound ?support1)
    (pyramid-recursive ?compound ?support2))

;;; Determine if any object ?intersecting intersects the given 
;;; rectangular region. ?intersecting must be different from ?object
(<= (region-intersected-by-object ?object ?x11 ?y11 ?x12 ?y12)
    (true (object ?object ?type))
    (object-intersects-region ?intersecting ?x11 ?y11 ?x12 ?y12)
    (distinct ?object ?intersecting)
    (not (is-recursive-member-of-compound ?object ?intersecting))
	;; manual mode
	;; object is the intended moving object, so ...
	(clear ?object top)
	(not (true (member ?anycompound ?object)))
	(distinct ?type ground)
	)

;;; Determine if ?object is a primitive that has been reinforced.
(<= (reinforced-object ?object)
    (true (reinforced ?object ?reinforcement)))

;;; Determine if ?object1 and ?object2 are in the same compound
(<= (same-compound ?compound ?object1 ?object2)
    (true (member ?compound ?object1))
    (true (member ?compound ?object2))
	;; manual mod
    (distinct ?object1 ?object2)
	)

;;; Determine if ?object1 and ?object2 are of same primitive material
(<= (same-primitive-material ?material ?object1 ?object2)
    (true (object ?object1 ?material))
    (true (object ?object2 ?material))
    (distinct ?material compound)
	;; manual mod
    (distinct ?object1 ?object2)
	)

;;; Computes the value of ?strength for primitive ?object. Cases:
;;; 1) ?object is not reinforced (0 or more braces)
;;; 2) ?object is reinforced (0 braces)
(<= (strength ?object ?strength)
    (object-base-strength ?object ?base-strength)
    (brace-strength-factor ?object ?brace-factor)
    (* ?base-strength ?brace-factor ?strength)
    (not (reinforced-object ?object)))

(<= (strength ?object ?strength)
    (true (reinforced ?object ?reinforcement-type))
    (reinforcement-properties ?reinforcement-type ?r-strength ?r-weight)
    (object-base-strength ?object ?base-strength)
    (* ?base-strength ?r-strength ?strength))

;;; Determine if ?support will touch ?object's bottom when ?object is nudged
(<= (support-for-nudge ?object ?support left)
    (object-coordinates ?object ?old-x1 ?y1 ?old-x2 ?y2)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?y1)
    (- ?old-x1 1 ?new-x1)
    (- ?old-x2 1 ?new-x2)
    (> ?new-x2 ?sx1)
    (> ?sx2 ?new-x1)
	;; manual mod
    (movable ?object)
    (clear ?object top)
	(not (true (member ?anycompound ?object)))
	)

(<= (support-for-nudge ?object ?support right)
    (object-coordinates ?object ?old-x1 ?y1 ?old-x2 ?y2)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?y1)
    (+ ?old-x1 1 ?new-x1)
    (+ ?old-x2 1 ?new-x2)
    (> ?new-x2 ?sx1)
    (> ?sx2 ?new-x1)
	;; manual mod
    (movable ?object)
    (clear ?object top)
	(not (true (member ?anycompound ?object)))
	)

;;; Determine if ?object2 will touch ?object1's ?side when placed on ?support.
(<= (support-for-place ?object1 ?object2 ?support left)
    (true (object-size ?object2 ?width2 ?height2 ?weight2))
    (object-coordinates ?object1 ?x1 ?y1 ?x2 ?y2)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?sy2)
    (- ?x1 ?width2 ?minx)
    (- ?y1 ?height2 ?miny)
    (> ?x1 ?sx1)
    (> ?sx2 ?minx)
    (> ?sy2 ?miny)
    (> ?y2 ?sy2)
	;; manual mod
    (movable ?object2)
    (clear ?object2 top)
	(not (true (member ?anycompound ?object2)))
	(not (is-recursive-member-of-compound ?object2 ?object1))
    (distinct ?object1 ?object2)
    (distinct ?object1 ?support)
    (distinct ?object2 ?support)
	)

(<= (support-for-place ?object1 ?object2 ?support right)
    (true (object-size ?object2 ?width2 ?height2 ?weight2))
    (object-coordinates ?object1 ?x1 ?y1 ?x2 ?y2)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?sy2)
    (+ ?x2 ?width2 ?maxx)
    (- ?y1 ?height2 ?miny)
    (> ?maxx ?sx1)
    (> ?sx2 ?x2)
    (> ?sy2 ?miny)
    (> ?y2 ?sy2)
	;; manual mod
    (movable ?object2)
    (clear ?object2 top)
	(not (true (member ?anycompound ?object2)))
	(not (is-recursive-member-of-compound ?object2 ?object1))
    (distinct ?object1 ?object2)
    (distinct ?object1 ?support)
    (distinct ?object2 ?support)
	)

;;; Calculate the amount of weight supported by ?object
(<= (supported-weight ?object ?weight)
    (primitive-object ?object)
    (leftmost-adjacent-primitive ?object ?leftmost top)
    (supported-weight-recursive ?object ?leftmost ?weight))

(<= (supported-weight ?object 0)
    (primitive-object ?object)
    (clear ?object top))

;;; Calculate the amount of weight supported by ?object from objects
;;; to the right of ?left (including ?left)
(<= (supported-weight-recursive ?object ?left ?weight)
    (leftmost-adjacent-primitive-to-right ?object ?left ?next top)
    (supported-weight-recursive ?object ?next ?wt)
    (weight-contribution ?left ?left-wt)
    (+ ?wt ?left-wt ?weight))

(<= (supported-weight-recursive ?object ?left ?weight)
    (primitive-object ?object)
    (primitive-object ?left)
    (not (adjacent-primitive-to-right ?object ?left top))
    (weight-contribution ?left ?weight)
	;; manual mod
	(adjacent ?object ?left top)
	)

;;; Determine if ?object1 is taller than ?object2
(<= (taller ?object1 ?object2)
    (true (object-size ?object1 ?width1 ?height1 ?weight1))
    (true (object-size ?object2 ?width2 ?height2 ?weight2))
    (> ?height1 ?height2))

;;; Determine whether the members of ?compound form a tower. Requirements
;;; (some requirements tested by tower-recursive):
;;; 1) ?compound is vertically oriented
;;; 2) Each member has no other member object adjacent to its left or right
;;; 3) Each member has one support, which it does not over-hang and is wider
;;; 4) The bottom is as wide as the entire compound
(<= (tower ?compound)
    (object-orientation ?compound vertical)
    (true (member ?compound ?top))
    (object-coordinates ?compound ?x11 ?y11 ?x12 ?y2)
    (object-coordinates ?top ?x21 ?y21 ?x22 ?y2)
    (tower-recursive ?compound ?top))

;; bottom
(<= (tower-recursive ?compound ?top)
    (true (member ?compound ?top))
    (object-coordinates ?compound ?x1 ?y1 ?x2 ?y12)
    (object-coordinates ?top ?x1 ?y1 ?x2 ?y22))

;; in the middle
(<= (tower-recursive ?compound ?top)
    (true (member ?compound ?support))
    (adjacent ?top ?support bottom)
    (not (adjacent-to-any-member-object ?compound ?top left))
    (not (adjacent-to-any-member-object ?compound ?top right))
    (object-coordinates ?top ?x11 ?y11 ?x12 ?y12)
    (object-coordinates ?support ?x21 ?y21 ?x22 ?y22)
    (>= ?x11 ?x21)
    (>= ?x22 ?x12)
    (true (object-size ?top ?top-width ?top-height ?top-weight))
    (true (object-size ?support ?sup-width ?sup-height ?sup-weight))
    (> ?sup-width ?top-width)
	;; manual add
	(true (member ?compound ?top))
	;; need this ??? supposed to
	(tower-recursive ?compound ?support)
	)

;;; Determine whether ?object is unsupported (nothing below it). This
;;; ignores objects of type GROUND, which are usually not supported.
(<= (unsupported ?object)
    (true (object ?object ?type))
    (distinct ?type ground)
    (not (adjacent-to-any-object ?object bottom))
	)

;;; Calculate the amount of weight that ?object contributes to each 
;;; object below it
(<= (weight-contribution ?object ?weight)
    (weight-of-stack ?object ?stack-wt)
    (adjacent-primitive-count ?object bottom ?number)
    ;; manual mod
	;;(/ ?stack-wt ?number ?temp)
    ;;(round ?temp ?weight))
	(/ ?stack-wt ?number ?weight)
	)

;;; Calculate the total weight that ?object exerts collectively 
;;; on the objects below it
(<= (weight-of-stack ?object ?weight)
    (true (object-size ?object ?obj-wid ?obj-ht ?obj-wt))
    (supported-weight ?object ?supported-wt)
    (+ ?obj-wt ?supported-wt ?weight))

;;; Determine if ?object1 is wider than ?object2
(<= (wider ?object1 ?object2)
    (true (object-size ?object1 ?width1 ?height1 ?weight1))
    (true (object-size ?object2 ?width2 ?height2 ?weight2))
    (> ?width1 ?width2)
	;; manual mod
    (adjacent ?object1 ?object2 ?side)
    (distinct ?side left)
    (distinct ?side right)
	)

;;; ---------------------------------------------------------------------------
;;; LEGAL AXIOMS

;;; Add ?object to ?compound.
(<= (legal agent (add-to-compound ?compound ?object))
    (can-add-to-compound ?compound ?object))

;;; Brace joint between ?object1 and ?object2 with ?brace-type.
(<= (legal agent (brace ?object1 ?object2 ?brace-type))
    (can-brace ?object1 ?object2 ?brace-type))

;;; Move ?object one cell in the specified direnction
(<= (legal agent (nudge ?object ?side))
    (can-nudge ?object ?side))

;;; Move ?object2 adjacent to (touching) ?object1's ?side.
(<= (legal agent (place-adjacent ?object1 ?object2 ?side))
    (can-place-adjacent ?object1 ?object2 ?side))

;;; Reinforce ?object with ?reinforcement-type
(<= (legal agent (reinforce ?object ?reinforcement-type))
    (can-reinforce ?object ?reinforcement-type))

;;; Rotate a primitive object.
(<= (legal agent (rotate ?object))
    (can-rotate ?object))


;;; ---------------------------------------------------------------------------
;;; NEXT AXIOMS

;;; Add object to compound: 
;;; 1) If ?compound did not previously exist, declare new object
;;; 2) Declare object membership in compound
;;; 3) If ?compound did not previously exist, declare new object location
;;; 4) If ?compound did previously exist, update compound locataion
;;; 5) If ?compound did not previously exist, declare new object size
;;; 6) If ?compound did previously exist, update compound size
;;; 7) If ?compound did not previously exist, update the current identifier
(<= (next (object ?compound compound))
    (does agent (add-to-compound ?compound ?object))
    (true (current-identifier ?compound)))

(<= (next (member ?compound ?object))
    (does agent (add-to-compound ?compound ?object)))

(<= (next (object-location ?compound ?x ?y))
    (does agent (add-to-compound ?compound ?object))
    (true (current-identifier ?compound))
    (true (object-location ?object ?x ?y)))

(<= (next (object-location ?compound ?x ?y))
    (does agent (add-to-compound ?compound ?object))
    (true (object ?compound compound))
    (coordinates-after-add ?compound ?object ?x ?y ?x2 ?y2))

(<= (next (object-size ?compound ?width ?height ?weight))
    (does agent (add-to-compound ?compound ?object))
    (true (current-identifier ?compound))
    (true (object-size ?object ?width ?height ?weight)))

(<= (next (object-size ?compound ?width ?height ?weight))
    (does agent (add-to-compound ?compound ?object))
    (coordinates-after-add ?compound ?object ?x1 ?y1 ?x2 ?y2)    
    (true (object-size ?compound ?old-width ?old-height ?old-weight))
    (true (object-size ?object ?obj-width ?obj-height ?obj-weight))
    (- ?x2 ?x1 ?width)
    (- ?y2 ?y1 ?height)
    (+ ?old-weight ?obj-weight ?weight))

(<= (next (current-identifier ?id))
    (does agent (add-to-compound ?compound ?object))
    (true (current-identifier ?compound))
    (next-identifier ?compound ?id))

;;; Brace the joint between two objects:
;;; 1) Declare the brace
;;; 2) Update compound weight for every compound of which both objects 
;;;    are a recursive member.
;;; 3) Update the primitive weight for ?object1
;;; 4) Update the primitive weight for ?object1
;;; 5) Reduce count of ?brace-type by one
(<= (next (braced ?object1 ?object2 ?brace-type))
    (does agent (brace ?object1 ?object2 ?brace-type)))

(<= (next (object-size ?compound ?width ?height ?weight))
    (does agent (brace ?object1 ?object2 ?brace-type))
    (is-recursive-member-of-compound ?compound ?object1)
    (is-recursive-member-of-compound ?compound ?object2)
    (true (object-size ?compound ?width ?height ?c-weight))
    (true (object ?object1 ?obj-type))
    (brace-properties ?brace-type ?b-strength ?b-weight)
    (* ?b-weight 2 ?double-bwt)
    (+ ?c-weight ?double-bwt ?weight))

(<= (next (object-size ?object1 ?width ?height ?weight))
    (does agent (brace ?object1 ?object2 ?brace-type))
    (true (object-size ?object1 ?width ?height ?obj-weight))
    (brace-properties ?brace-type ?b-strength ?b-weight)
    (+ ?obj-weight ?b-weight ?weight))

(<= (next (object-size ?object2 ?width ?height ?weight))
    (does agent (brace ?object1 ?object2 ?brace-type))
    (true (object-size ?object2 ?width ?height ?obj-weight))
    (brace-properties ?brace-type ?b-strength ?b-weight)
    (+ ?obj-weight ?b-weight ?weight))

(<= (next (count ?brace-type ?new-count))
    (does agent (brace ?object1 ?object2 ?brace-type))
    (true (count ?brace-type ?old-count))
    (- ?old-count 1 ?new-count))

;;; Move an object one cell in a given direction.
;;; 1) Update the location of the nudged object (primitive or compound)
;;; 2) If object is compound, then update all nested members
(<= (next (object-location ?object ?x ?y))
    (does agent (nudge ?object ?side))
    (coordinates-after-nudge ?object ?side ?x ?y ?x2 ?y2)
	)

;; manual mod, coordinates-after-nudge is only computed for outermost compound
;;(<= (next (object-location ?object ?x ?y))
;;    (does agent (nudge ?compound ?side))
;;    (true (object ?compound compound))
;;    (is-recursive-member-of-compound ?compound ?object)
;;    (coordinates-after-nudge ?object ?side ?x ?y ?x2 ?y2))

(<= (next (object-location ?object ?x ?y))
    (does agent (nudge ?compound left))
    (true (object ?compound compound))
    (is-recursive-member-of-compound ?compound ?object)
	(true (object-location ?object ?old-x ?y))
	(- ?old-x 1 ?x)
	)
(<= (next (object-location ?object ?x ?y))
    (does agent (nudge ?compound right))
    (true (object ?compound compound))
    (is-recursive-member-of-compound ?compound ?object)
	(true (object-location ?object ?old-x ?y))
	(+ ?old-x 1 ?x)
	)

;;; Move one object adjacent to another on a specified side:
;;; 1) Update the location of moved object (primitive or compound)
;;; 2) If object is compound, then update all nested members
(<= (next (object-location ?object2 ?x ?y))
    (does agent (place-adjacent ?object1 ?object2 ?side))
    (coordinates-after-place ?object1 ?object2 ?side ?x ?y ?x2 ?y2)
    (not (region-intersected-by-object ?object2 ?x ?y ?x2 ?y2)))

(<= (next (object-location ?member ?x ?y))
    (does agent (place-adjacent ?object1 ?object2 ?side))
    (true (object ?object2 compound))
    (distance-object-moved ?object2 ?dist-x ?dist-y)
    (is-recursive-member-of-compound ?object2 ?member)
    (true (object-location ?member ?old-x ?old-y))
    (+ ?old-x ?dist-x ?x)
    (+ ?old-y ?dist-y ?y))

;;; Reinforce primitive ?object with ?material: 
;;; 1) Declare reinforcement
;;; 2) Update object size (weight) of primitive ?object
;;; 3) Update object size (weight) of all compounds of which ?object 
;;;    is a recursive member.
;;; 4) Reduce count of ?reinforcement-type by one
(<= (next (reinforced ?object ?reinforcement-type))
    (does agent (reinforce ?object ?reinforcement-type)))

(<= (next (object-size ?object ?width ?height ?weight))
    (does agent (reinforce ?object ?reinforcement-type))
    (true (object-size ?object ?width ?height ?obj-weight))
    (reinforcement-properties ?reinforcement-type ?r-strength ?r-weight)
    (+ ?obj-weight ?r-weight ?weight))

(<= (next (object-size ?compound ?width ?height ?weight))
    (does agent (reinforce ?object ?reinforcement-type))
    (true (object-size ?compound ?width ?height ?comp-weight))
    (is-recursive-member-of-compound ?compound ?object)
    (reinforcement-properties ?reinforcement-type ?r-strength ?r-weight)
    (+ ?comp-weight ?r-weight ?weight))

(<= (next (count ?reinforcement-type ?new-count))
    (does agent (reinforce ?object ?reinforcement-type))
    (true (count ?reinforcement-type ?old-count))
    (- ?old-count 1 ?new-count))

;;; Rotate a primitive object (switches width and height)
(<= (next (object-size ?object ?height ?width ?weight))
    (does agent (rotate ?object))
    (true (object-size ?object ?width ?height ?weight)))

;;; Advance time one step
(<= (next (time ?t))
    (true (time ?oldt))
    (+ ?oldt 1 ?t))


;;; ---------------------------------------------------------------------------
;;; FRAME AXIOMS (NEXT)

;;; Carry all brace declarations into next state
(<= (next (braced ?object1 ?object2 ?material))
    (true (braced ?object1 ?object2 ?material)))

;;; Carry the brace count forward if the given brace-type was not used.
(<= (next (count ?brace-type ?count))
    (true (count ?brace-type ?count))
    (brace-type ?brace-type ?material)
    (not (action-brace agent ?brace-type)))

;;; Carry the reinforcement count forward if the given reinforcement-type
;;; was not used.
(<= (next (count ?reinforcement-type ?count))
    (true (count ?reinforcement-type ?count))
    (reinforcement-type ?reinforcement-type ?material)
    (not (action-reinforce agent ?reinforcement-type)))

;;; Carry current identifier into next state if the agent does not
;;; make a new compound in the current time step
(<= (next (current-identifier ?id))
    (true (current-identifier ?id))
    (not (action-add-to-compound agent ?id)))

;;; Carry all membership declarations into next state
(<= (next (member ?compound ?object))
    (true (member ?compound ?object)))

;;; All object declarations always get carried into the next state.
(<= (next (object ?object ?type))
    (true (object ?object ?type)))

;;; Most (object-location ...) declarations get carried into the next state,
;;; but some get modified.  Cases:
;;; 1) ?object is compound, nothing was added, and was not moved directly 
;;;    or indirectly (via larger compound)
;;; 2) ?object is primitive, and was not moved directly or indirectly 
;;;    (via compound)
(<= (next (object-location ?object ?x ?y))
    (true (object ?object compound))
    (true (object-location ?object ?x ?y))
    (not (action-add-to-compound agent ?object))
    (not (action-nudge agent ?object))
    (not (action-place-adjacent agent ?object)))

(<= (next (object-location ?object ?x ?y))
    (true (object ?object ?type))
    (true (object-location ?object ?x ?y))
    (material-type ?type ?strength)
    (not (action-nudge agent ?object))
    (not (action-place-adjacent agent ?object)))

;;; Most (object-size ...) declarations get carried into the next state,
;;; but some get modified.  Cases:
;;; 1) ?object is compound, has no subcomponent that was braced or reinforced,
;;;    and no new object was added
;;; 2) ?object is primitive, was not braced or reinforced, and was not rotated
(<= (next (object-size ?object ?width ?height ?weight))
    (true (object ?object compound))
    (true (object-size ?object ?width ?height ?weight))
    (not (action-add-to-compound agent ?object))
    (not (action-brace agent ?object))
    (not (action-reinforce agent ?object)))

(<= (next (object-size ?object ?width ?height ?weight))
    (true (object ?object ?type))
    (true (object-size ?object ?width ?height ?weight))
    (distinct ?type compound)
    (not (action-brace agent ?object))
    (not (action-reinforce agent ?object))
    (not (action-rotate agent ?object)))

;;; Carry all reinforcement declarations into next state
(<= (next (reinforced ?object ?material))
    (true (reinforced ?object ?material)))
