;;;; -*-Lisp-*-
;;;; **************************************************************************
;;;; * mini-Build Game: Core Rules                                            *
;;;; * Transfer Learning in Integrated Cognitive Systems Project              *
;;;; *                                                                        *
;;;; * David J. Stracuzzi                                                     *
;;;; * Arizona State University                                               *
;;;; * Completed: August 13, 2007                                             *
;;;; * Revised:   August 16, 2007                                             *
;;;; **************************************************************************
;;;;
;;;; Basic Assumptions and Rules:
;;;; 1)  Environment is two dimensional, with origin in lower left corner.
;;;;
;;;; 2)  All objects are rectangular or square.
;;;;
;;;; 3)  The weight and strength (ability to support weight) of an object
;;;;     depends on its size and material. To assure consistancy, the initial
;;;;     weight of an object should be set by selecting a "weight factor" for
;;;;     for each material, and then multiplying that factor by the area of
;;;;     the object.  Likewise, the strength of an object is determined by
;;;;     multiplying the specified "strength factor" by the width of the
;;;;     object.
;;;;
;;;; 4)  Reinforcements increase object weight additively, and increase object
;;;;     strength multiplicitively. An object may be reinforced only once.
;;;;     There may be multiple types of reinforcement available to a given
;;;;     material.
;;;;
;;;; 5)  Reinforcements are not manipulable objects. The agent has a fixed
;;;;     number of reinforcements available at the start of the game.
;;;;
;;;; 6)  Any object bearing weight > strength causes collapse.
;;;;
;;;; 7)  The weight of an object, P1, along with the weights of the objects 
;;;;     supported by P1, is distributed evenly among the objects that support 
;;;;     P1.
;;;;
;;;; 8)  Any object not directly supported by another object will cause 
;;;;     collapse.
;;;;
;;;; 9)  A tower is defined as any vertical stack of two or more non-ground
;;;;     objects, and is identified by the top-most object in the stack.
;;;;     The height of a tower is defined as the y-coordinate of the top-most
;;;;     object.
;;;;
;;;; Actions:
;;;; * (place-adjacent ?object1 ?object2 ?side)
;;;;     Effects:
;;;;     * ?object2 is moved such that it touches ?object1's ?side.
;;;;       If ?side=top, then ?object2's left side is aligned with the
;;;;       left side of ?object1.  If ?side=left or right, then the lowest
;;;;       available support is selected such that ?object1 and ?object2
;;;;       touch (failure if none exists). ?side=bottom is not allowed.
;;;;     Requirements:
;;;;     * Nothing is stacked on top of ?object2
;;;;     * ?object2 must weigh less than "max-movable-weight"
;;;;     * There is some object available to support ?object2
;;;;     * ?object2's new location is different from the old
;;;;     * ?object2 does not intersect any other object once moved
;;;;
;;;; * (reinforce ?object ?reinforcement-type)
;;;;     Effects:
;;;;     * ?object is reinforced with ?reinforcement-type
;;;;     * ?object's weight increases by weight of ?reinforcement-type
;;;;     * The weight of any compound above ?object in the hierarchy
;;;;       increases by the weight of ?reinforcement-type
;;;;     * ?object's strength is multiplied by that of ?reinforcement-type
;;;;     Requirements:
;;;;     * ?reinforcement-type is an appropriate material for ?object
;;;;     * ?object has not already been reinforced
;;;;     * ?reinforcement-type has count greater than 0
;;;;
;;;; Persistants:
;;;;   (count ?reinforcement-type ?count)
;;;;   (object-dimensions ?object ?width ?height)
;;;;   (object-load ?object ?load)
;;;;   (object-location ?object ?x ?y)
;;;;   (object-strength ?object ?strength)
;;;;   (object-type ?object ?type)
;;;;   (object-weight ?object ?weight)
;;;;   (reinforced ?object ?reinforcement-type)
;;;;   (time ?t)
;;;;   (tower ?object ?height)


;;; ---------------------------------------------------------------------------
;;; FACTS: Domain facts. These remain fixed across all game instances.

(role agent)

(side bottom)
(side left)
(side right)
(side top)


;;; ---------------------------------------------------------------------------
;;; ENTAILMENTS: Relations that must be logically derived from persistants.

;;; Compute whether two objects are adjacent (touching) on ?object1's ?side.
;;; Cases:
;;; 1) ?object1 and ?object2 both primitive, ?object2 below ?object1.
;;; 2) ?object1 and ?object2 both primitive, ?object2 left of ?object1.
;;; 3) ?object1 and ?object2 both primitive, ?object2 right of ?object1.
;;; 4) ?object1 and ?object2 both primitive, ?object2 on top of ?object1.

(<= (adjacent ?object1 ?object2 bottom)
    (object-coordinates ?object1 ?x11 ?shared ?x12 ?y12)
    (object-coordinates ?object2 ?x21 ?y21 ?x22 ?shared)
    (> ?x12 ?x21)
    (> ?x22 ?x11))

(<= (adjacent ?object1 ?object2 left)
    (object-coordinates ?object1 ?shared ?y11 ?x12 ?y12)
    (object-coordinates ?object2 ?x21 ?y21 ?shared ?y22)
    (> ?y12 ?y21)
    (> ?y22 ?y11))

(<= (adjacent ?object1 ?object2 right)
    (object-coordinates ?object1 ?x11 ?y11 ?shared ?y12)
    (object-coordinates ?object2 ?shared ?y21 ?x22 ?y22)
    (> ?y12 ?y21)
    (> ?y22 ?y11))

(<= (adjacent ?object1 ?object2 top)
    (object-coordinates ?object1 ?x11 ?y11 ?x12 ?shared)
    (object-coordinates ?object2 ?x21 ?shared ?x22 ?y22)
    (> ?x12 ?x21)
    (> ?x22 ?x11))

;;; Determine the number of objects adjacent to ?object's ?side.
(<= (adjacent-object-count ?object ?side ?number)
    (leftmost-adjacent-object ?object ?leftmost ?side)
    (adjacent-object-count-recursive ?object ?leftmost ?side ?number))

;;; Determine the number of objects adjacent to ?object's ?side
;;; that are located right of ?left (including ?left).
(<= (adjacent-object-count-recursive ?object ?left ?side ?number)
    (leftmost-adjacent-object-to-right ?object ?left ?next ?side)
    (adjacent-object-count-recursive ?object ?next ?side ?n)
    (+ ?n 1 ?number)
    ;; manual mod
	(distinct ?object ?left)
	(adjacent ?object ?left bottom)
    )

;;(<= (adjacent-object-count-recursive ?object ?left ?side 1)
(<= (adjacent-object-count-recursive ?object ?left bottom 1)
    (true (object-type ?object ?obj-type))
    (true (object-type ?left ?left-type))
    ;; manual mod
    ;;(side ?side)
    ;;(not (adjacent-object-to-right ?object ?left ?side))
    (not (adjacent-object-to-right ?object ?left bottom))
    ;; manual mod
    (distinct ?object ?left)
    (adjacent ?object ?left bottom)
    )

;;; Determine if any object is adjacent to ?object's ?side to right of ?left
(<= (adjacent-object-to-right ?object ?left ?side)
    (adjacent ?object ?left ?side)
    (adjacent ?object ?right ?side)
    (left-of-object ?right ?left))

;;; Compute whether any object is adjacent to ?object1's ?side
(<= (adjacent-to-any-object ?object1 ?side)
    (true (object-type ?object1 ?type1))
    (true (object-type ?object2 ?type2))
    (adjacent ?object1 ?object2 ?side))

;;; Agent did action predicates: these are true of the agent took the specified
;;; action on its last turn.

(<= (agent-did-place-action ?agent ?object2)
    (does ?agent (place-adjacent ?object1 ?object2 ?side)))

(<= (agent-did-reinforce-action ?agent ?object)
    (does ?agent (reinforce ?object ?reinforcement-type)))

(<= (agent-did-reinforce-action ?agent ?reinforcement-type)
    (does ?agent (reinforce ?object ?reinforcement-type)))

;;; Determine if ?object is clear of other objects on ?side 
(<= (clear ?object ?side)
    (true (object-type ?object ?type))
    (side ?side)
    (not (adjacent-to-any-object ?object ?side)))

;;; Determine if any object causes collapse by being
;;; 1) crushed, or
;;; 2) unsupported
(<= (collapsed ?object)
    (true (object-load ?object ?load))
    (true (object-strength ?object ?strength))
    (> ?load ?strength))
    
(<= (collapsed ?object)
    (true (object-type ?object ?type))
    (distinct ?type ground)
    (not (adjacent-to-any-object ?object bottom)))

;;; Determines potential coordinates for ?object2 on ?object1's ?side. Cases:
;;; 1) ?side = left
;;; 2) ?side = right
;;; 3) ?side = top (includes test for ?object1 is clear)
(<= (coordinates-after-place ?object1 ?object2 left ?x1 ?y1 ?x2 ?y2)
    (true (object-dimensions ?object2 ?width2 ?height2))
    (true (object-location ?object1 ?x2 ?oy1))
    (support-for-place ?object1 ?object2 ?support left)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?y1)
    (- ?x2 ?width2 ?x1)
    (+ ?y1 ?height2 ?y2))

(<= (coordinates-after-place ?object1 ?object2 right ?x1 ?y1 ?x2 ?y2)
    (support-for-place ?object1 ?object2 ?support right)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?y1)
    (object-coordinates ?object1 ?ox1 ?oy1 ?x1 ?oy2)
    (true (object-dimensions ?object2 ?width2 ?height2))
    (+ ?x1 ?width2 ?x2)
    (+ ?y1 ?height2 ?y2))

(<= (coordinates-after-place ?object1 ?object2 top ?x21 ?y21 ?x22 ?y22)
    (true (object-dimensions ?object2 ?width2 ?height2))
    (object-coordinates ?object1 ?x21 ?y11 ?x12 ?y21)
    (+ ?x21 ?width2 ?x22)
    (+ ?y21 ?height2 ?y22))

;;; Determine if object ?left is to the left of ?object
(<= (left-of-object ?object ?left)
    (true (object-location ?object ?ox1 ?oy1))
    (object-coordinates ?left ?lx1 ?ly1 ?lx2 ?ly2)
    (>= ?ox1 ?lx2))

;;; Determine if there exists some object adjacent to ?object1's ?side 
;;; that is further left than ?object2
(<= (left-further-adjacent-object ?object1 ?object2 ?side)
    (adjacent ?object1 ?other ?side)
    (true (object-location ?object2 ?obj2-x ?obj2-y))
    (true (object-location ?other ?other-x ?other-y))
    (> ?obj2-x ?other-x)
    ;;manual mod - important !!!
    (adjacent ?object1 ?object2 ?side)
    ;; constraint coming from bottom in soar, change all ?side to top
    ;; leftmost-adjacent-primitive only take top
    (distinct ?side left)
    (distinct ?side right)
    )

;;; Determine if there exists some object adjacent to ?object1's ?side 
;;; that is left of ?right and right of ?object2
(<= (left-further-adjacent-object-to-right ?object1 ?object2 ?right ?side)
    (adjacent ?object1 ?other ?side)
    (left-of-object ?other ?object2)
    (left-of-object ?right ?other)
    ;;manual mod - important !!!
    (adjacent ?object1 ?object2 ?side)
    ;; constraint coming from bottom in soar, change all ?side to top
    (distinct ?side left)
    (distinct ?side right)
    (distinct ?object2 ?other)
    )

;;; Determine if ?leftmost is the leftmost object adjacent to ?object's ?side.
(<= (leftmost-adjacent-object ?object ?leftmost ?side)
    (adjacent ?object ?leftmost ?side)
    (not (left-further-adjacent-object ?object ?leftmost ?side))
    ;; manual mod
    ;; constraint coming from bottom in soar, change all ?side to top
;; weight contribution us bottom
;; supported-weight use top
(distinct ?side left)
(distinct ?side right)
    )

;;; Determine if ?leftmost is adjacent to ?object1's ?side and is
;;; the leftmost object to the right of ?object2.
(<= (leftmost-adjacent-object-to-right ?object1 ?object2 ?leftmost ?side)
    (adjacent ?object1 ?object2 ?side)
    (adjacent ?object1 ?leftmost ?side)
    (left-of-object ?leftmost ?object2)
    (not (left-further-adjacent-object-to-right ?object1 ?object2 
						?leftmost ?side))
;; manual mod
    ;; constraint coming from bottom in soar, change all ?side to top
;; weight contribution us bottom
;; supported-weight use top
(distinct ?side left)
(distinct ?side right)
				)

;;; Determine if an object is movable (weight < WMAX).
(<= (movable ?object)
    (true (object-weight ?object ?weight))
    (max-movable-weight ?max)
    (> ?max ?weight))

;;; Determine the location of the lower-left and upper-right corners of ?object
(<= (object-coordinates ?object ?x1 ?y1 ?x2 ?y2)
    (true (object-dimensions ?object ?width ?height))
    (true (object-location ?object ?x1 ?y1))
    (+ ?x1 ?width ?x2)
    (+ ?y1 ?height ?y2))

;;; Compute whether ?object intersects the region (?x11 ?y11 ?x12 ?y12).
(<= (object-intersects-region ?object ?x11 ?y11 ?x12 ?y12)
	;;manual add
	(coordinates-after-place ?any-object1 ?any-object2 ?side ?x11 ?y11 ?x12 ?y12)
	;;manual add
    (object-coordinates ?object ?x21 ?y21 ?x22 ?y22)
    (> ?x22 ?x11)
    (> ?x12 ?x21)
    (> ?y22 ?y11)
    (> ?y12 ?y21))

;;; Determine if any object ?intersecting intersects the given 
;;; rectangular region. ?intersecting must be different from ?object
(<= (object-new-region-intersected ?object ?x11 ?y11 ?x12 ?y12)
    (true (object-type ?object ?type))
    (object-intersects-region ?intersecting ?x11 ?y11 ?x12 ?y12)
    (distinct ?object ?intersecting)
    ;; manual mode
    ;; object is the intended moving object, so ...
    ;; this significantly speeds up and reduce partial match memory
    (clear ?object top)
    (distinct ?type ground)
    )

;;; Determine if ?object is a primitive that has been reinforced.
(<= (reinforced-object ?object)
    (true (reinforced ?object ?reinforcement)))

;;; Determine if any ?object is crushed or unsupported
(<= structural-failure
    (collapsed ?object))

;;; Determine if ?object2 will touch ?object1's ?side when placed on ?support.
(<= (support-for-place ?object1 ?object2 ?support left)
    (true (object-dimensions ?object2 ?width2 ?height2))
    (object-coordinates ?object1 ?x1 ?y1 ?x2 ?y2)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?sy2)
    (- ?x1 ?width2 ?minx)
    (- ?y1 ?height2 ?miny)
    (> ?x1 ?sx1)
    (> ?sx2 ?minx)
    (> ?sy2 ?miny)
    (> ?y2 ?sy2)
    ;; manual add
    (movable ?object2)
    (clear ?object2 top)
    (distinct ?object1 ?object2)
    (distinct ?object1 ?support)
    (distinct ?object2 ?support)
    ;; manual mod - avoid duplicate supports
    (not (same-support-to-right ?object1 ?object2 ?support left))
    )

(<= (support-for-place ?object1 ?object2 ?support right)
    (true (object-dimensions ?object2 ?width2 ?height2))
    (object-coordinates ?object1 ?x1 ?y1 ?x2 ?y2)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?sy2)
    (+ ?x2 ?width2 ?maxx)
    (- ?y1 ?height2 ?miny)
    (> ?maxx ?sx1)
    (> ?sx2 ?x2)
    (> ?sy2 ?miny)
    (> ?y2 ?sy2)
    ;; manual add
    (movable ?object2)
    (clear ?object2 top)
    (distinct ?object1 ?object2)
    (distinct ?object1 ?support)
    (distinct ?object2 ?support)
    ;; manual mod - avoid duplicate supports
    (not (same-support-to-right ?object1 ?object2 ?support right))
    )

;; manual mod
;;;; the following 3 rules are important to make soar run
;; leftmost support for the same height - avoid duplicate, which may explode elaboration
;; Soar duplicate structure causes trouble in this case

(<= (redundant-support-for-place ?object1 ?object2 ?support left)
    (true (object-dimensions ?object2 ?width2 ?height2))
    (object-coordinates ?object1 ?x1 ?y1 ?x2 ?y2)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?sy2)
    (- ?x1 ?width2 ?minx)
    (- ?y1 ?height2 ?miny)
    (> ?x1 ?sx1)
    (> ?sx2 ?minx)
    (> ?sy2 ?miny)
    (> ?y2 ?sy2)
    ;; manual add
    (movable ?object2)
    (clear ?object2 top)
    (distinct ?object1 ?object2)
    (distinct ?object1 ?support)
    (distinct ?object2 ?support)
    )

(<= (redundant-support-for-place ?object1 ?object2 ?support right)
    (true (object-dimensions ?object2 ?width2 ?height2))
    (object-coordinates ?object1 ?x1 ?y1 ?x2 ?y2)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?sy2)
    (+ ?x2 ?width2 ?maxx)
    (- ?y1 ?height2 ?miny)
    (> ?maxx ?sx1)
    (> ?sx2 ?x2)
    (> ?sy2 ?miny)
    (> ?y2 ?sy2)
    ;; manual add
    (movable ?object2)
    (clear ?object2 top)
    (distinct ?object1 ?object2)
    (distinct ?object1 ?support)
    (distinct ?object2 ?support)
    )
    
(<= (same-support-to-right ?object1 ?object2 ?support ?side) ;; side = left/right
	(redundant-support-for-place ?object1 ?object2 ?support ?side)
	(redundant-support-for-place ?object1 ?object2 ?another-support ?side)
	(distinct ?support ?another-support)
	(object-coordinates ?support ?sx1 ?sy1 ?sx2 ?sy2)
	(object-coordinates ?another-support ?asx1 ?asy1 ?asx2 ?sy2)
	(< ?sx1 ?asx1)
)
;;;; the above 3 rules are important to make soar run

;;; Calculate the amount of weight supported by ?object
(<= (supported-weight ?object 0)
    (clear ?object top))

(<= (supported-weight ?object ?weight)
    (leftmost-adjacent-object ?object ?leftmost top)
    (supported-weight-recursive ?object ?leftmost ?weight))

;;; Calculate the amount of weight (load) supported by ?object from objects
;;; to the right of ?left (including ?left)
(<= (supported-weight-recursive ?object ?left ?weight)
    (leftmost-adjacent-object-to-right ?object ?left ?next top)
    (supported-weight-recursive ?object ?next ?wt)
    (weight-contribution ?left ?left-wt)
    (+ ?wt ?left-wt ?weight))

(<= (supported-weight-recursive ?object ?left ?weight)
    (true (object-type ?object ?obj-type))
    (true (object-type ?left ?left-type))
    (not (adjacent-object-to-right ?object ?left top))
    (weight-contribution ?left ?weight)
    ;; manual mod
	(adjacent ?object ?left top)
    )

;;; Calculate the amount of weight that ?object contributes to each 
;;; object below it
(<= (weight-contribution ?object ?weight)
    (weight-of-stack ?object ?stack-wt)
    (adjacent-object-count ?object bottom ?number)
    ;; manual mod
    ;;(/ ?stack-wt ?number ?temp)
    ;;(round ?temp ?weight))
    (/ ?stack-wt ?number ?weight))

;;; Calculate the total weight that ?object exerts collectively 
;;; on the objects below it
(<= (weight-of-stack ?object ?weight)
    (true (object-weight ?object ?obj-wt))
    (supported-weight ?object ?supported-wt)
    (+ ?obj-wt ?supported-wt ?weight))


;;; ---------------------------------------------------------------------------
;;; LEGAL AXIOMS

;;; Move ?object2 adjacent to (touching) ?object1's ?side. Legal if:
;;; 1) ?object1 and ?object2 are different
;;; 2) nothing is stacked on top of ?object2
;;; 3) ?object2 weighs less than WMAX
;;; 4) there is some object available to support ?object2
;;; 5) ?object2's new location is different from the old location
;;; 6) ?object2 does not intersect any other object once moved
(<= (legal agent (place-adjacent ?object1 ?object2 ?side))
    (true (object-type ?object1 ?type1))
    (true (object-type ?object2 ?type2))
    (distinct ?object1 ?object2)
    (clear ?object2 top)
    (movable ?object2)
    (coordinates-after-place ?object1 ?object2 ?side ?x1 ?y1 ?x2 ?y2)
    (not (object-coordinates ?object2 ?x1 ?y1 ?x2 ?y2))
    (not (object-new-region-intersected ?object2 ?x1 ?y1 ?x2 ?y2)))

;;; Reinforce ?object with ?reinforcement. Legal if:
;;; 1) ?reinforcement-type can be used on ?object
;;; 2) ?object has not already been reinforced
;;; 3) There is at least 1 ?reinforcement-type available
(<= (legal agent (reinforce ?object ?reinforcement-type))
    (true (count ?reinforcement-type ?count))
    (true (object-type ?object ?object-type))
    (reinforcement-type ?reinforcement-type ?object-type)
    (not (reinforced-object ?object))
    (> ?count 0))

;;; ---------------------------------------------------------------------------
;;; NEXT AXIOMS

;;; Move ?object2 to be adjacent to ?object1's ?side
;;; 1) Update location of ?object2
;;; 2) Update tower height of ?object2
(<= (next (object-location ?object2 ?x ?y))
    (does agent (place-adjacent ?object1 ?object2 ?side))
    (coordinates-after-place ?object1 ?object2 ?side ?x ?y ?x2 ?y2)
    (not (object-new-region-intersected ?object2 ?x ?y ?x2 ?y2)))

(<= (next (tower ?object2 ?height))
    (does agent (place-adjacent ?object1 ?object2 ?side))
    (coordinates-after-place ?object1 ?object2 ?side ?x1 ?y1 ?x2 ?height)
    (not (object-new-region-intersected ?object2 ?x1 ?y1 ?x2 ?height))
    (true (object-type ?support ?support-type))
    (distinct ?support-type ground)
    (object-coordinates ?support ?sx1 ?sy1 ?sx2 ?y1)
    (> ?sx2 ?x1)
    (> ?x2 ?sx1))

;;; Reinforce ?object with ?material: 
;;; 1) Declare reinforcement
;;; 2) Update strength of ?object
;;; 3) Update weight of ?object
;;; 4) Reduce count of ?reinforcement-type by one
(<= (next (reinforced ?object ?reinforcement-type))
    (does agent (reinforce ?object ?reinforcement-type)))

(<= (next (object-strength ?object ?strength))
    (does agent (reinforce ?object ?reinforcement-type))
    (true (object-strength ?object ?obj-strength))
    (reinforcement-properties ?reinforcement-type ?r-strength ?r-weight)
    (* ?obj-strength ?r-strength ?strength))

(<= (next (object-weight ?object ?weight))
    (does agent (reinforce ?object ?reinforcement-type))
    (true (object-weight ?object ?obj-weight))
    (reinforcement-properties ?reinforcement-type ?r-strength ?r-weight)
    (+ ?obj-weight ?r-weight ?weight))

(<= (next (count ?reinforcement-type ?new-count))
    (does agent (reinforce ?object ?reinforcement-type))
    (true (count ?reinforcement-type ?old-count))
    (- ?old-count 1 ?new-count))

;;; Calculate object-load anew on every time step.  Could be done
;;; incrementally, but for now, recompute to keep things simple.
(<= (next (object-load ?object ?load))
    (supported-weight ?object ?load))

;;; Advance time one step
(<= (next (time ?t))
    (true (time ?oldt))
    (+ ?oldt 1 ?t))

;;; ---------------------------------------------------------------------------
;;; FRAME AXIOMS (NEXT)

;;; Carry forward reinforcement count if ?reinforcement-type not used
(<= (next (count ?reinforcement-type ?count))
    (true (count ?reinforcement-type ?count))
    (not (agent-did-reinforce-action agent ?reinforcement-type)))

;;; Carry forward all object-dimensions declarations
(<= (next (object-dimensions ?object ?width ?height))
    (true (object-dimensions ?object ?width ?height)))

;;; Carry forward object-location declarations if ?object not moved
(<= (next (object-location ?object ?x ?y))
    (true (object-location ?object ?x ?y))
    (not (agent-did-place-action agent ?object)))

;;; Carry forward object-strength declarations if ?object not reinforced
(<= (next (object-strength ?object ?strength))
    (true (object-strength ?object ?strength))
    (not (agent-did-reinforce-action agent ?object)))

;;; Carry forward all object-type declarations
(<= (next (object-type ?object ?type))
    (true (object-type ?object ?type)))

;;; Carry forward object-weight declarations if ?object not reinforced
(<= (next (object-weight ?object ?weight))
    (true (object-weight ?object ?weight))
    (not (agent-did-reinforce-action agent ?object)))

;;; Carry forward all reinforced declarations
(<= (next (reinforced ?object ?reinforcement-type))
    (true (reinforced ?object ?reinforcement-type)))

;;; Carry forward tower heights of all objects that were not moved
(<= (next (tower ?object ?height))
    (true (tower ?object ?height))
    (not (agent-did-place-action agent ?object)))

;;; ---------------------------------------------------------------------------
;;; END mBuild CORE DEFINITIONS
