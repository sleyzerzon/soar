#!/usr/bin/python
# ex: set syntax=python:

from buildbot.changes.svnpoller import SVNPoller
from buildbot.scheduler import Scheduler
from buildbot.process import factory
from buildbot.steps import source, shell
from buildbot.status.mail import MailNotifier
from buildbot.status.html import WebStatus
from buildbot.buildslave import BuildSlave

c = BuildmasterConfig = {}

c['projectName'] = "Soar"
c['projectURL'] = "http://soar.googlecode.com"
c['buildbotURL'] = "http://winter.eecs.umich.edu:8010/"
c['debugPassword'] = "f3EF38s"

c['change_source'] = SVNPoller(svnurl = 'http://soar.googlecode.com/svn', pollinterval = 5*60)

def isTrunk( change ):
	if 'trunk/SoarSuite' in change.asText():
		return True
	return False

def isSmem( change ):
	if 'branches/nlderbin-epmem-smem' in change.asText():
		return True
	return False

s1 = Scheduler(name = 'trunk', 
	branch = None, 
	treeStableTimer = 11*60, 
	builderNames = ['trunk_ubuntu', 'trunk_osx'], 
	fileIsImportant = isTrunk)
s2 = Scheduler(name = 'trunk-noscu', 
	branch = None, 
	treeStableTimer = 11*60, 
	builderNames = ['trunk_noscu_ubuntu', 'trunk_noscu_osx'], 
	fileIsImportant = isTrunk)

c['schedulers'] = [ s1, s2 ]

c['slaves'] = [
	BuildSlave("winterbot", "4Xyplz"),
	BuildSlave("daidalosbot", "4Xyplz"),
]

c['slavePortnum'] = 9989

def steps(compile):
	return [
		source.SVN(mode = 'update', 
			svnurl = 'http://soar.googlecode.com/svn/trunk/SoarSuite'),
		shell.Compile(workdir = "build/Core",
			description = 'cleaning', 
			descriptionDone = 'clean', 
			command = "scons -c"),
		shell.Compile(workdir = "build/Core",
			description = 'building', 
			descriptionDone = 'build', 
			command = compile),
		shell.Test(workdir = "build",
			description = "Tests")
		# TODO: TestJavaSML
	]

ubuntu_env = {
	'PATH': ['build/out/bin', '/usr/local/sbin', '/usr/local/bin', '/usr/sbin', '/usr/bin', '/sbin', '/bin'],
	'PYTHONPATH': ['build/out/lib'],
	'LD_LIBRARY_PATH': ['build/out/lib', '/usr/local/lib'],
	'SOAR_HOME': ['build/out'],
	'JAVA_HOME': ['/usr/lib/jvm/java-6-sun'],
}

osx_env = {
	'PATH': ['build/out/bin', '/usr/local/sbin', '/usr/local/bin', '/usr/sbin', '/usr/bin', '/sbin', '/bin'], 
	'PYTHONPATH': ['build/out/lib'],
	'DYLD_LIBRARY_PATH': ['build/out/lib'],
	'SOAR_HOME': ['build/out'],
	'JAVA_HOME': ['/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home'],
}

f_trunk_ubuntu = factory.BuildFactory()
f_trunk_ubuntu.addSteps(steps("scons"))

f_trunk_noscu_ubuntu = factory.BuildFactory()
f_trunk_noscu_ubuntu.addSteps(steps("scons --no-scu"))

f_trunk_osx = factory.BuildFactory()
f_trunk_osx.addSteps(steps("scons"))

f_trunk_noscu_osx = factory.BuildFactory()
f_trunk_noscu_osx.addSteps(steps("scons --no-scu"))

c['builders'] = [
	{	
		'name': 'trunk_ubuntu', 
		'builddir': 'trunk_ubuntu',
		'slavename': 'winterbot',
		'factory': f_trunk_ubuntu,
		'env': ubuntu_env,
	},
	{	
		'name': 'trunk_noscu_ubuntu', 
		'builddir': 'trunk_noscu_ubuntu',
		'slavename': 'winterbot',
		'factory': f_trunk_noscu_ubuntu,
		'env': ubuntu_env,
	},
	{	
		'name': 'trunk_osx', 
		'builddir': 'trunk_osx',
		'slavename': 'daidalosbot',
		'factory': f_trunk_osx,
		'env': osx_env,
	},
	{	
		'name': 'trunk_noscu_osx', 
		'builddir': 'trunk_noscu_osx',
		'slavename': 'daidalosbot',
		'factory': f_trunk_noscu_osx,
		'env': osx_env,
	},
]

c['status'] = []

c['status'].append(WebStatus(8010))

mn = MailNotifier(mode="problem", 
	fromaddr="soar-buildbot@winter.eecs.umich.edu", 
	sendToInterestedUsers=False, 
	extraRecipients=['soar-commits@googlegroups.com'])
c['status'].append(mn)

