#!/usr/bin/python
# ex: set syntax=python:

from buildbot.changes.svnpoller import SVNPoller
from buildbot.scheduler import Scheduler
from buildbot.process import factory
from buildbot.steps import source, shell
from buildbot.status.mail import MailNotifier
from buildbot.status.html import WebStatus
from buildbot.buildslave import BuildSlave

c = BuildmasterConfig = {}

c['projectName'] = "Soar"
c['projectURL'] = "http://soar.googlecode.com"
c['buildbotURL'] = "http://winter.eecs.umich.edu:8010/"
c['debugPassword'] = "f3EF38s"

c['change_source'] = SVNPoller(svnurl = 'http://soar.googlecode.com/svn', pollinterval = 5*60)

def isTrunk( change ):
	if 'trunk/SoarSuite' in change.asText():
		return True
	return False

s1 = Scheduler(name = 'trunk', 
	branch = None, 
	treeStableTimer = 11*60, 
	builderNames = ['trunk_ubuntu', 'trunk_osx', 'trunk_win', 'trunk_noscu_ubuntu', 'trunk_noscu_osx', 'trunk_noscu_win', 'trunk_static_ubuntu', 'trunk_static_osx',], 
	fileIsImportant = isTrunk)

c['schedulers'] = [ s1, ]

c['slaves'] = [
	BuildSlave("winterbot", "4Xyplz"),
	BuildSlave("daidalosbot", "4Xyplz"),
	BuildSlave("albatrosbot", "4Xyplz"),
]

c['slavePortnum'] = 9989

def steps(compile, javaEnabled):
	theSteps = [
		source.SVN(mode = 'update', svnurl = 'http://soar.googlecode.com/svn/trunk/SoarSuite'),
		shell.Compile(command = ["make", "clean"], description = "clean"), 
		shell.Compile(command = compile),
		shell.Test(command = ["Tests"]),
		shell.Test(command = ["TestSMLPerformance"]),
		shell.Test(command = ["TestSoarPerformance"]),
	]
	if javaEnabled:
		theSteps.append(shell.Test(command = ["java", "-jar", "out/share/java/soar-smljava-9.3.0.jar"]))
		theSteps.append(shell.Test(command = ["TestExternalLibrary"]))
	return theSteps

def steps_win(compile):
	return [
		source.SVN(mode = 'update', svnurl = 'http://soar.googlecode.com/svn/trunk/SoarSuite'),
		shell.Compile(command = ["build-clean.bat"], description = "clean"), 
		shell.Compile(command = compile),
		shell.Test(command = ["Tests"]),
		shell.Test(command = ["TestExternalLibrary"]),
		shell.Test(command = ["TestSMLPerformance"]),
		shell.Test(command = ["TestSoarPerformance"]),
		shell.Test(command = ["java", "-jar", "out\\share\\java\\soar-smljava-9.3.0.jar"]),
	]

env_ubuntu = {
	'PATH': 'out/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin',
	'PYTHONPATH': 'out/lib',
	'LD_LIBRARY_PATH': 'out/lib:/usr/local/lib',
	'SOAR_HOME': '../out',
	'JAVA_HOME': '/usr/lib/jvm/java-6-sun',
}

env_osx = {
	'PATH': 'out/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin', 
	'PYTHONPATH': 'out/lib',
	'DYLD_LIBRARY_PATH': 'out/lib',
	'SOAR_HOME': '../out',
	'JAVA_HOME': '/System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home',
}

env_win = {
	'ANT_HOME': 'C:\\apache-ant-1.8.0',
	'JAVA_HOME': 'C:\\Program Files\\Java\\jdk1.6.0_18',
	'PATH': 'C:\\Tcl\\bin;C:\\WINDOWS\\system32;C:\\WINDOWS;C:\\WINDOWS\\System32\\Wbem;C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0;C:\\Program Files\\TortoiseSVN\\bin;C:\\Program Files\\SlikSvn\\bin\\;C:\\Program Files\\OpenVPN\\bin;C:\\Program Files\\Java\\jdk1.6.0_18\\bin;C:\\apache-ant-1.8.0\\bin;out\\bin',
	'SOAR_HOME': '..\\out',
	'PYTHON_HOME': 'C:\\Python26',
	'SWIG_HOME': 'C:\\swigwin-1.3.40',
}

scu_build = ["make"]
noscu_build = ["make", "noscu"]
static_build = ["make", "static"]

scu_build_win = ["build.bat"]
noscu_build_win = ["build.bat", "build", "noscu"]
static_build_win = ["build.bat", "build", "noscu"] # TODO

f_trunk_ubuntu = factory.BuildFactory()
f_trunk_ubuntu.addSteps(steps(scu_build, True))

f_trunk_noscu_ubuntu = factory.BuildFactory()
f_trunk_noscu_ubuntu.addSteps(steps(noscu_build, True))

f_trunk_static_ubuntu = factory.BuildFactory()
f_trunk_static_ubuntu.addSteps(steps(static_build, False))

f_trunk_osx = factory.BuildFactory()
f_trunk_osx.addSteps(steps(scu_build, True))

f_trunk_noscu_osx = factory.BuildFactory()
f_trunk_noscu_osx.addSteps(steps(noscu_build, True))

f_trunk_static_osx = factory.BuildFactory()
f_trunk_static_osx.addSteps(steps(static_build, False))

f_trunk_win = factory.BuildFactory()
f_trunk_win.addSteps(steps_win(scu_build_win))

f_trunk_noscu_win = factory.BuildFactory()
f_trunk_noscu_win.addSteps(steps_win(noscu_build_win))

c['builders'] = [
	{	
		'name': 'trunk_ubuntu', 
		'builddir': 'trunk_ubuntu',
		'slavename': 'winterbot',
		'factory': f_trunk_ubuntu,
		'env': env_ubuntu,
	},
	{	
		'name': 'trunk_noscu_ubuntu', 
		'builddir': 'trunk_noscu_ubuntu',
		'slavename': 'winterbot',
		'factory': f_trunk_noscu_ubuntu,
		'env': env_ubuntu,
	},
	{	
		'name': 'trunk_static_ubuntu', 
		'builddir': 'trunk_static_ubuntu',
		'slavename': 'winterbot',
		'factory': f_trunk_static_ubuntu,
		'env': env_ubuntu,
	},
	{	
		'name': 'trunk_osx', 
		'builddir': 'trunk_osx',
		'slavename': 'daidalosbot',
		'factory': f_trunk_osx,
		'env': env_osx,
	},
	{	
		'name': 'trunk_noscu_osx', 
		'builddir': 'trunk_noscu_osx',
		'slavename': 'daidalosbot',
		'factory': f_trunk_noscu_osx,
		'env': env_osx,
	},
	{	
		'name': 'trunk_static_osx', 
		'builddir': 'trunk_static_osx',
		'slavename': 'daidalosbot',
		'factory': f_trunk_static_osx,
		'env': env_osx,
	},
	{	
		'name': 'trunk_win', 
		'builddir': 'trunk_win',
		'slavename': 'albatrosbot',
		'factory': f_trunk_win,
		'env': env_win,
	},
	{	
		'name': 'trunk_noscu_win', 
		'builddir': 'trunk_noscu_win',
		'slavename': 'albatrosbot',
		'factory': f_trunk_noscu_win,
		'env': env_win,
	},
]

c['status'] = []

c['status'].append(WebStatus(8010))

mn = MailNotifier(mode="problem", 
	fromaddr="soar-buildbot@winter.eecs.umich.edu", 
	sendToInterestedUsers=False, 
	extraRecipients=['soar-commits@googlegroups.com'])
c['status'].append(mn)

