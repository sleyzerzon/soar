#!/usr/bin/python
import os
import sys
import string
import re
import shutil
import urllib
import hashlib
import subprocess

Import('env')
env = env.Clone()

# swt.jar 3.4 digests
OSX_DIGEST = '7dab557faeb4e182281be824baebd856'
OSX64_DIGEST = '4de6f7460e2695ce5b66ece700c8d6f8'
GTK_DIGEST = '28b79f2cb0bc09c1efd4b711c0cd52a7'
GTK64_DIGEST = '69358481ec9d44b068bfe1dc1da57737'

def CheckJarmd5(env, jarpath):
        # open the swt.jar file
        try:
                f = file(jarpath)
        except:
                return False

        # compute digest
        m = hashlib.md5()
        while True:
            d = f.read(8096)
            if not d:
                break
            m.update(d)

        if sys.platform == 'darwin':
                if env['PLATFORM'] == '64':
                        return OSX64_DIGEST == m.hexdigest()
                else:
                        return OSX_DIGEST == m.hexdigest()
        else:
                if env['PLATFORM'] == '64':
                        return GTK64_DIGEST == m.hexdigest()
                else:
                        return GTK_DIGEST == m.hexdigest()

def CheckForSWTJar(env):
        jarpath = os.path.join('SMLJava', 'lib', 'swt.jar')
        if os.path.exists(jarpath):
                if CheckJarmd5(env, jarpath):
                        return True
                else:
                        print "md5 of swt.jar failed, removing old jar."
                        os.remove(jarpath)

        try:
                if sys.platform == 'darwin':
                        if env['PLATFORM'] == '64':
                                urllib.urlretrieve('http://ai.eecs.umich.edu/~soar/sitemaker/misc/jars/osx64/swt.jar', jarpath)
                        else:
                                urllib.urlretrieve('http://ai.eecs.umich.edu/~soar/sitemaker/misc/jars/osx/swt.jar', jarpath)
                else:
                        if env['PLATFORM'] == '64':
                                urllib.urlretrieve('http://ai.eecs.umich.edu/~soar/sitemaker/misc/jars/gtk64/swt.jar', jarpath)
                        else:
                                urllib.urlretrieve('http://ai.eecs.umich.edu/~soar/sitemaker/misc/jars/gtk32/swt.jar', jarpath)
        except IOError:
                print "Error downloading %s: IOError" % jarpath
                return False
        except ContentTooShortError:
                print "Error downloading %s: IOError" % jarpath
                return False

        if not CheckJarmd5(env, jarpath):
                print "Error downloading %s, md5 failed again." % jarpath
                return False

        print "Successfully downloaded", jarpath
        return True

# This checks for the swt.jar and attempts to download it if it doesn't exist
if not CheckForSWTJar(env):
	print "Could not find swt.jar. You can obtain the jar here:"
	print "\thttp://ai.eecs.umich.edu/~soar/sitemaker/misc/jars"
	print "Place swt.jar in SoarLibrary/bin"
	print "swt.jar required for Soar Java debugger... Exiting"
	Exit(1)

sharejava = env['PREFIX'] + '/share/java'
smljar = sharejava + '/sml.jar'
jars = [
	sharejava + '/soar-smljava-' + env['SOAR_VERSION'] + '.jar',
	sharejava + '/soar-smljava-' + env['SOAR_VERSION'] + '.src.jar',
	sharejava + '/soar-debugger-' + env['SOAR_VERSION'] + '.jar',
	sharejava + '/soar-debugger-' + env['SOAR_VERSION'] + '.src.jar',
	sharejava + '/soar-visualsoar-' + env['SOAR_VERSION'] + '.jar',
	sharejava + '/soar-visualsoar-' + env['SOAR_VERSION'] + '.src.jar',
	]

thisdir = env.Dir('#../Java')
env.Command(jars, smljar, 'ant -q -Dsoarprefix=$PREFIX -Dversion=' + env['SOAR_VERSION'], chdir=thisdir)

#TODO: clean doesn't work quite right with the target jars
# Clean java stuff
if env.GetOption('clean'):
	for x in BUILD_TARGETS:
		targetpath = os.path.realpath(str(x))
		if sharejava.startswith(targetpath):
			env.Execute('ant -q -Dsoarprefix=$PREFIX clean -Dversion=' + env['SOAR_VERSION'], chdir=thisdir)

