//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using Microsoft.Dss.ServiceModel.DsspServiceBase;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Xml;
using W3C.Soap;
using System.Security.Permissions;
using soarmsr = Robotics.SoarMSR;


namespace Robotics.SoarMSR
{
    
    
    /// <summary>
    /// Implementation class for SoarMSR
    /// </summary>
    [DisplayName("SoarMSR")]
    [Description("The SoarMSR Service - Control using Soar")]
    [Contract(Contract.Identifier)]
    public class SoarMSRService : DsspServiceBase
    {
        /// <summary>
        /// _state
        /// </summary>
        private SoarMSRState _state;

        // For saving and restoring state
        public const string InitialStateUri = ServicePaths.MountPoint + @"/Apps/QUT/Config/SoarMSR.Config.xml";
        [InitialStatePartner(Optional = true, ServiceUri = InitialStateUri)]
        
        /// <summary>
        /// _main Port
        /// </summary>
        [ServicePort("/soarmsr", AllowMultipleInstances=false)]
        private SoarMSROperations _mainPort = new SoarMSROperations();

        private DateTime _simulationStart;

        /// <summary>
        /// Default Service Constructor
        /// </summary>
        public SoarMSRService(DsspServiceCreationPort creationPort) : 
                base(creationPort)
        {
        }
        
        /// <summary>
        /// Service Start
        /// </summary>
        protected override void Start()
        {
			base.Start();
			// Add service specific initialization here.

            if (_state == null)
            {
                _state = new SoarMSRState();
            }

            _simulationStart = DateTime.Now;

            // There should be some code in here to validate the settings
            // from the config file just in case the user entered some
            // invalid values ...

            // Now save the State
            // This creates a new file the first time it is run.
            // Later, it re-reads the existing file, but by then
            // the file has been populated with the default values.
            SaveState(_state);

            // Listen on the main port for requests and call the appropriate handler.
            ActivateDsspOperationHandlers();

            // Publish the service to the local Node Directory
            DirectoryInsert();

            // display HTTP service Uri
            LogInfo(LogGroups.Console, "Service uri: ");
        }
        
        /// <summary>
        /// Get Handler
        /// </summary>
        /// <param name="get"></param>
        /// <returns></returns>
        [ServiceHandler(ServiceHandlerBehavior.Concurrent)]
        public virtual IEnumerator<ITask> GetHandler(Get get)
        {
            get.ResponsePort.Post(_state);
            yield break;
        }
    }
}
