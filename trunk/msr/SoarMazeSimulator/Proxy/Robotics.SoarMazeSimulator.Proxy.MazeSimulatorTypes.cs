//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Microsoft.Ccr.Core;
using Microsoft.Dss.Core;
using Microsoft.Dss.Core.Attributes;
using Microsoft.Dss.ServiceModel.Dssp;
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using W3C.Soap;
using compression = System.IO.Compression;
using constructor = Microsoft.Dss.Services.Constructor;
using contractmanager = Microsoft.Dss.Services.ContractManager;
using contractmodel = Microsoft.Dss.Services.ContractModel;
using io = System.IO;
using pxphysicalmodel = Microsoft.Robotics.PhysicalModel.Proxy;
using pxsoarmazesimulator = Robotics.SoarMazeSimulator.Proxy;
using reflection = System.Reflection;


namespace Robotics.SoarMazeSimulator.Proxy
{
    
    
    /// <summary>
    /// MazeSimulator Contract
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public sealed class Contract
    {
        
        /// The Unique Contract Identifier for the MazeSimulator service
        public const String Identifier = "http://schemas.tempuri.org/2006/08/soarmazesimulator.html";
        
        /// The Dss Service dssModel Contract(s)
        public static List<contractmodel.ServiceSummary> ServiceModel()
        {
            contractmanager.ServiceSummaryLoader loader = new contractmanager.ServiceSummaryLoader();
            return loader.GetServiceSummaries(typeof(Contract).Assembly);

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <param name="partners">Optional list of service partners for new service instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort, params PartnerType[] partners)
        {
            DsspResponsePort<CreateResponse> result = new DsspResponsePort<CreateResponse>();
            ServiceInfoType si = new ServiceInfoType(Contract.Identifier, null);
            if (partners != null)
            {
                si.PartnerList = new List<PartnerType>(partners);
            }
            Microsoft.Dss.Services.Constructor.Create create =
                new Microsoft.Dss.Services.Constructor.Create(si, result);
            contructorServicePort.Post(create);
            return result;

        }
        
        /// <summary>
        /// Creates an instance of the service associated with this contract
        /// </summary>
        /// <param name="contructorServicePort">Contractor Service that will create the instance</param>
        /// <returns>Result PortSet for retrieving service creation response</returns>
        public static DsspResponsePort<CreateResponse> CreateService(constructor.ConstructorPort contructorServicePort)
        {
            return Contract.CreateService(contructorServicePort, null);
        }
    }
    
    /// <summary>
    /// Soar Maze Simulator State
    /// </summary>
    [DataContract()]
    [XmlRootAttribute("SoarMazeSimulatorState", Namespace="http://schemas.tempuri.org/2006/08/soarmazesimulator.html")]
    public class SoarMazeSimulatorState : ICloneable, IDssSerializable
    {
        
        private String _maze;
        
        private String _groundTexture;
        
        private String[] _wallTextures;
        
        private pxphysicalmodel.Vector3[] _wallColors;
        
        private Single[] _heightMap;
        
        private Single[] _massMap;
        
        private Boolean[] _useSphere;
        
        private Single _wallBoxSize;
        
        private Single _gridSpacing;
        
        private Single _heightScale;
        
        private Single _defaultHeight;
        
        private Single _sphereScale;
        
        private Int32 _robotStartCellRow;
        
        private Int32 _robotStartCellCol;
        
        private String _robotType;
        
        /// <summary>
        /// Maze
        /// </summary>
        [DataMember()]
        public String Maze
        {
            get
            {
                return this._maze;
            }
            set
            {
                this._maze = value;
            }
        }
        
        /// <summary>
        /// Ground Texture
        /// </summary>
        [DataMember()]
        public String GroundTexture
        {
            get
            {
                return this._groundTexture;
            }
            set
            {
                this._groundTexture = value;
            }
        }
        
        /// <summary>
        /// Wall Textures
        /// </summary>
        [DataMember()]
        public String[] WallTextures
        {
            get
            {
                return this._wallTextures;
            }
            set
            {
                this._wallTextures = value;
            }
        }
        
        /// <summary>
        /// Wall Colors
        /// </summary>
        [DataMember()]
        public pxphysicalmodel.Vector3[] WallColors
        {
            get
            {
                return this._wallColors;
            }
            set
            {
                this._wallColors = value;
            }
        }
        
        /// <summary>
        /// Height Map
        /// </summary>
        [DataMember()]
        public Single[] HeightMap
        {
            get
            {
                return this._heightMap;
            }
            set
            {
                this._heightMap = value;
            }
        }
        
        /// <summary>
        /// Mass Map
        /// </summary>
        [DataMember()]
        public Single[] MassMap
        {
            get
            {
                return this._massMap;
            }
            set
            {
                this._massMap = value;
            }
        }
        
        /// <summary>
        /// Use Sphere
        /// </summary>
        [DataMember()]
        public Boolean[] UseSphere
        {
            get
            {
                return this._useSphere;
            }
            set
            {
                this._useSphere = value;
            }
        }
        
        /// <summary>
        /// Wall Box Size
        /// </summary>
        [DataMember()]
        public Single WallBoxSize
        {
            get
            {
                return this._wallBoxSize;
            }
            set
            {
                this._wallBoxSize = value;
            }
        }
        
        /// <summary>
        /// Grid Spacing
        /// </summary>
        [DataMember()]
        public Single GridSpacing
        {
            get
            {
                return this._gridSpacing;
            }
            set
            {
                this._gridSpacing = value;
            }
        }
        
        /// <summary>
        /// Height Scale
        /// </summary>
        [DataMember()]
        public Single HeightScale
        {
            get
            {
                return this._heightScale;
            }
            set
            {
                this._heightScale = value;
            }
        }
        
        /// <summary>
        /// Default Height
        /// </summary>
        [DataMember()]
        public Single DefaultHeight
        {
            get
            {
                return this._defaultHeight;
            }
            set
            {
                this._defaultHeight = value;
            }
        }
        
        /// <summary>
        /// Sphere Scale
        /// </summary>
        [DataMember()]
        public Single SphereScale
        {
            get
            {
                return this._sphereScale;
            }
            set
            {
                this._sphereScale = value;
            }
        }
        
        /// <summary>
        /// Robot Start Cell Row
        /// </summary>
        [DataMember()]
        public Int32 RobotStartCellRow
        {
            get
            {
                return this._robotStartCellRow;
            }
            set
            {
                this._robotStartCellRow = value;
            }
        }
        
        /// <summary>
        /// Robot Start Cell Col
        /// </summary>
        [DataMember()]
        public Int32 RobotStartCellCol
        {
            get
            {
                return this._robotStartCellCol;
            }
            set
            {
                this._robotStartCellCol = value;
            }
        }
        
        /// <summary>
        /// Robot Type
        /// </summary>
        [DataMember()]
        public String RobotType
        {
            get
            {
                return this._robotType;
            }
            set
            {
                this._robotType = value;
            }
        }
        
        /// <summary>
        /// Copy To Soar Maze Simulator State
        /// </summary>
        public virtual void CopyTo(IDssSerializable target)
        {
            SoarMazeSimulatorState typedTarget = target as SoarMazeSimulatorState;

            if (typedTarget == null)
                throw new ArgumentException("CopyTo({0}) requires type {0}", this.GetType().FullName);
            typedTarget.Maze = this.Maze;
            typedTarget.GroundTexture = this.GroundTexture;

            // copy System.String[] WallTextures
            if (this.WallTextures != null)
            {
                typedTarget.WallTextures = new System.String[this.WallTextures.GetLength(0)];
                this.WallTextures.CopyTo(typedTarget.WallTextures, 0);
            }

            // copy Microsoft.Robotics.PhysicalModel.Proxy.Vector3[] WallColors
            if (this.WallColors != null)
            {
                typedTarget.WallColors = new Microsoft.Robotics.PhysicalModel.Proxy.Vector3[this.WallColors.GetLength(0)];
                for (int d0 = 0; d0 < this.WallColors.GetLength(0); d0++)
                    typedTarget.WallColors[d0] = (Microsoft.Robotics.PhysicalModel.Proxy.Vector3)((Microsoft.Dss.Core.IDssSerializable)this.WallColors[d0]).Clone();
            }

            // copy System.Single[] HeightMap
            if (this.HeightMap != null)
            {
                typedTarget.HeightMap = new System.Single[this.HeightMap.GetLength(0)];
                this.HeightMap.CopyTo(typedTarget.HeightMap, 0);
            }

            // copy System.Single[] MassMap
            if (this.MassMap != null)
            {
                typedTarget.MassMap = new System.Single[this.MassMap.GetLength(0)];
                this.MassMap.CopyTo(typedTarget.MassMap, 0);
            }

            // copy System.Boolean[] UseSphere
            if (this.UseSphere != null)
            {
                typedTarget.UseSphere = new System.Boolean[this.UseSphere.GetLength(0)];
                this.UseSphere.CopyTo(typedTarget.UseSphere, 0);
            }
            typedTarget.WallBoxSize = this.WallBoxSize;
            typedTarget.GridSpacing = this.GridSpacing;
            typedTarget.HeightScale = this.HeightScale;
            typedTarget.DefaultHeight = this.DefaultHeight;
            typedTarget.SphereScale = this.SphereScale;
            typedTarget.RobotStartCellRow = this.RobotStartCellRow;
            typedTarget.RobotStartCellCol = this.RobotStartCellCol;
            typedTarget.RobotType = this.RobotType;
        }
        
        /// <summary>
        /// Clone Soar Maze Simulator State
        /// </summary>
        public virtual object Clone()
        {
            SoarMazeSimulatorState target = new SoarMazeSimulatorState();

            target.Maze = this.Maze;
            target.GroundTexture = this.GroundTexture;

            // copy System.String[] WallTextures
            if (this.WallTextures != null)
            {
                target.WallTextures = new System.String[this.WallTextures.GetLength(0)];
                this.WallTextures.CopyTo(target.WallTextures, 0);
            }

            // copy Microsoft.Robotics.PhysicalModel.Proxy.Vector3[] WallColors
            if (this.WallColors != null)
            {
                target.WallColors = new Microsoft.Robotics.PhysicalModel.Proxy.Vector3[this.WallColors.GetLength(0)];
                for (int d0 = 0; d0 < this.WallColors.GetLength(0); d0++)
                    target.WallColors[d0] = (Microsoft.Robotics.PhysicalModel.Proxy.Vector3)((Microsoft.Dss.Core.IDssSerializable)this.WallColors[d0]).Clone();
            }

            // copy System.Single[] HeightMap
            if (this.HeightMap != null)
            {
                target.HeightMap = new System.Single[this.HeightMap.GetLength(0)];
                this.HeightMap.CopyTo(target.HeightMap, 0);
            }

            // copy System.Single[] MassMap
            if (this.MassMap != null)
            {
                target.MassMap = new System.Single[this.MassMap.GetLength(0)];
                this.MassMap.CopyTo(target.MassMap, 0);
            }

            // copy System.Boolean[] UseSphere
            if (this.UseSphere != null)
            {
                target.UseSphere = new System.Boolean[this.UseSphere.GetLength(0)];
                this.UseSphere.CopyTo(target.UseSphere, 0);
            }
            target.WallBoxSize = this.WallBoxSize;
            target.GridSpacing = this.GridSpacing;
            target.HeightScale = this.HeightScale;
            target.DefaultHeight = this.DefaultHeight;
            target.SphereScale = this.SphereScale;
            target.RobotStartCellRow = this.RobotStartCellRow;
            target.RobotStartCellCol = this.RobotStartCellCol;
            target.RobotType = this.RobotType;
            return target;

        }
        
        /// <summary>
        /// Serialize Serialize
        /// </summary>
        public virtual void Serialize(System.IO.BinaryWriter writer)
        {
            if (Maze == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                writer.Write(Maze);
            }

            if (GroundTexture == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                writer.Write(GroundTexture);
            }

            if (WallTextures == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                // Dimensions
                writer.Write(1);

                // Elements per dimension
                writer.Write(this.WallTextures.GetLength(0));

                for(int d0 = 0; d0 < this.WallTextures.GetLength(0); d0++)
                {
                    if (WallTextures[d0] == null) writer.Write((byte)0);
                    else
                    {
                        // null flag
                        writer.Write((byte)1);

                        writer.Write(WallTextures[d0]);
                    }
                }
            }

            if (WallColors == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                // Dimensions
                writer.Write(1);

                // Elements per dimension
                writer.Write(this.WallColors.GetLength(0));

                for(int d0 = 0; d0 < this.WallColors.GetLength(0); d0++)
                {
                    ((Microsoft.Dss.Core.IDssSerializable)WallColors[d0]).Serialize(writer);
                }
            }

            if (HeightMap == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                // Dimensions
                writer.Write(1);

                // Elements per dimension
                writer.Write(this.HeightMap.GetLength(0));

                for(int d0 = 0; d0 < this.HeightMap.GetLength(0); d0++)
                {
                    writer.Write(HeightMap[d0]);
                }
            }

            if (MassMap == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                // Dimensions
                writer.Write(1);

                // Elements per dimension
                writer.Write(this.MassMap.GetLength(0));

                for(int d0 = 0; d0 < this.MassMap.GetLength(0); d0++)
                {
                    writer.Write(MassMap[d0]);
                }
            }

            if (UseSphere == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                // Dimensions
                writer.Write(1);

                // Elements per dimension
                writer.Write(this.UseSphere.GetLength(0));

                for(int d0 = 0; d0 < this.UseSphere.GetLength(0); d0++)
                {
                    writer.Write(UseSphere[d0]);
                }
            }

            writer.Write(WallBoxSize);

            writer.Write(GridSpacing);

            writer.Write(HeightScale);

            writer.Write(DefaultHeight);

            writer.Write(SphereScale);

            writer.Write(RobotStartCellRow);

            writer.Write(RobotStartCellCol);

            if (RobotType == null) writer.Write((byte)0);
            else
            {
                // null flag
                writer.Write((byte)1);

                writer.Write(RobotType);
            }

        }
        
        /// <summary>
        /// Deserialize Deserialize
        /// </summary>
        public virtual object Deserialize(System.IO.BinaryReader reader)
        {
            if (reader.ReadByte() == 0) {}
            else
            {
                Maze = reader.ReadString();
            } //nullable

            if (reader.ReadByte() == 0) {}
            else
            {
                GroundTexture = reader.ReadString();
            } //nullable

            if (reader.ReadByte() == 0) {}
            else
            {
                // Dimensions
                int dims_count4008511001 = reader.ReadInt32();

                // Elements per dimension
                int[] count4008511001 = new int[dims_count4008511001];
                for(int ix = 0; ix < dims_count4008511001; ix++)
                    count4008511001[ix] = reader.ReadInt32();

                WallTextures = new System.String[count4008511001[0]];
                for(int d0 = 0; d0 < count4008511001[0]; d0++)
                {
                    if (reader.ReadByte() == 0) {}
                    else
                    {
                        WallTextures[d0] = reader.ReadString();
                    } //nullable
                }
            } //nullable

            if (reader.ReadByte() == 0) {}
            else
            {
                // Dimensions
                int dims_count285712513 = reader.ReadInt32();

                // Elements per dimension
                int[] count285712513 = new int[dims_count285712513];
                for(int ix = 0; ix < dims_count285712513; ix++)
                    count285712513[ix] = reader.ReadInt32();

                WallColors = new Microsoft.Robotics.PhysicalModel.Proxy.Vector3[count285712513[0]];
                for(int d0 = 0; d0 < count285712513[0]; d0++)
                {
                    WallColors[d0] = (Microsoft.Robotics.PhysicalModel.Proxy.Vector3)((Microsoft.Dss.Core.IDssSerializable)new Microsoft.Robotics.PhysicalModel.Proxy.Vector3()).Deserialize(reader);
                }
            } //nullable

            if (reader.ReadByte() == 0) {}
            else
            {
                // Dimensions
                int dims_count98575991 = reader.ReadInt32();

                // Elements per dimension
                int[] count98575991 = new int[dims_count98575991];
                for(int ix = 0; ix < dims_count98575991; ix++)
                    count98575991[ix] = reader.ReadInt32();

                HeightMap = new System.Single[count98575991[0]];
                for(int d0 = 0; d0 < count98575991[0]; d0++)
                {
                    HeightMap[d0] = reader.ReadSingle();
                }
            } //nullable

            if (reader.ReadByte() == 0) {}
            else
            {
                // Dimensions
                int dims_count3309254735 = reader.ReadInt32();

                // Elements per dimension
                int[] count3309254735 = new int[dims_count3309254735];
                for(int ix = 0; ix < dims_count3309254735; ix++)
                    count3309254735[ix] = reader.ReadInt32();

                MassMap = new System.Single[count3309254735[0]];
                for(int d0 = 0; d0 < count3309254735[0]; d0++)
                {
                    MassMap[d0] = reader.ReadSingle();
                }
            } //nullable

            if (reader.ReadByte() == 0) {}
            else
            {
                // Dimensions
                int dims_count3159784692 = reader.ReadInt32();

                // Elements per dimension
                int[] count3159784692 = new int[dims_count3159784692];
                for(int ix = 0; ix < dims_count3159784692; ix++)
                    count3159784692[ix] = reader.ReadInt32();

                UseSphere = new System.Boolean[count3159784692[0]];
                for(int d0 = 0; d0 < count3159784692[0]; d0++)
                {
                    UseSphere[d0] = reader.ReadBoolean();
                }
            } //nullable

            WallBoxSize = reader.ReadSingle();

            GridSpacing = reader.ReadSingle();

            HeightScale = reader.ReadSingle();

            DefaultHeight = reader.ReadSingle();

            SphereScale = reader.ReadSingle();

            RobotStartCellRow = reader.ReadInt32();

            RobotStartCellCol = reader.ReadInt32();

            if (reader.ReadByte() == 0) {}
            else
            {
                RobotType = reader.ReadString();
            } //nullable

            return this;

        }
    }
    
    /// <summary>
    /// Maze Simulator Operations
    /// </summary>
    [ServicePort()]
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class MazeSimulatorOperations : PortSet<Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup, Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop, Get, Replace>
    {
        
        /// <summary>
        /// Required Lookup request body type
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup()
        {
            Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body = new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Lookup and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.LookupResponse,Fault> DsspDefaultLookup(Microsoft.Dss.ServiceModel.Dssp.LookupRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultLookup();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.LookupRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// A request to drop the service.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop()
        {
            Microsoft.Dss.ServiceModel.Dssp.DropRequestType body = new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Dssp Default Drop and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultDropResponseType,Fault> DsspDefaultDrop(Microsoft.Dss.ServiceModel.Dssp.DropRequestType body)
        {
            Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop op = new Microsoft.Dss.ServiceModel.Dssp.DsspDefaultDrop();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.DropRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Required Get body type
        /// </summary>
        public virtual PortSet<SoarMazeSimulatorState,Fault> Get()
        {
            Microsoft.Dss.ServiceModel.Dssp.GetRequestType body = new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            Get op = new Get(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Get and return the response port.
        /// </summary>
        public virtual PortSet<SoarMazeSimulatorState,Fault> Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body)
        {
            Get op = new Get();
            op.Body = body ?? new Microsoft.Dss.ServiceModel.Dssp.GetRequestType();
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Soar Maze Simulator State
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,Fault> Replace()
        {
            SoarMazeSimulatorState body = new SoarMazeSimulatorState();
            Replace op = new Replace(body);
            this.Post(op);
            return op.ResponsePort;

        }
        
        /// <summary>
        /// Post Replace and return the response port.
        /// </summary>
        public virtual PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,Fault> Replace(SoarMazeSimulatorState body)
        {
            Replace op = new Replace();
            op.Body = body ?? new SoarMazeSimulatorState();
            this.Post(op);
            return op.ResponsePort;

        }
    }
    
    /// <summary>
    /// Get
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<Microsoft.Dss.ServiceModel.Dssp.GetRequestType, PortSet<SoarMazeSimulatorState, Fault>>
    {
        
        /// <summary>
        /// Get
        /// </summary>
        public Get()
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Get
        /// </summary>
        public Get(Microsoft.Dss.ServiceModel.Dssp.GetRequestType body, Microsoft.Ccr.Core.PortSet<SoarMazeSimulatorState,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
    
    /// <summary>
    /// Replace
    /// </summary>
    [XmlTypeAttribute(IncludeInSchema=false)]
    public class Replace : Microsoft.Dss.ServiceModel.Dssp.Replace<SoarMazeSimulatorState, PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType, Fault>>
    {
        
        /// <summary>
        /// Replace
        /// </summary>
        public Replace()
        {
        }
        
        /// <summary>
        /// Replace
        /// </summary>
        public Replace(SoarMazeSimulatorState body) : 
                base(body)
        {
        }
        
        /// <summary>
        /// Replace
        /// </summary>
        public Replace(SoarMazeSimulatorState body, Microsoft.Ccr.Core.PortSet<Microsoft.Dss.ServiceModel.Dssp.DefaultReplaceResponseType,W3C.Soap.Fault> responsePort) : 
                base(body, responsePort)
        {
        }
    }
}
